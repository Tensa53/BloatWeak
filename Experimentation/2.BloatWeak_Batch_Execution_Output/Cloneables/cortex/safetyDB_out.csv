,dep,version,filepath,bloated,cve,affected versions,advisory
0,yq,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,PVE-2021-42987,<2.13.0,"Yq 2.13.0  armors against entity expansion attacks.
https://github.com/kislyuk/yq/commit/a5d2c572ee69009380a54a67662cf781f3036450"
1,pyyaml,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2017-18342,<4,Pyyaml before 4 uses ``yaml.load`` which has been assigned CVE-2017-18342.
2,pyyaml,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2020-1747,<5.3.1,"Pyyaml 5.3.1 includes a fix for CVE-2020-1747: A vulnerability was discovered in the PyYAML library in versions before 5.3.1, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. An attacker could use this flaw to execute arbitrary code on the system by abusing the python/object/new constructor."
3,pyyaml,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2020-14343,<5.4,"Pyyaml version 5.4 includes a fix for CVE-2020-14343: A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.
https://bugzilla.redhat.com/show_bug.cgi?id=1860466"
4,pyyaml,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2019-20477,">=5.1,<=5.1.2","PyYAML 5.1 through 5.1.2 has insufficient restrictions on the load and load_all functions because of a class deserialization issue, e.g., Popen is a class in the subprocess module. See CVE-2019-20477. NOTE: this issue exists because of an incomplete fix for CVE-2017-18342."
5,boto3,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,PVE-2021-41708,<1.4.5,"Boto3 version 1.4.5 fixes an information exposure vulnerability: The boto logger boto3.resources.action, which propagates to root logger, logs the entire uploaded bytes at INFO level.
https://github.com/boto/boto3/issues/1017"
6,jinja2,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2020-28493,<2.11.3,"This affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the '_punctuation_re regex' operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory."
7,jinja2,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2014-1402,<2.7.2,"Jinja2 2.7.2 includes a fix for CVE-2014-1402: The default configuration for bccache.FileSystemBytecodeCache in Jinja2 before 2.7.2 does not properly create temporary files, which allows local users to gain privileges via a crafted .cache file with a name starting with __jinja2_ in /tmp."
8,jinja2,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2016-10745,<2.8.1,Jinja2 2.8.1 sandboxes format expressions with the same rules as in Jinja if the sandbox mode is used. This solves various information leakage problems that could occur with format strings.
9,jinja2,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2019-10906,">=0,<2.10.1","In Pallets Jinja before 2.10.1, str.format_map allows a sandbox escape."
10,jinja2,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,CVE-2014-0012,">=0,<2.7.3","FileSystemBytecodeCache in Jinja2 2.7.2 does not properly create temporary directories, which allows local users to gain privileges by pre-creating a temporary directory with a user's uid.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-1402."
11,click,==8.0.4,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/manager/requirements.txt,False,no one,no one,no one
12,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
13,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
14,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
15,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
16,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
17,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
18,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
19,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
20,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
21,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
22,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
23,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
24,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2014-1830,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. This fixes CVE-2014-1830.
25,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2014-1829,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. See: CVE-2014-1829.
26,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2018-18074,<=2.19.1,"Requests before 2.20.0 sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
27,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2015-2296,">=2.1,<=2.5.3",The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.
28,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/multi-container/app/requirements.txt,False,CVE-2023-32681,">=2.3.0,<2.31.0","Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.

"
29,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
30,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
31,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
32,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
33,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
34,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
35,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
36,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
37,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
38,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
39,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
40,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/hello-world/app/requirements.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
41,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
42,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
43,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
44,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
45,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
46,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
47,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
48,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
49,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
50,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
51,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
52,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/prime-generator/app/requirements.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
53,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
54,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
55,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
56,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
57,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
58,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
59,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
60,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
61,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
62,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
63,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
64,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
65,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2022-1941,<4.23.0,Transformers 4.23.0 updates its dependency 'protobuf' requirement to '<=3.20.2' to include a security fix.
66,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,PVE-2022-51450,<4.23.0,"Transformers 4.23.0 includes a fix for a link vulnerable to repojacking.
https://github.com/huggingface/transformers/commit/ce2620194b4a8f070cd29504d34a79758affdf95"
67,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,PVE-2021-40187,<4.5.0,Transformers 4.5.0 includes various vulnerability fixes.
68,torch,==1.7.1+cpu,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-cpu.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
69,sentencepiece,==0.1.94,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,no one,no one,no one
70,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2022-1941,<4.23.0,Transformers 4.23.0 updates its dependency 'protobuf' requirement to '<=3.20.2' to include a security fix.
71,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,PVE-2022-51450,<4.23.0,"Transformers 4.23.0 includes a fix for a link vulnerable to repojacking.
https://github.com/huggingface/transformers/commit/ce2620194b4a8f070cd29504d34a79758affdf95"
72,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,PVE-2021-40187,<4.5.0,Transformers 4.5.0 includes various vulnerability fixes.
73,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
74,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
75,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
76,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
77,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
78,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
79,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
80,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
81,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
82,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
83,uvicorn,==0.16.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,no one,no one,no one
84,torch,==1.10.2,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/text-generator/app/requirements-gpu.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
85,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
86,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
87,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
88,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
89,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
90,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
91,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
92,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
93,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
94,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
95,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
96,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/realtime/sleep/app/requirements.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
97,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2017-12852,<1.13.2,"Numpy 1.13.2 includes a fix for CVE-2017-12852: The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.
https://github.com/numpy/numpy/issues/9560#issuecomment-322395292"
98,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2019-6446,<1.16.3,"Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.
https://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb"
99,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
100,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
101,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
102,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
103,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2014-1859,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1859: (1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/pull/4262"
104,numpy,==1.18.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2014-1858,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1858: __init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15"
105,scikit-learn,==0.21.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,PVE-2022-52255,<0.24.2,"Scikit-learn 0.24.2 includes a fix for a ReDoS vulnerability.
https://github.com/scikit-learn/scikit-learn/issues/19522"
106,scikit-learn,==0.21.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2020-13092,">=0,<0.23.1","** DISPUTED ** scikit-learn (aka sklearn) through 0.23.0 can unserialize and execute commands from an untrusted file that is passed to the joblib.load() function, if __reduce__ makes an os.system call. NOTE: third parties dispute this issue because the joblib.load() function is documented as unsafe and it is the user's responsibility to use the function in a secure manner."
107,scikit-learn,==0.21.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,CVE-2020-28975,">=0,<0.24.dev0","** DISPUTED ** svm_predict_values in svm.cpp in Libsvm v324, as used in scikit-learn 0.23.2 and other products, allows attackers to cause a denial of service (segmentation fault) via a crafted model SVM (introduced via pickle, json, or any other model permanence standard) with a large value in the _n_support array. NOTE: the scikit-learn vendor's position is that the behavior can only occur if the library's API is violated by an application that changes a private attribute."
108,boto3,==1.17.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/task/iris-classifier-trainer/app/requirements.txt,False,PVE-2021-41708,<1.4.5,"Boto3 version 1.4.5 fixes an information exposure vulnerability: The boto logger boto3.resources.action, which propagates to root logger, logs the entire uploaded bytes at INFO level.
https://github.com/boto/boto3/issues/1017"
109,torchvision,==0.8.2+cpu,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,no one,no one,no one
110,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2014-1830,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. This fixes CVE-2014-1830.
111,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2014-1829,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. See: CVE-2014-1829.
112,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2018-18074,<=2.19.1,"Requests before 2.20.0 sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
113,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2015-2296,">=2.1,<=2.5.3",The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.
114,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2023-32681,">=2.3.0,<2.31.0","Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.

"
115,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
116,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
117,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
118,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
119,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
120,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
121,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
122,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
123,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
124,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
125,torch,==1.7.1+cpu,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
126,boto3,==1.17.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,PVE-2021-41708,<1.4.5,"Boto3 version 1.4.5 fixes an information exposure vulnerability: The boto logger boto3.resources.action, which propagates to root logger, logs the entire uploaded bytes at INFO level.
https://github.com/boto/boto3/issues/1017"
127,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
128,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-cpu.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
129,sentencepiece,==0.1.94,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,no one,no one,no one
130,torchvision,==0.8.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,no one,no one,no one
131,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2014-1830,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. This fixes CVE-2014-1830.
132,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2014-1829,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. See: CVE-2014-1829.
133,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2018-18074,<=2.19.1,"Requests before 2.20.0 sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
134,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2015-2296,">=2.1,<=2.5.3",The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.
135,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2023-32681,">=2.3.0,<2.31.0","Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.

"
136,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
137,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
138,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
139,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
140,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
141,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
142,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
143,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
144,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
145,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
146,uvicorn,==0.16.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,no one,no one,no one
147,torch,==1.10.2,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
148,boto3,==1.17.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/image-classifier-alexnet/app/requirements-gpu.txt,False,PVE-2021-41708,<1.4.5,"Boto3 version 1.4.5 fixes an information exposure vulnerability: The boto logger boto3.resources.action, which propagates to root logger, logs the entire uploaded bytes at INFO level.
https://github.com/boto/boto3/issues/1017"
149,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
150,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
151,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
152,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
153,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
154,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
155,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
156,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
157,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
158,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
159,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
160,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
161,boto3,==1.17.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/batch/sum/app/requirements.txt,False,PVE-2021-41708,<1.4.5,"Boto3 version 1.4.5 fixes an information exposure vulnerability: The boto logger boto3.resources.action, which propagates to root logger, logs the entire uploaded bytes at INFO level.
https://github.com/boto/boto3/issues/1017"
162,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
163,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
164,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
165,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
166,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
167,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
168,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
169,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
170,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
171,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
172,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
173,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/hello-world/app/requirements.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
174,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2020-7695,<0.11.7,"Uvicorn before 0.11.7 is vulnerable to HTTP response splitting. CRLF sequences are not escaped in the value of HTTP headers. Attackers can exploit this to add arbitrary headers to HTTP responses, or even return an arbitrary response body, whenever crafted input is used to construct HTTP headers."
175,uvicorn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2020-7694,<0.11.7,"The request logger provided by Uvicorn prior to version 0.11.7 is vulnerable to ASNI escape sequence injection. Whenever any HTTP request is received, the default behaviour of uvicorn is to log its details to either the console or a log file. When attackers request crafted URLs with percent-encoded escape sequences, the logging component will log the URL after it's been processed with urllib.parse.unquote, therefore converting any percent-encoded characters into their single-character equivalent, which can have special meaning in terminal emulators. By requesting URLs with crafted paths, attackers can: * Pollute uvicorn's access logs, therefore jeopardising the integrity of such files. * Use ANSI sequence codes to attempt to interact with the terminal emulator that's displaying the logs (either in real time or from a file). See: CVE-2020-7694."
176,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
177,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
178,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
179,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
180,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
181,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
182,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
183,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
184,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
185,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
186,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2022-1941,<4.23.0,Transformers 4.23.0 updates its dependency 'protobuf' requirement to '<=3.20.2' to include a security fix.
187,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,PVE-2022-51450,<4.23.0,"Transformers 4.23.0 includes a fix for a link vulnerable to repojacking.
https://github.com/huggingface/transformers/commit/ce2620194b4a8f070cd29504d34a79758affdf95"
188,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,PVE-2021-40187,<4.5.0,Transformers 4.5.0 includes various vulnerability fixes.
189,torch,==1.7.1+cpu,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-cpu.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
190,sentencepiece,==0.1.94,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,no one,no one,no one
191,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2022-1941,<4.23.0,Transformers 4.23.0 updates its dependency 'protobuf' requirement to '<=3.20.2' to include a security fix.
192,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,PVE-2022-51450,<4.23.0,"Transformers 4.23.0 includes a fix for a link vulnerable to repojacking.
https://github.com/huggingface/transformers/commit/ce2620194b4a8f070cd29504d34a79758affdf95"
193,transformers,==3.0.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,PVE-2021-40187,<4.5.0,Transformers 4.5.0 includes various vulnerability fixes.
194,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2019-11324,<0.18.0,Fastapi 0.18.0 updates its dependency 'urllib3' to v1.24.2 to include a security fix.
195,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,PVE-2021-37231,<0.30.0,"Fastapi 0.30.0 avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the `response_model` (e.g. you return a `UserInDB` that inherits from `User` but contains extra fields, like `hashed_password`, and `User` is used in the `response_model`), it would still pass the validation (because `UserInDB` is a subclass of `User`) and the object would be returned as-is, including the `hashed_password`. To fix this, the declared `response_model` is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a `List[Item]`), the Pydantic model class(es) will be a different one (the ""cloned"" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned `response_model`. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned `response_model`, containing only the declared fields as normally."
196,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,PVE-2021-37428,<0.37.0,Fastapi 0.37.0 fixes a security issue: when returning a sub-class of a response model and using `skip_defaults` it could leak information. See: https://github.com/tiangolo/fastapi/pull/485
197,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2021-29510,<0.65.1,"Fastapi 0.65.1 upgrades pydantic pin, to handle CVE-2021-29510."
198,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2021-32677,<0.65.2,"Fastapi version 0.65.2 includes a security fix for CVE-2021-32677: FastAPI versions lower than 0.65.2 that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack. In versions lower than 0.65.2, FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json). A request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. Requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests. The browser will execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. The request data is now parsed as JSON only if the content-type header is application/json or another JSON compatible media type like application/geo+json. It's best to upgrade to the latest FastAPI, but if updating is not possible then a middleware or a dependency that checks the content-type header and aborts the request if it is not application/json or another JSON compatible content type can act as a mitigating workaround.
https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7
https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d"
199,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2021-46708,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
200,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2018-25031,<0.75.2,Fastapi 0.75.2 updates its NPM dependency 'swagger-ui' to include security fixes.
201,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2021-45958,<0.75.2,Fastapi 0.75.2 updates its dependency 'ujson' ranges to include a security fix.
202,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2023-30798,<0.92.0,Fastapi 0.92.0 updates its dependency 'Starlette' to v0.25.0 to include a security fix.
203,fastapi,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2023-29159,<0.95.2,Fastapi 0.95.2 updates its dependency 'Starlette' to versions '>=0.27.0' to include a security fix.
204,uvicorn,==0.16.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,no one,no one,no one
205,torch,==1.10.2,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/apis/async/text-generator/app/requirements-gpu.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
206,requests,==2.24.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,CVE-2015-2296,">=2.1,<=2.5.3",The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.
207,requests,==2.24.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,CVE-2023-32681,">=2.3.0,<2.31.0","Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.

"
208,jsonschema,==3.2.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,no one,no one,no one
209,pytest,==6.1.*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,no one,no one,no one
210,pytest-print,==0.2.1,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,True,no one,no one,no one
211,python-dotenv,==0.15.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,no one,no one,no one
212,pyyaml,>=5.3.1,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,CVE-2020-14343,<5.4,"Pyyaml version 5.4 includes a fix for CVE-2020-14343: A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.
https://bugzilla.redhat.com/show_bug.cgi?id=1860466"
213,pyyaml,>=5.3.1,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,CVE-2019-20477,">=5.1,<=5.1.2","PyYAML 5.1 through 5.1.2 has insufficient restrictions on the load and load_all functions because of a class deserialization issue, e.g., Popen is a class in the subprocess module. See CVE-2019-20477. NOTE: this issue exists because of an incomplete fix for CVE-2017-18342."
214,boto3,>=1.14.53,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,False,no one,no one,no one
215,cortex,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/test/e2e/setup.py,True,PVE-2021-40128,<0.32.0,cortex before 0.32.0
216,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2013-1633,<0.7,"Setuptools version 0.7 includes a fix for CVE-2013-1633: Easy_install in setuptools before 0.7 uses HTTP to retrieve packages from the PyPI repository, and does not perform integrity checks on package contents, which allows man-in-the-middle attackers to execute arbitrary code via a crafted response to the default use of the product."
217,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,PVE-2021-26129,<0.9.5,setuptools 0.9.5 fixes a security vulnerability in SSL certificate validation.
218,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,PVE-2021-26132,<1.3,"Setuptools before 1.3 has a security vulnerability in SSL match_hostname check, similar to CVE-2013-7440."
219,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,PVE-2021-26133,<3.0,setuptools 3.0 avoids the potential security vulnerabilities presented by use of tar archives in ez_setup.py. It also leverages the security features added to ZipFile.extract in Python 2.7.4.
220,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2022-40897,<65.5.1,"Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.
https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages"
221,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2014-1830,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. This fixes CVE-2014-1830.
222,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2014-1829,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. See: CVE-2014-1829.
223,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2018-18074,<=2.19.1,"Requests before 2.20.0 sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
224,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2015-2296,">=2.1,<=2.5.3",The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.
225,requests,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2023-32681,">=2.3.0,<2.31.0","Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.

"
226,wheel,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2022-40898,<0.38.1,"Wheel 0.38.1 includes a fix for CVE-2022-40898: An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli.
https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages"
227,importlib-resources,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,no one,no one,no one
228,pyyaml,>=5.4.1,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2019-20477,">=5.1,<=5.1.2","PyYAML 5.1 through 5.1.2 has insufficient restrictions on the load and load_all functions because of a class deserialization issue, e.g., Popen is a class in the subprocess module. See CVE-2019-20477. NOTE: this issue exists because of an incomplete fix for CVE-2017-18342."
229,sentry-sdk,>=1.4.3,/home/daniele/git/NICHE_projects/Repo/Cloneables/cortex/python/client/setup.py,False,CVE-2023-28117,<1.14.0,"Sentry-sdk 1.14.0 includes a fix for CVE-2023-28117: When using the Django integration of versions prior to 1.14.0 of the Sentry SDK in a specific configuration it is possible to leak sensitive cookies values, including the session cookie to Sentry. These sensitive cookies could then be used by someone with access to your Sentry issues to impersonate or escalate their privileges within your application. In order for these sensitive values to be leaked, the Sentry SDK configuration must have 'sendDefaultPII' set to 'True'; one must use a custom name for either 'SESSION_COOKIE_NAME' or 'CSRF_COOKIE_NAME' in one's Django settings; and one must not be configured in one's organization or project settings to use Sentry's data scrubbing features to account for the custom cookie names. As of version 1.14.0, the Django integration of the 'sentry-sdk' will detect the custom cookie names based on one's Django settings and will remove the values from the payload before sending the data to Sentry. As a workaround, use the SDK's filtering mechanism to remove the cookies from the payload that is sent to Sentry. For error events, this can be done with the 'before_send' callback method and for performance related events (transactions) one can use the 'before_send_transaction' callback method. Those who want to handle filtering of these values on the server-side can also use Sentry's advanced data scrubbing feature to account for the custom cookie names. Look for the '$http.cookies', '$http.headers', '$request.cookies', or '$request.headers' fields to target with a scrubbing rule.
https://github.com/getsentry/sentry-python/security/advisories/GHSA-29pr-6jr8-q5jm"
