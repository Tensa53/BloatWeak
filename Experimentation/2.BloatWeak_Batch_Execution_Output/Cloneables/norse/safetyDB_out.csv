,dep,version,filepath,bloated,cve,affected versions,advisory
0,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2017-12852,<1.13.2,"Numpy 1.13.2 includes a fix for CVE-2017-12852: The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.
https://github.com/numpy/numpy/issues/9560#issuecomment-322395292"
1,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2019-6446,<1.16.3,"Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.
https://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb"
2,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
3,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
4,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
5,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
6,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2014-1859,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1859: (1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/pull/4262"
7,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2014-1858,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1858: __init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15"
8,torch,>=2.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
9,nirtorch,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,no one,no one,no one
10,nir,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,no one,no one,no one
11,torchvision,>=0.15.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/requirements.txt,False,no one,no one,no one
12,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/setup.py,False,CVE-2013-1633,<0.7,"Setuptools version 0.7 includes a fix for CVE-2013-1633: Easy_install in setuptools before 0.7 uses HTTP to retrieve packages from the PyPI repository, and does not perform integrity checks on package contents, which allows man-in-the-middle attackers to execute arbitrary code via a crafted response to the default use of the product."
13,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/setup.py,False,PVE-2021-26129,<0.9.5,setuptools 0.9.5 fixes a security vulnerability in SSL certificate validation.
14,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/setup.py,False,PVE-2021-26132,<1.3,"Setuptools before 1.3 has a security vulnerability in SSL match_hostname check, similar to CVE-2013-7440."
15,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/setup.py,False,PVE-2021-26133,<3.0,setuptools 3.0 avoids the potential security vulnerabilities presented by use of tar archives in ez_setup.py. It also leverages the security features added to ZipFile.extract in Python 2.7.4.
16,setuptools,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/setup.py,False,CVE-2022-40897,<65.5.1,"Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.
https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages"
17,wheel,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/setup.py,False,CVE-2022-40898,<0.38.1,"Wheel 0.38.1 includes a fix for CVE-2022-40898: An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli.
https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages"
18,torch,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/setup.py,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
19,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2017-12852,<1.13.2,"Numpy 1.13.2 includes a fix for CVE-2017-12852: The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.
https://github.com/numpy/numpy/issues/9560#issuecomment-322395292"
20,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2019-6446,<1.16.3,"Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.
https://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb"
21,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
22,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
23,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
24,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
25,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2014-1859,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1859: (1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/pull/4262"
26,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2014-1858,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1858: __init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15"
27,matplotlib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,no one,no one,no one
28,pytorch-lightning,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,PVE-2021-38707,<0.9.0,Pytorch-lightning 0.9.0 fixes a shell injection vulnerability in a subprocess call.
29,pytorch-lightning,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2020-1747,<1.6.0,Pytorch-lightning 1.6.0 updates its dependency 'pyyaml' to v5.4 and uses yaml.safe_load() to fix code execution vulnerabilities.
30,pytorch-lightning,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2020-14343,<1.6.0,Pytorch-lightning 1.6.0 updates its dependency 'pyyaml' to v5.4 and uses yaml.safe_load() to fix code execution vulnerabilities.
31,pytorch-lightning,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2021-4118,">=0,<1.6.0",Pytorch-lightning before 1.6.0 is vulnerable to Deserialization of Untrusted Data.
32,pytorch-lightning,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2022-0845,">=0,<1.6.0","PyTorch Lightning version 1.5.10 and prior is vulnerable to code injection. An attacker could execute commands on the target OS running the operating system by setting the `PL_TRAINER_GPUS` when using the `Trainer` module. A [patch](https://github.com/pytorchlightning/pytorch-lightning/commit/8b7a12c52e52a06408e9231647839ddb4665e8ae) is included in the `1.6.0` release.
Affected functions:
pytorch_lightning.utilities.argparse.parse_env_variables"
33,pandas,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,CVE-2020-13091,">=0,<1.0.4","** DISPUTED ** pandas through 1.0.3 can unserialize and execute commands from an untrusted file that is passed to the read_pickle() function, if __reduce__ makes an os.system call. NOTE: third parties dispute this issue because the read_pickle() function is documented as unsafe and it is the user's responsibility to use the function in a secure manner."
34,pytest,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,no one,no one,no one
35,tensorboard,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,no one,no one,no one
36,jupyter-book,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,no one,no one,no one
37,sphinx-hoverxref,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/norse/docs/requirements.txt,False,no one,no one,no one
