,dep,version,filepath,bloated,cve,affected versions,advisory
0,cython,>=0.25,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
1,pytest,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
2,Sphinx,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2020-11023,<3.0.4,Sphinx 3.0.4 updates jQuery version from 3.4.1 to 3.5.1 for security reasons.
3,Sphinx,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2020-11022,<3.0.4,Sphinx 3.0.4 updates jQuery version from 3.4.1 to 3.5.1 for security reasons.
4,sphinx_rtd_theme,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
5,asciitree,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
6,editdistance,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
7,flask,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2019-1010083,<0.12.3,"Flask 0.12.3 includes a fix for CVE-2019-1010083: Unexpected memory usage. The impact is denial of service. The attack vector is crafted encoded JSON data. NOTE: this may overlap CVE-2018-1000656.
https://github.com/pallets/flask/pull/2695/commits/0e1e9a04aaf29ab78f721cfc79ac2a691f6e3929"
8,flask,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2018-1000656,<0.12.3,flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3.
9,flask,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,PVE-2021-25820,<0.6.1,flask 0.6.1 fixes a security problem that allowed clients to download arbitrary files  if the host server was a windows based operating system and the client  uses backslashes to escape the directory the files where exposed from.
10,flask,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2023-30861,"<2.2.5,>=2.3.0,<2.3.2","Flask is a lightweight WSGI web application framework. When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by the proxy to other clients. If the proxy also caches 'Set-Cookie' headers, it may send one client's 'session' cookie to other clients. The severity depends on the application's use of the session and the proxy's behavior regarding cookies. The risk depends on all these conditions being met.

1. The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.
2. The application sets 'session.permanent = True'
3. The application does not access or modify the session at any point during a request.
4. 'SESSION_REFRESH_EACH_REQUEST' enabled (the default).
5. The application does not set a 'Cache-Control' header to indicate that a page is private or should not be cached.

This happens because vulnerable versions of Flask only set the 'Vary: Cookie' header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified. This issue has been fixed in versions 2.3.2 and 2.2.5."
11,gensim,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
12,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2015-4707,<3.2.0,Cross-site scripting (XSS) vulnerability in IPython before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/notebooks path.
13,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2015-5607,<3.2.1,"Ipython 3.2.1 includes a fix for CVE-2015-5607: Cross-site request forgery in the REST API in IPython 2 and 3.
https://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816"
14,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2015-6938,<3.2.2,"Cross-site scripting (XSS) vulnerability in the file browser in notebook/notebookapp.py in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to inject arbitrary web script or HTML via a folder name.  NOTE: this was originally reported as a cross-site request forgery (CSRF) vulnerability, but this may be inaccurate."
15,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2015-7337,<3.2.2,"The editor in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x before 4.0.5 allows remote attackers to execute arbitrary JavaScript code via a crafted file, which triggers a redirect to files/, related to MIME types."
16,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2023-24816,<8.10.0,"IPython 8.10.0 includes a fix for CVE-2023-24816: Versions prior to 8.10.0 are subject to a command injection vulnerability with very specific prerequisites. This vulnerability requires that the function 'IPython.utils.terminal.set_term_title' be called on Windows in a Python environment where ctypes is not available. The dependency on 'ctypes' in 'IPython.utils._process_win32' prevents the vulnerable code from ever being reached in the ipython binary. However, as a library that could be used by another tool 'set_term_title' could be called and hence introduce a vulnerability. If an attacker get untrusted input to an instance of this function they would be able to inject shell commands as current process and limited to the scope of the current process. As a workaround, users should ensure that any calls to the 'IPython.utils.terminal.set_term_title' function are done with trusted or filtered input.
https://github.com/ipython/ipython/security/advisories/GHSA-29gw-9793-fvw7"
17,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2014-3429,">=0.12,<1.2","IPython Notebook 0.12 through 1.x before 1.2 does not validate the origin of websocket requests, which allows remote attackers to execute arbitrary code by leveraging knowledge of the kernel id and a crafted page."
18,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2016-6524,">=2.0.0,<4.0.0",Ipython 4.0 includes a fix for CVE-2016-6524: Untrusted LaTeX output could be added to the page in a way that could execute javascript.
19,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2015-4706,">=3.0.0,<3.2.0",Cross-site scripting (XSS) vulnerability in IPython 3.x before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/contents path.
20,ipython,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2022-21699,">=8.0.0a0,<8.0.1,>=7.17.0,<7.31.1,>=6.0.0a0,<7.16.3,<5.11","Ipython versions 8.0.1, 7.31.1, 7.16.3 and 5.11 include a fix for CVE-2022-21699: Affected versions are subject to an arbitrary code execution vulnerability achieved by not properly managing cross user temporary files. This vulnerability allows one user to run code as another on the same machine.
https://github.com/ipython/ipython/security/advisories/GHSA-pq7m-3gw7-gq5x"
21,mwparserfromhell,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
22,networkx,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
23,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2017-12852,<1.13.2,"Numpy 1.13.2 includes a fix for CVE-2017-12852: The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.
https://github.com/numpy/numpy/issues/9560#issuecomment-322395292"
24,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2019-6446,<1.16.3,"Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.
https://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb"
25,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
26,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
27,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
28,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
29,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2014-1859,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1859: (1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/pull/4262"
30,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,CVE-2014-1858,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1858: __init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15"
31,plyvel,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,no one,no one,no one
32,progressbar2,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
33,scikit-learn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,PVE-2022-52255,<0.24.2,"Scikit-learn 0.24.2 includes a fix for a ReDoS vulnerability.
https://github.com/scikit-learn/scikit-learn/issues/19522"
34,scikit-learn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2020-13092,">=0,<0.23.1","** DISPUTED ** scikit-learn (aka sklearn) through 0.23.0 can unserialize and execute commands from an untrusted file that is passed to the joblib.load() function, if __reduce__ makes an os.system call. NOTE: third parties dispute this issue because the joblib.load() function is documented as unsafe and it is the user's responsibility to use the function in a secure manner."
35,scikit-learn,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2020-28975,">=0,<0.24.dev0","** DISPUTED ** svm_predict_values in svm.cpp in Libsvm v324, as used in scikit-learn 0.23.2 and other products, allows attackers to cause a denial of service (segmentation fault) via a crafted model SVM (introduced via pickle, json, or any other model permanence standard) with a large value in the _n_support array. NOTE: the scikit-learn vendor's position is that the behavior can only occur if the library's API is violated by an application that changes a private attribute."
36,spacy-experimental,==0.6.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,True,no one,no one,no one
37,spacy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
38,termcolor,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
39,thinc,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,PVE-2021-40660,<8.0.4,Thinc 8.0.4 starts to avoid the 'Pydantic' versions with security vulnerabilities.
40,torch,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
41,spacy-transformers,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/graphbrain/setup.py,False,no one,no one,no one
