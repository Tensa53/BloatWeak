,dep,version,filepath,bloated,cve,affected versions,advisory
0,nose,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
1,pycodestyle,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,True,no one,no one,no one
2,scipy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2013-4251,">=0,<0.12.1",The scipy.weave component in SciPy before 0.12.1 creates insecure temporary directories.
3,matplotlib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
4,mnist,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,True,no one,no one,no one
5,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2017-12852,<1.13.2,"Numpy 1.13.2 includes a fix for CVE-2017-12852: The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.
https://github.com/numpy/numpy/issues/9560#issuecomment-322395292"
6,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-6446,<1.16.3,"Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.
https://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb"
7,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
8,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
9,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
10,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
11,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2014-1859,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1859: (1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/pull/4262"
12,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2014-1858,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1858: __init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15"
13,tensorflow-probability,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
14,joblib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,PVE-2022-51394,<1.1.1,"Joblib 1.1.1 fixes a security issue where 'eval(pre_dispatch)' could potentially run arbitrary code. Now only basic numerics are supported.
https://github.com/joblib/joblib/pull/1327"
15,joblib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21797,<1.2.0,"Joblib 1.2.0 includes a fix for CVE-2022-21797: The package joblib from 0 and before 1.2.0 is vulnerable to Arbitrary Code Execution via the pre_dispatch flag in Parallel() class due to the eval() statement.
https://github.com/joblib/joblib/issues/1128"
16,joblib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,PVE-2022-51041,<1.2.0,"Joblib 1.2.0 fixes a security issue where 'eval(pre_dispatch)' could potentially run arbitrary code. Now only basic numerics are supported.
https://github.com/joblib/joblib/pull/1327"
17,easydict,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
18,absl-py,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
19,six,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
20,jax,>=0.2.9,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
21,jaxlib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
22,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-19244,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite3"" to handle CVE-2019-19244."
23,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-19880,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""SQLite3"" to handle CVE-2019-19880."
24,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-10099,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2019-10099."
25,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2018-19664,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-19664."
26,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-13960,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2019-13960."
27,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2018-11770,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""Apache Spark"" to handle CVE-2018-11770."
28,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2018-20330,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-20330."
29,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-19645,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite"" to handle CVE-2019-19645."
30,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2018-17190,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2018-17190."
31,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15208,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15208: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a ""DCHECK"" which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue was patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d"
32,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15202,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15202: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'Shard' API in TensorFlow expects the last argument to be a function taking two 'int64' (i.e., 'long long') arguments. However, there are several places in TensorFlow where a lambda taking 'int' or 'int32' arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4"
33,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15190,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15190: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the ""tf.raw_ops.Switch"" operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor. However, the eager runtime traverses all tensors in the output. Since only one of the tensors is defined, the other one is ""nullptr"", hence we are binding a reference to ""nullptr"". This is undefined behavior and reported as an error if compiling with ""-fsanitize=null"". In this case, this results in a segmentation fault The issue was patched in commit da8558533d925694483d2c136a9220d6d49d843c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4g9f-63rx-5cw4"
34,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15209,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15209: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a ""nullptr"" buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with ""nullptr"". However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue was patched in commit 0b5662bc."
35,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15207,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34"
36,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15205,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15205: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'data_splits' argument of 'tf.raw_ops.StringNGrams' lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory In the linked code snippet, all the binary strings after 'ee ff' are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46"
37,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15195,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15195: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of 'SparseFillEmptyRowsGrad' uses a double indexing pattern. It is possible for 'reverse_index_map(i)' to be an index outside of bounds of 'grad_values', thus resulting in a heap buffer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr"
38,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15204,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15204: In eager mode, TensorFlow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 does not set the session state. Hence, calling ""tf.raw_ops.GetSessionHandle"" or ""tf.raw_ops.GetSessionHandleV2"" results in a null pointer dereference In linked snippet, in eager mode, ""ctx->session_state()"" returns ""nullptr"". Since code immediately dereferences this, we get a segmentation fault. The issue was patched in commit 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1"
39,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15203,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15203: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the 'fill' argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a 'printf' call is constructed. This may result in segmentation fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
40,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15206,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15206: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's ""SavedModel"" protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using ""tensorflow-serving"" or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d. However, this was not enough, as #41097 reported a different failure mode. The issue was finally patched in commit df095206f25471e864a8e63a0f1caef53a0e3a6"
41,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15211,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15211: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative ""-1"" value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the ""-1"" index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue was patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). A potential workaround would be to add a custom ""Verifier"" to the model loading code to ensure that only operators which accept optional inputs use the ""-1"" special value and only for the tensors that they expect to be optional. Since this allow-list type approach is error-prone, it's advised upgrading to the patched code."
42,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-13631,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13631."
43,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-13435,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13435."
44,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-13630,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13630."
45,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-13871,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13871."
46,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-13434,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13434."
47,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-9327,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-9327."
48,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-11655,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11655."
49,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-11656,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11656."
50,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15210,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15210: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2"
51,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15194,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow 2.4.0 includes a fix for CVE-2020-15194: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments. Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."""
52,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-14155,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2 and 2.3.2 update its dependency ""PCRE"" to handle CVE-2020-14155."
53,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15250,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency 'Junit4' to v4.13.1 to include a security fix."
54,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-20838,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency ""PCRE"" to fix CVE-2019-20838."
55,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-13790,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 updates its dependency ""Libjpeg-turbo"" to handle CVE-2020-13790."
56,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-26270,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26270: In affected versions, running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a CHECK failure when using the CUDA backend. This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer."
57,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-26266,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","TensorFlow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0 includes a fix for CVE-2020-26266: In affected versions and under certain cases a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers filled with the default value of the type but forgetting to default initialize the quantized floating point types in Eigen."
58,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-26271,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26271: In affected versions, under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library."
59,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-26267,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26267: In affected versions, the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes."
60,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-26268,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden."
61,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25661,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25661: In versions prior to 2.11.1 a malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. A proof of concept can be constructed with the 'Convolution3DTranspose' function. This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services. An attacker must have privilege to provide input to a 'Convolution3DTranspose' call.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq"
62,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25665,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25665: Prior to versions 2.12.0 and 2.11.1, when 'SparseSparseMaximum' is given invalid sparse tensors as inputs, it can give a null pointer error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-558h-mq8x-7q9g"
63,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25671,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25671: There is out-of-bounds access due to mismatched integer type sizes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j5w9-hmfh-4cr6"
64,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25658,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25658: Prior to versions 2.12.0 and 2.11.1, an out of bounds read is in GRUBlockCellGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-68v3-g9cm-rmm6"
65,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25801,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25801: Prior to versions 2.12.0 and 2.11.1, 'nn_ops.fractional_avg_pool_v2' and 'nn_ops.fractional_max_pool_v2' require the first and fourth elements of their parameter 'pooling_ratio' to be equal to 1.0, as pooling on batch and channel dimensions is not supported.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f49c-87jh-g47q"
66,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-27579,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-27579: Constructing a tflite model with a paramater 'filter_input_channel' of less than 1 gives a FPE.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5w96-866f-6rm8"
67,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25672,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25672: The function 'tf.raw_ops.LookupTableImportV2' cannot handle scalars in the 'values' parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
68,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25676,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25676: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.ParallelConcat' segfaults with a nullptr dereference when given a parameter 'shape' with rank that is not greater than zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6wfh-89q8-44jq"
69,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25666,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25666: Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f637-vh3r-vfh2"
70,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25667,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25667: Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when '2^31 <= num_frames * height * width * channels < 2^32', for example Full HD screencast of at least 346 frames.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68"
71,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25673,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25673: Versions prior to 2.12.0 and 2.11.1 have a Floating Point Exception in TensorListSplit with XLA. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
72,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25674,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25674: Versions prior to 2.12.0 and 2.11.1 have a null pointer error in RandomShuffle with XLA enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf97-q72m-7579"
73,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25670,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25670: Versions prior to 2.12.0 and 2.11.1 have a null point error in QuantizedMatMulWithBiasAndDequantize with MKL enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rq-hwc3-x77w"
74,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25668,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25668: Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96"
75,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25664,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25664: Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hg6-5c2q-7rcr"
76,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25663,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25663: Prior to versions 2.12.0 and 2.11.1, when 'ctx->step_containter()' is a null ptr, the Lookup function will be executed with a null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-64jg-wjww-7c5w"
77,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25660,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25660: Prior to versions 2.12.0 and 2.11.1, when the parameter 'summarize' of 'tf.raw_ops.Print' is zero, the new method 'SummarizeArray<bool>' will reference to a nullptr, leading to a seg fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj"
78,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25675,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25675: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.Bincount' segfaults when given a parameter 'weights' that is neither the same shape as parameter 'arr' nor a length-0 tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7x4v-9gxg-9hwj"
79,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25669,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25669: Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for 'tf.raw_ops.AvgPoolGrad', it can give a floating point exception.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rcf8-g8jv-vg6p"
80,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25662,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25662: Versions prior to 2.12.0 and 2.11.1 are vulnerable to integer overflow in EditDistance.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7jvm-xxmr-v5cw"
81,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2023-25659,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25659: Prior to versions 2.12.0 and 2.11.1, if the parameter 'indices' for 'DynamicStitch' does not match the shape of the parameter 'data', it can trigger an stack OOB read.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p"
82,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41210,"<2.4.4,>=2.5.0rc0,<2.5.2, >=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41210: In affected versions, the shape inference functions for 'SparseCountSparseOutput' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc
https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2"
83,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41196,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41196: In affected versions, the Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative. This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8"
84,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41195,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41195: In affected versions, the implementation of 'tf.math.segment_*' operations results in a 'CHECK'-fail related abort (and denial of service) if a segment id in 'segment_ids' is large. This is similar to CVE-2021-29584 (and similar to other reported vulnerabilities in TensorFlow localized to specific APIs): the implementation (both on CPU and GPU) computes the output shape using 'AddDim'. However, if the number of elements in the tensor overflows an 'int64_t' value, 'AddDim' results in a 'CHECK' failure which provokes a 'std::abort'. Instead, code should use 'AddDimWithStatus'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh"
85,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22925,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22925."
86,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41217,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41217: In affected versions, the process of building the control flow graph for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not. This occurs because the code assumes that the first node in the pairing (e.g., an 'Enter' node) always exists when encountering the second node (e.g., an 'Exit' node). When this is not the case, 'parent' is 'nullptr' so dereferencing it causes a crash. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5crj-c72x-m7gq
https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff"
87,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41228,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41228: In affected versions, TensorFlow's 'saved_model_cli' tool is vulnerable to a code injection as it calls 'eval' on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. The issue has been patched by adding a 'safe' flag which defaults to 'True' and an explicit warning for users.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v
https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7"
88,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41215,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41215: In affected versions, the shape inference code for 'DeserializeSparse' can trigger a null pointer dereference. This is because the shape inference function assumes that the 'serialize_sparse' tensor is a tensor with positive rank (and having '3' as the last dimension). The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r
https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850"
89,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41216,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41216: In affected versions, the shape inference function for 'Transpose' is vulnerable to a heap buffer overflow. This occurs whenever 'perm' contains negative elements. The shape inference function does not validate that the indices in 'perm' are all valid. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9
https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14"
90,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22924,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22924."
91,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22923,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22923."
92,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41226,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41226: In affected versions, the implementation of 'SparseBinCount' is vulnerable to a heap OOB access. This is because of missing validation between the elements of the 'values' argument and the shape of the sparse output. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-374m-jm66-3vj8
https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba"
93,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41200,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41200: In affected versions, if 'tf.summary.create_file_writer' is called with non-scalar arguments, code crashes due to a 'CHECK'-fail. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f"
94,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41218,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41218: In affected versions, the shape inference code for 'AllToAll' can be made to execute a division by 0. This occurs whenever the 'split_count' argument is 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273
https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc"
95,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41223,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41223: In affected versions, the implementation of 'FusedBatchNorm' kernels is vulnerable to a heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr
https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda"
96,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41224,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41224: In affected versions, the implementation of 'SparseFillEmptyRows' can be made to trigger a heap OOB access. This occurs whenever the size of 'indices' does not match the size of 'values'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v
https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b"
97,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41219,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41219: In affected versions, the code for sparse matrix multiplication is vulnerable to undefined behavior via binding a reference to 'nullptr'. This occurs whenever the dimensions of 'a' or 'b' are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, it should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x
https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae"
98,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41202,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41202: In affected versions, while calculating the size of the output within the 'tf.range' kernel, there is a conditional statement of type 'int64 = condition ? int64 : double'. Due to C++ implicit conversion rules, both branches of the condition will be cast to 'double' and the result would be truncated before the assignment. This result in overflows. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx"
99,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41221,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41221: In affected versions, the shape inference code for the 'Cudnn*' operations can be tricked into accessing invalid memory via a heap buffer overflow. This occurs because the ranks of the 'input', 'input_h' and 'input_c' parameters are not validated, but code assumes they have certain values. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx
https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6"
100,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41203,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41203: In affected versions, an attacker can trigger undefined behavior, integer overflows, segfaults and 'CHECK'-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7pxj-m4jf-r6h2"
101,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41222,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41222: In affected versions, the implementation of 'SplitV' can trigger a segfault if an attacker supplies negative arguments. This occurs whenever 'size_splits' contains more than one value and at least one value is negative. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6
https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6"
102,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22922,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22922."
103,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41227,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41227: In affected versions, the 'ImmutableConst' operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the 'tstring' TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7
https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b
https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585"
104,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41201,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41201: In affected versions, during execution, 'EinsumHelper::ParseEquation()' is supposed to set the flags in 'input_has_ellipsis' vector and '*output_has_ellipsis' boolean to indicate whether there is ellipsis in the corresponding inputs and output. However, the code only changes these flags to 'true' and never assigns 'false'. This results in unitialized variable access if callers assume that 'EinsumHelper::ParseEquation()' always sets these flags. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j86v-p27c-73fm
https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6"
105,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22926,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22926."
106,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41205,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41205: In affected versions, the shape inference functions for the 'QuantizeAndDequantizeV*' operations can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f
https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d"
107,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41214,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41214: In affected versions, the shape inference code for 'tf.ragged.cross' has an undefined behavior due to binding a reference to 'nullptr'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
108,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41207,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41207: In affected versions, the implementation of 'ParallelConcat' misses some input validation and can produce a division by 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
109,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41204,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41204: In affected versions, during TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-786j-5qwq-r36x
https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659"
110,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41213,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf
https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7"
111,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41212,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41212: In affected versions, the shape inference code for 'tf.ragged.cross' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
112,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41225,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41225: In affected versions, TensorFlow's Grappler optimizer has a use of unitialized variable. If the 'train_nodes' vector (obtained from the saved model that gets optimized) does not contain a 'Dequeue' node, then 'dequeue_node' is left unitialized. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw
https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"
113,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41198,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41198: In affected versions, if 'tf.tile' is called with a large input argument, then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q"
114,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41209,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41209: In affected versions, the implementations for convolution operators trigger a division by 0 if passed empty filter tensor arguments. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hpv-v2rx-c5g6
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
115,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41199,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41199: In affected versions, if 'tf.image.resize' is called with a large input argument then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm"
116,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-10531,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 update its dependency 'icu' to v69.1 to include a security fix."
117,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23591,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The 'GraphDef' format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a 'GraphDef' containing a fragment such as the following can be consumed when loading a 'SavedModel'. This would result in a stack overflow during execution as resolving each 'NodeDef' means resolving the function itself and its nodes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
118,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23576,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
119,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23585,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding PNG images TensorFlow can produce a memory leak if the image is invalid. After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
120,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23578,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. If a graph node is invalid, TensorFlow can leak memory in the implementation of `ImmutableExecutorState::Initialize`. Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
121,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23583,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
122,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23567,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23567: The implementations of 'Sparse*Cwise*' ops are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or 'CHECK'-fails when building new 'TensorShape' objects (so, assert failures based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43"
123,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23574,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. There is a typo in TensorFlow's `SpecializeType` which results in heap OOB read/write. Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
124,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23571,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
125,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23589,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place). First, during constant folding, the `GraphDef` might not have the required nodes for the binary operation. If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect. We have a similar issue during `IsIdentityConsumingSwitch`. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
126,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23586,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
127,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21733,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21733: The implementation of 'StringNGrams' can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. There is missing a validation on 'pad_witdh' and that result in computing a negative value for 'ngram_width' which is later used to allocate parts of the output.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g"
128,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23587,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
129,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21735,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21735: The implementation of 'FractionalMaxPool' can be made to crash a TensorFlow process via a division by 0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj"
130,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23577,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `GetInitOp` is vulnerable to a crash caused by dereferencing a null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
131,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23566,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. TensorFlow is vulnerable to a heap OOB write in `Grappler`. The `set_output` function writes to an array at the specified index. Hence, this gives a malicious user a write primitive. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
132,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23562,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23562: The implementation of 'Range' suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr"
133,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23572,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
134,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23588,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
135,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23579,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23579: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'SafeToRemoveIdentity' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5f2r-qp73-37mr"
136,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23569,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23569: Multiple operations in TensorFlow can be used to trigger a denial of service via 'CHECK'-fails (i.e., assertion failures). This is similar to CVE-2021-41197 and has a similar fix. It is possible that other similar instances exist.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qj5r-f9mv-rffh"
137,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23575,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
138,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23580,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23580: During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-627q-g293-49q7"
139,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21732,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21732: The implementation of 'ThreadPoolHandle' can be used to trigger a denial of service attack by allocating too much memory. This is because the 'num_threads' argument is only checked to not be negative, but there is no upper bound on its value.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq"
140,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21740,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21740: The implementation of 'SparseCountSparseOutput' is vulnerable to a heap overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-44qp-9wwf-734r"
141,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23595,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23595: When building an XLA compilation cache, if default settings are used, TensorFlow triggers a null pointer dereference. In the default scenario, all devices are allowed, so 'flr->config_proto' is 'nullptr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fpcp-9h7m-ffpx"
142,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23581,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23581: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'IsSimplifiableReshape' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq86-3f29-px2c"
143,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21739,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21739: The implementation of 'QuantizedMaxPool' has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5"
144,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23564,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23564: When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a 'CHECK' assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3"
145,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23565,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23565: An attacker can trigger denial of service via assertion failure by altering a 'SavedModel' on disk such that 'AttrDef's of some operation are duplicated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4v5p-v5h9-6xjx"
146,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21741,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21741: An attacker can craft a TFLite model that would trigger a division by zero in the implementation of depthwise convolutions. The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is strictly positive.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-428x-9xc2-m8mj"
147,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21726,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21726: The implementation of 'Dequantize' does not fully validate the value of 'axis' and can result in heap OOB accesses. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72"
148,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23557,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23557: An attacker can craft a TFLite model that would trigger a division by zero in 'BiasAndClamp' implementation. There is no check that the 'bias_size' is non zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf2j-f278-xh4v"
149,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21728,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
150,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23568,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23568: The implementation of 'AddManySparseToTensorsMap' is vulnerable to an integer overflow which results in a 'CHECK'-fail when building new 'TensorShape' objects (so, an assert failure based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2"
151,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23563,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23563: In multiple places, TensorFlow uses 'tempfile.mktemp' to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in 'mktemp' and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the 'mktemp' function usage. It was replaced 'mktemp' with the safer 'mkstemp'/'mkdtemp' functions, according to the usage pattern.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wc4g-r73w-x8mm"
152,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21730,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21730: The implementation of 'FractionalAvgPoolGrad' does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4"
153,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21736,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21736: The implementation of 'SparseTensorSliceDataset' has an undefined behavior: under certain conditions, it can be made to dereference a 'nullptr' value. The 3 input arguments to 'SparseTensorSliceDataset' represent a sparse tensor. However, there are some preconditions that these arguments must satisfy, but these are not validated in the implementation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9"
154,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23570,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
155,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23558,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23558: An attacker can craft a TFLite model that would cause an integer overflow in 'TfLiteIntArrayCreate'. The 'TfLiteIntArrayGetSizeInBytes' returns an 'int' instead of a 'size_t'. An attacker can control model inputs such that 'computed_size' overflows the size of 'int' datatype.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9gwq-6cwj-47h3"
156,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23559,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23559: An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both 'embedding_size' and 'lookup_size' are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98p5-x8x4-c9m5"
157,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21727,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21727: The implementation of shape inference for 'Dequantize' is vulnerable to an integer overflow weakness. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes 'axis + 1', an attacker can trigger an integer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw"
158,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21725,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21725: The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f"
159,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21738,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21738: The implementation of 'SparseCountSparseOutput' can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6"
160,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23584,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
161,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23582,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23582: A malicious user can cause a denial of service by altering a 'SavedModel' such that 'TensorByteSize' would trigger 'CHECK' failures. 'TensorShape' constructor throws a 'CHECK'-fail if shape is partial or has a number of elements that would overflow the size of an 'int'. The 'PartialTensorShape' constructor instead does not cause a 'CHECK'-abort if the shape is partial, which is exactly what this function needs to be able to return '-1'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4j82-5ccr-4r8v"
162,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23561,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23561: An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c78-vcq7-7vxq"
163,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21731,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21731: The implementation of shape inference for 'ConcatV2' can be used to trigger a denial of service attack via a segfault caused by a type confusion. The 'axis' argument is translated into 'concat_dim' in the 'ConcatShapeHelper' helper function. Then, a value for 'min_rank' is computed based on 'concat_dim'. This is then used to validate that the 'values' tensor has at least the required rank. However, 'WithRankAtLeast' receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented. Due to the fact that 'min_rank' is a 32-bits value and the value of 'axis', the 'rank' argument is a negative value, so the error check is bypassed.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
164,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21734,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21734: The implementation of 'MapStage' is vulnerable to a 'CHECK'-fail if the key tensor is not a scalar.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm"
165,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23573,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
166,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21737,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21737: The implementation of '*Bincount' operations allows malicious users to cause denial of service by passing in arguments which would trigger a 'CHECK'-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in 'CHECK' failures later when the output tensors get allocated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2vv-v9cg-qhh7"
167,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-21729,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21729: The implementation of 'UnravelIndex' is vulnerable to a division by zero caused by an integer overflow bug.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j"
168,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23560,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23560: An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4hvf-hxvg-f67v"
169,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41208,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41208: In affected versions, the code for boosted trees in TensorFlow is still missing validation. As a result, attackers can trigger denial of service (via dereferencing 'nullptr's or via 'CHECK'-failures) as well as abuse undefined behavior (binding references to 'nullptr's). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call. Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs. TensorFlow's boosted trees APIs will be deprecated in subsequent releases.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-57wx-m983-2f88
https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6gw-r52c-724r"
170,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41206,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41206: In affected versions, several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or 'CHECK'-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. These issues were discovered internally via tooling while working on improving/testing GPU op determinism. As such, there aren't reproducers and there will be multiple fixes for these issues.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pgcq-h79j-2f69
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x"
171,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27775,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27775."
172,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29193,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29193: missing validation which causes 'TensorSummaryV2' to crash."
173,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27776,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27776."
174,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29196,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29196: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
175,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29197: Missing validation which causes denial of service via 'UnsortedSegmentJoin'."
176,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27779,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27779."
177,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29202,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29202: Denial of service in 'tf.ragged.constant' due to lack of validation."
178,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29201,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29201: Missing validation which results in undefined behavior in 'QuantizedConv2D'."
179,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29206,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29206: Missing validation which results in undefined behavior in 'SparseTensorDenseAdd'."
180,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27778,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27778."
181,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29204,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29204: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
182,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29199,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29199: Missing validation which causes denial of service via 'LoadAndRemapMatrix'."
183,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29213,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29213: Crashes stemming from incomplete validation in signal ops."
184,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29211,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29211: Segfault when 'tf.histogram_fixed_width' is called with NaN values."
185,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27780,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27780."
186,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29205,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29205: Segfault due to missing support for quantized types."
187,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-22576,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-22576."
188,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29209,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29209: Type confusion leading to 'CHECK'-failure based denial of service."
189,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27782,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27782."
190,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29195,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29195: Missing validation which causes denial of service via 'StagePeek'."
191,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29216,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29216: Code injection in 'saved_model_cli'."
192,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29200,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29200: Missing validation which causes denial of service via 'LSTMBlockCell'."
193,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29198,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29198:  Missing validation which causes denial of service via 'SparseTensorToCSRSparseMatrix'."
194,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29207,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29207: Issues arising from undefined behavior stemming from users supplying invalid resource handles."
195,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29208,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29208: Segfault and OOB write due to incomplete validation in 'EditDistance'."
196,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29194,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29194: Missing validation which causes denial of service via 'DeleteSessionTensor'."
197,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27781,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27781."
198,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-30115,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-30115."
199,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2021-41197: Affected versions allow tensors to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an 'int64_t'. If an overflow occurs, 'MultiplyWithoutOverflow' would return a negative result. In the majority of TensorFlow codebase this then results in a 'CHECK'-failure. Newer constructs exist which return a 'Status' instead of crashing the binary. This is similar to CVE-2021-29584.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-vrvr-3rx2
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mw6j-hh29-h379"
200,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2018-25032,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'zlib' to v1.2.12 to handle CVE-2018-25032."
201,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-27774,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27774."
202,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29192,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29192: missing validation which crashes 'QuantizeAndDequantizeV4Grad'."
203,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29191,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29191: Missing validation which causes denial of service via 'GetSessionTensor'."
204,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29212,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29212: Core dump when loading TFLite models with quantization."
205,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29203,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29203: Integer overflow in 'SpaceToBatchND'."
206,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35985,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35985: 'CHECK' fail in 'LRNGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp"
207,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35971,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35971: 'CHECK' fail in 'FakeQuantWithMinMaxVars'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7"
208,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35952,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35952: 'CHECK' failures in 'UnbatchGradOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47"
209,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35979,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35979: Segfault in 'QuantizedRelu' and 'QuantizedRelu6'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x"
210,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36002,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36002: 'CHECK' fail in 'Unbatch'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg"
211,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35996,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35996: Floating point exception in 'Conv2D'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37"
212,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35959,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35959: 'CHECK' failures in 'AvgPool3DGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq"
213,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35990,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35990: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannelGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh"
214,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35983,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35983: 'CHECK' fail in 'Save' and 'SaveSlices'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4"
215,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35974,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35974: Segfault in 'QuantizeDownAndShrinkRange'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x"
216,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36019,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36019: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannel'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7"
217,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35994,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35994: 'CHECK' fail in 'CollectiveGather'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f"
218,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36014,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36014: Null-dereference in 'mlir::tfg::TFOp::nameAttr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7j3m-8g3c-9qqq"
219,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35964,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35964: Segfault in 'BlockLSTMGradV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668"
220,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35987,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35987: 'CHECK' fail in 'DenseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49"
221,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36011,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36011: Null dereference on MLIR on empty function attributes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv43-93gv-vm8f"
222,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36027,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36027: Segfault TFLite converter on per-channel quantized transposed convolutions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr"
223,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35972,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35972: Segfault in 'QuantizedBiasAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9"
224,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35968,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35968: 'CHECK' fail in 'AvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25"
225,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35941,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35941: 'CHECK' failure in 'AvgPoolOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5"
226,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35940,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35940: Int overflow in 'RaggedRangeOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x"
227,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35939,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35939: OOB write in 'scatter_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf"
228,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35997,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35997: 'CHECK' fail in 'tf.sparse.cross'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf"
229,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36016,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36016: 'CHECK'-fail in 'tensorflow::full_type::SubstituteFromAttrs'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g468-qj8g-vcjc"
230,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35937,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35937: OOB read in 'Gather_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h"
231,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35963,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35963: 'CHECK' failures in 'FractionalAvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm"
232,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36015,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36015: Integer overflow in math ops. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rh87-q4vg-m45j"
233,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35984,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35984: 'CHECK' fail in 'ParameterizedTruncatedNormal'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5"
234,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36013,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36013: Null-dereference in 'mlir::tfg::GraphDefImporter::ConvertNodeDef'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828c-5j5q-vrjq"
235,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35981,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35981: 'CHECK' fail in 'FractionalMaxPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw"
236,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35960,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35960: 'CHECK' failure in 'TensorListReserve' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4"
237,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36017,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36017: Segfault in 'Requantize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc"
238,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35969,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35969: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx"
239,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36012,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36012: Assertion fail on MLIR empty edge names.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jvhc-5hhr-w3v5"
240,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36000,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36000: 'CHECK' fail in 'Eig'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v"
241,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35986,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35986: Segfault in 'RaggedBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v"
242,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35973,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35973: Segfault in 'QuantizedMatMul'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v"
243,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36026,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36026: 'CHECK' fail in 'QuantizeAndDequantizeV3'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq"
244,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35966,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35966: Segfault in 'QuantizedAvgPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9"
245,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35993,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35993: 'CHECK' fail in 'SetSize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9"
246,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35988,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35988: 'CHECK' fail in 'tf.linalg.matrix_rank'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c"
247,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35965,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35965: Segfault in 'LowerBound' and 'UpperBound'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36"
248,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35967,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35967: Segfault in 'QuantizedAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x"
249,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35970,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35970: Segfault in 'QuantizedInstanceNorm'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp"
250,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35995,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35995: 'CHECK' fail in 'AudioSummaryV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4"
251,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36004,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36004: 'CHECK' fail in 'tf.random.gamma'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q"
252,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36018,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36018: 'CHECK' fail in 'RaggedTensorToVariant'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf"
253,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36003,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36003: 'CHECK' fail in 'RandomPoissonV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq"
254,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35934,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35934: 'CHECK' failure in tf.reshape via overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45"
255,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35998,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35998: 'CHECK' fail in 'EmptyTensorList'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5"
256,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35992,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35992: 'CHECK' fail in 'TensorListFromTensor'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp"
257,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35982,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35982: Segfault in 'SparseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv"
258,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36001,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36001: 'CHECK' fail in 'DrawBoundingBoxes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5"
259,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35999,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35999: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw"
260,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35989,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35989: 'CHECK' fail in 'MaxPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq"
261,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-36005,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36005: 'CHECK' fail in 'FakeQuantWithMinMaxVarsGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm"
262,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41893,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41893: If 'tf.raw_ops.TensorListResize' is given a nonscalar value for input 'size', it results 'CHECK' fail which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-67pf-62xr-q35m"
263,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41894,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41894: The reference kernel of the 'CONV_3D_TRANSPOSE' TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. Instead of 'data_ptr += num_channels;' it should be 'data_ptr += output_num_channels;' as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels > output_num_channels. An attacker can craft a model with a specific number of input channels. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6q3-vv32-2cq5"
264,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41880,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41880: When the 'BaseCandidateSamplerOp' function receives a value in 'true_classes' larger than 'range_max', a heap oob read occurs.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j"
265,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41897,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41897: If 'FractionMaxPoolGrad' is given outsize inputs 'row_pooling_sequence' and 'col_pooling_sequence', TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2w8-jw48-fr7j"
266,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41898,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41898: If 'SparseFillEmptyRowsGrad' is given empty inputs, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hq7g-wwwp-q46h"
267,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41884,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41884: If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jq6x-99hj-q636"
268,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41888,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41888: When running on GPU, 'tf.image.generate_bounding_box_proposals' receives a 'scores' input that must be of rank 4 but is not checked.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6x99-gv2v-q76v"
269,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41910,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41910: The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-frqp-wp83-qggv"
270,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41901,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41901: An input 'sparse_matrix' that is not a matrix with a shape with rank 0 will trigger a 'CHECK' fail in 'tf.raw_ops.SparseMatrixNNZ'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9fm-r5mm-rf9f"
271,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41900,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41900: The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472"
272,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41911,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41911: When printing a tensor, we get it's data as a 'const char*' array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from 'char' to 'bool' are undefined if the 'char' is not '0' or '1', so sanitizers/fuzzers will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pf36-r9c6-h97j"
273,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41896,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41896: If 'ThreadUnsafeUnigramCandidateSampler' is given input 'filterbank_channel_count' greater than the allowed max size, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35"
274,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41902,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."
275,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41895,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41895: If 'MirrorPadGrad' is given outsize input 'paddings', TensorFlow will give a heap OOB error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gq2j-cr96-gvqx"
276,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41891,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41891: If 'tf.raw_ops.TensorListConcat' is given 'element_shape=[]', it results segmentation fault which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-66vq-54fq-6jvv"
277,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41889,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41889: If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a 'nullptr', which is not caught. An example can be seen in 'tf.compat.v1.extract_volume_patches' by passing in quantized tensors as input 'ksizes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xxcj-rhqg-m46g"
278,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41885,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41885: When 'tf.raw_ops.FusedResizeAndPadConv2D' is given a large tensor shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-762h-vpvw-3rcx"
279,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41908,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41908: TensorFlow is an open source platform for machine learning. An input 'token' that is not a UTF-8 bytestring will trigger a 'CHECK' fail in 'tf.raw_ops.PyFunc'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv77-9g28-cwg3"
280,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41890,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41890: If 'BCast::ToShape' is given input larger than an 'int32', it will crash, despite being supposed to handle up to an 'int64'. An example can be seen in 'tf.experimental.numpy.outer' by passing in large input to the input 'b'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h246-cgh4-7475"
281,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41907,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41907: When 'tf.raw_ops.ResizeNearestNeighborGrad' is given a large 'size' input, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-368v-7v32-52fx"
282,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41886,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41886: When 'tf.raw_ops.ImageProjectiveTransformV2' is given a large output shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-54pp-c6pp-7fpx"
283,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41899,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41899: TensorFlow is an open source platform for machine learning. Inputs 'dense_features' or 'example_state_data' not of rank 2 will trigger a 'CHECK' fail in 'SdcaOptimizer'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27rc-728f-x5w2"
284,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41909,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41909: An input 'encoded' that is not a valid 'CompositeTensorVariant' tensor will trigger a segfault in 'tf.raw_ops.CompositeTensorVariantToComponents'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjx6-v474-2ch9"
285,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35935,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35935: 'CHECK' failure in 'SobolSample' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqvq-fvhr-v6hc"
286,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-35991,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35991: 'CHECK' fail in 'TensorListScatter' and 'TensorListScatterV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xf83-q765-xm6m"
287,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41887,"<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.9.3 and 2.10.1 include a fix for CVE-2022-41887: 'tf.keras.losses.poisson' receives a 'y_pred' and 'y_true' that are passed through 'functor::mul' in 'BinaryOp'. If the resulting dimensions overflow an 'int32', TensorFlow will crash due to a size mismatch during broadcast assignment.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fvv-46hw-vpg3"
288,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15358,">=1.15.0rc0,<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 updates its dependency ""SQLite"" to handle CVE-2020-15358."
289,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-16168,">=2.0.0a0,<2.0.1,<1.15.2",Tensorflow versions 1.15.2 and 2.0.1 updates 'sqlite3' to handle CVE-2019-16168.
290,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-5482,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5482."
291,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-19646,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 update its dependency ""SQLite"" to handle CVE-2019-19646."
292,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-5215,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(""hello"", tf.float16), if eager execution is enabled."
293,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
294,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29567,">=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.5.0rc0,<2.5.0","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers."
295,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-41883,">=2.10.0rc0,<2.10.1","Tensorflow 2.10.1 includes a fix for CVE-2022-41883: When ops that have specified input sizes receive a differing number of inputs, the executor will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w58w-79xv-6vcj"
296,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15212,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15212: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to ""segment_ids_data"" can alter ""output_index"" and then write to outside of ""output_data"" buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
297,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15214,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15214: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimension of output tensor. This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array. This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
298,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15192,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15192: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes a list of strings to 'dlpack.to_dlpack' there is a memory leak following an expected validation failure. The issue occurs because the 'status' argument during validation failures is not properly checked. Since each of the above methods can return an error status, the 'status' value must be checked before continuing.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv"
299,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15193,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of ""dlpack.to_dlpack"" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a ""reinterpret_cast"". Since the ""PyObject"" is a Python object, not a Tensorflow tensor, the cast to ""EagerTensor"" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v"
300,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15191,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15191: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to 'dlpack.to_dlpack' the expected validations will cause variables to bind to 'nullptr' while setting a 'status' variable to the error condition. However, this 'status' argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with '-fsanitize=null'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr"
301,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15213,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15213: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimension of the output tensor, attackers can use a very large value to trigger a large allocation. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps. However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87"
302,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15197,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15197: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix. However, malicious users can pass in tensors of different rank, resulting in a ""CHECK"" assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02."
303,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15200,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15200: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A ""BatchedMap"" is equivalent to a vector where each element is a hashmap. However, if the first element of ""splits_values"" is not 0, ""batch_idx"" will never be 1, hence there will be no hashmap at index 0 in ""per_batch_counts"". Trying to access that in the user code results in a segmentation fault. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3"
304,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15199,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15199: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the ""splits"" tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure. Since ""BatchedMap"" is equivalent to a vector, it needs to have at least one element to not be ""nullptr"". If user passes a ""splits"" tensor that is empty or has exactly one element, we get a ""SIGABRT"" signal raised by the operating system. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h"
305,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15201,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15201: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Hence, the code is prone to heap buffer overflow. If ""split_values"" does not end with a value at least ""num_values"" then the ""while"" loop condition will trigger a read outside of the bounds of ""split_values"" once ""batch_idx"" grows too large. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4"
306,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15198,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15198: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has the same shape as the ""values"" one. The values in these tensors are always accessed in parallel. Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3"
307,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-15196,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15196: In Tensorflow version 2.3.0, the ""SparseCountSparseOutput"" and ""RaggedCountSparseOutput"" implementations don't validate that the ""weights"" tensor has the same shape as the data. The check exists for ""DenseCountSparseOutput"", where both tensors are fully specified. In the sparse and ragged count weights are still accessed in parallel with the data. But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph"
308,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37635,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37635: In affected versions the implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data. The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor. The Tensorflow team has patched the issue in GitHub commit 87158f43f05f2720a374f3e6d22a7aaa3a33f750."
309,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37637,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37637: It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. The Tensorflow team has patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5."
310,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37683,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37683: In affected versions the implementation of division in TFLite is vulnerable to a division by 0 error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. The Tensorflow team has patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28."
311,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37667,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37667: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.UnicodeEncode'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the 'input_splits' tensor before validating that this tensor is not empty. The Tensorflow team has patched the issue in GitHub commit 2e0ee46f1a47675152d3d865797a18358881d7a6."
312,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37671,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37671: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.Map*' and 'tf.raw_ops.OrderedMap*' operations. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that 'indices' is in ascending order, but does not check that 'indices' is not empty. The Tensorflow team has patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac."
313,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37689,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37689: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. This is caused by the MLIR optimization of 'L2NormalizeReduceAxis' operator. The implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements. The Tensorflow team has patched the issue in GitHub commit d6b57f461b39fd1aa8c1b870f1b974aac3554955."
314,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37648,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37648: In affected versions the code for 'tf.raw_ops.SaveV2' does not properly validate the inputs and an attacker can trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses 'ValidateInputs' to check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer above. However, the validation uses 'OP_REQUIRES' which translates to setting the 'Status' object of the current 'OpKernelContext' to an error status, followed by an empty 'return' statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the nQext line in 'Compute' that follows the call to 'ValidateInputs'. This is equivalent to lacking the validation. The Tensorflow team has patched the issue in GitHub commit 9728c60e136912a12d99ca56e106b7cce7af5986."
315,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37680,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37680: In affected versions the implementation of fully connected layers in TFLite is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226). The Tensorflow team has patched the issue in GitHub commit 718721986aa137691ee23f03638867151f74935f."
316,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37636,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37636: In affected versions the implementation of 'tf.raw_ops.SparseDenseCwiseDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit d9204be9f49520cdaaeb2541d1dc5187b23f31d9."
317,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37642,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37642: In affected versions the implementation of 'tf.raw_ops.ResourceScatterDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76."
318,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37652,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37652: In affected versions the implementation for 'tf.raw_ops.BoostedTreesCreateEnsemble' can result in a use after free error if an attacker supplies specially crafted arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent 'free'-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed. The Tensorflow team has patched the issue in GitHub commit 5ecec9c6fbdbc6be03295685190a45e7eee726ab."
319,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37649,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37649: The code for 'tf.raw_ops.UncompressElement' can be made to trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a 'CompressedElement' from a 'Variant' tensor and then proceeds to dereference it for decompressing. There is no check that the 'Variant' tensor contained a 'CompressedElement', so the pointer is actually 'nullptr'. The Tensorflow team has patched the issue in GitHub commit 7bdf50bb4f5c54a4997c379092888546c97c3ebd."
320,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37659,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37659: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations). The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr. We have patched the issue in GitHub commit 93f428fd1768df147171ed674fee1fc5ab8309ec."
321,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37647,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37647: When a user does not supply arguments that determine a valid sparse tensor, 'tf.raw_ops.SparseTensorSliceDataset' implementation can be made to dereference a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either 'indices' or 'values' are provided for an empty sparse tensor when the other is not. If 'indices' is empty, then code that performs validation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference. If 'indices' as provided by the user is empty, then 'indices' in the C++ code above is backed by an empty 'std::vector', hence calling 'indices->dim_size(0)' results in null pointer dereferencing (same as calling 'std::vector::at()' on an empty vector). The Tensorflow team has patched the issue in GitHub commit 02cc160e29d20631de3859c6653184e3f876b9d7."
322,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37658,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37658: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixSetDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit ff8894044dfae5568ecbf2ed514c1a37dc394f1b."
323,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37656,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37656: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToSparse'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order. The Tensorflow team has patched the issue in GitHub commit 1071f554dbd09f7e101324d366eec5f4fe5a3ece."
324,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37638,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37638: Sending invalid argument for 'row_partition_types' of 'tf.raw_ops.RaggedTensorToTensor' API results in a null pointer dereference and undefined behavior. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty. The Tensorflow team has patched the issue in GitHub commit 301ae88b331d37a2a16159b65b255f4f9eb39314."
325,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37654,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37654: In affected versions an attacker can trigger a crash via a 'CHECK'-fail in debug builds of TensorFlow using 'tf.raw_ops.ResourceGather' or a read from outside the bounds of heap allocated data in the same API in a release build. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the 'batch_dims' value that the user supplies is less than the rank of the input tensor. Since the implementation uses several for loops over the dimensions of 'tensor', this results in reading data from outside the bounds of heap allocated buffer backing the tensor. The Tensorflow team has patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d."
326,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37651,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37651: In affected versions the implementation for 'tf.raw_ops.FractionalAvgPoolGrad' can be tricked into accessing data outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty 'EigenDoubleMatrixMap' and then accesses this buffer with indices that are outside of the empty area. The Tensorflow team has patched the issue in GitHub commit 0f931751fb20f565c4e94aa6df58d54a003cdb30."
327,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37639,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37639: When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer. Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the 'tensor_name' user controlled input and immediately retrieves the tensor at the restoration index (controlled via 'preferred_shard' argument). This occurs without validating that the provided list has enough values. If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements and if the restoration index is outside the bounds, this results in heap OOB read. The Tensorflow team has patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622."
328,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37664,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37664: In affected versions an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range. The Tensorflow team has patched the issue in GitHub commit e84c975313e8e8e38bb2ea118196369c45c51378."
329,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37686,">=2.3.0rc0,<2.3.4rc0,>=2.4.0rc0,<2.4.3rc0,>=2.5.0rc0,<=2.5.0,>=2.6.0rc0,<2.6.0","Several versions of TensorFlow are affected by CVE-2021-37686: In affected versions, the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for ellipsis in axis definition (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that 'ellipsis_end_idx' is smaller than 'i' (e.g., always negative). In this case, the inner loop does not increase 'i' and the 'continue' statement causes execution to skip over the preincrement at the end of the outer loop. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695."
330,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-26269,">=2.4.0rc0,<2.4.0","TensorFlow 2.4.0 includes a fix for CVE-2020-26269: In TensorFlow release candidate versions 2.4.0rc*, the general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of the array holding the directories. There are multiple invariants and preconditions that are assumed by the parallel implementation of GetMatchingPaths but are not verified by the PRs introducing it (#40861 and #44310). Thus, we are completely rewriting the implementation to fully specify and validate these. This is patched in version 2.4.0. This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched."
331,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29614,">=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.5.0rc0,<2.5.0","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory."
332,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29530,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by invalid validation in 'SparseMatrixSparseCholesky'. See CVE-2021-29530."
333,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29519,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'SparseCross' caused by type confusion. See CVE-2021-29519."
334,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29522,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv3DBackprop*'. See CVE-2021-29522."
335,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29529,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap buffer overflow caused by rounding. See CVE-2021-29529."
336,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29518,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix vulnerabilities where session operations in eager mode lead to null pointer dereferences. See CVE-2021-29518."
337,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29538,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29538: An attacker can cause a division by zero to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments). If all shapes are empty then 'work_unit_size' is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service."
338,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29533,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 includes a fix for CVE-2021-29533: An attacker can trigger a denial of service via a 'CHECK' failure by passing an empty image to 'tf.raw_ops.DrawBoundingBoxes'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses 'CHECK_*' assertions instead of 'OP_REQUIRES' to validate user controlled inputs. Whereas 'OP_REQUIRES' allows returning an error condition back to the user, the 'CHECK_*' macros result in a crash if the condition is false, similar to 'assert'. In this case, 'height' is 0 from the 'images' input. This results in 'max_box_row_clamp' being negative and the assertion being falsified, followed by aborting program execution."
339,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29520,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a heap buffer overflow in 'Conv3DBackprop*'. See CVE-2021-29520."
340,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29531,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.EncodePng'. See CVE-2021-29531."
341,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29521,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a segfault in 'SparseCountSparseOutput'. See CVE-2021-29521."
342,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29549,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29549: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero. Since `vector_num_elements` is determined based on input shapes (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0."
343,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29537,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29537: An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly."
344,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29532,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29532: An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads."
345,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29615,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow in 'ParseAttrValue' with nested tensors. See CVE-2021-29615."
346,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29548,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization)."
347,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29534,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29534: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.SparseConcat'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in 'shapes[0]' as dimensions for the output shape. The 'TensorShape' constructor (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a 'CHECK' operation which triggers when 'InitDims' (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use 'BuildTensorShapeBase' or 'AddDimWithStatus' to prevent 'CHECK'-failures in the presence of overflows."
348,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29513,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion."
349,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29525,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropInput'. See CVE-2021-29525."
350,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29524,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropFilter'. See CVE-2021-29524."
351,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29523,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'AddManySparseToTensorsMap'. See CVE-2021-29523."
352,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29552,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29552: An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar. Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination."
353,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29539,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument."
354,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29541,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'StringNGrams'. See CVE-2021-29541."
355,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29535,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29535: An attacker can cause a heap buffer overflow in 'QuantizedMul' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
356,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29542,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'StringNGrams'. See CVE-2021-29542."
357,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29536,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29536: An attacker can cause a heap buffer overflow in 'QuantizedReshape' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
358,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29544,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29544: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.QuantizeAndDequantizeV4Grad'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the 'input_*' tensors. In turn, this results in the tensors being passes as they are to 'QuantizeAndDequantizePerChannelGradientImpl' (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306). However, the 'vec<T>' method, requires the rank to 1 and triggers a 'CHECK' failure otherwise."
359,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29543,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29543: An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks."
360,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29540,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29540: TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in 'filter_sizes'. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor."
361,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-8169,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency 'curl' to version 7.76.0 to handle CVE-2020-8169."
362,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29516,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix fixes a null pointer dereference via invalid Ragged Tensors. See CVE-2021-29516."
363,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29517,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in 'Conv3D'. See CVE-2021-29517."
364,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29515,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a reference binding to null pointer in 'MatrixDiag*' ops. See CVE-2021-29515."
365,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29594,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's convolution code. See CVE-2021-29594."
366,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29596,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'EmbeddingLookup'. See CVE-2021-29596."
367,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29558,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29558: An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset."
368,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29545,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29545: An attacker can trigger a denial of service via a 'CHECK'-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at 'indices(i, 0)' is such that 'indices(i, 0) + 1' is outside the bounds of 'csr_row_ptr', this results in writing outside of bounds of heap allocated data."
369,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29551,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29551: The implementation of 'MatrixTriangularSolve' (https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails."
370,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29592,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in TFLite's 'Reshape' operator. See CVE-2021-29592."
371,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29581,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'CTCBeamSearchDecoder'. See CVE-2021-29581."
372,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29617,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29617: An attacker can cause a denial of service via `CHECK`-fail in `tf.strings.substr` with invalid arguments."
373,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29574,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior in 'MaxPool3DGradGrad'. See CVE-2021-29574."
374,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29512,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds."
375,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29556,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29556: An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument."
376,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29613,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'tf.raw_ops.CTCLoss'. See CVE-2021-29613."
377,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29526,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'Conv2D'. See CVE-2021-29526."
378,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29527,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedConv2D'. See CVE-2021-29527."
379,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29595,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29595: The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0."
380,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29561,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'LoadAndRemapMatrix'. See CVE-2021-29561."
381,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29585,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29585: The TFLite computation for size of output after padding, `ComputeOutSize`(https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division. Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0."
382,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29589,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29589: The reference implementation of the `GatherNd` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966). An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension."
383,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29570,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'MaxPoolGradWithArgmax'. See CVE-2021-29570."
384,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29559,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB access in unicode ops. See CVE-2021-29559."
385,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29555,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'FusedBatchNorm'. See CVE-2021-29555."
386,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29588,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'TransposeConv'. See CVE-2021-29588."
387,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29557,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'SparseMatMul'. See CVE-2021-29557."
388,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29612,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'BandedTriangularSolve'. See CVE-2021-29612."
389,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29514,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor."
390,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29584,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail due to integer overflow. See CVE-2021-29584."
391,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29582,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in 'tf.raw_ops.Dequantize'. See CVE-2021-29582."
392,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29562,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.IRFFT'. See CVE-2021-29562."
393,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29597,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SpaceToBatchNd'. See CVE-2021-29597."
394,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29565,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'SparseFillEmptyRows'. See CVE-2021-29565."
395,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29619,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'tf.raw_ops.SparseCountSparseOutput'. See CVE-2021-29619."
396,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29602,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'DepthwiseConv'. See CVE-2021-29602."
397,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29577,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'AvgPool3DGrad'. See CVE-2021-29577."
398,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29566,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29566: An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to 'tf.raw_ops.Dilation2DBackpropInput'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array. The values for 'h_out' and 'w_out' are guaranteed to be in range for 'out_backprop' (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating 'h_in_max'/'w_in_max' and 'in_backprop'."
399,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29576,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPool3DGradGrad'. See CVE-2021-29576."
400,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29600,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'OneHot'. See CVE-2021-29600."
401,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29599,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'Split'. See CVE-2021-29599."
402,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29608,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29608: TensorFlow is an end-to-end open source platform for machine learning. Due to lack of validation in 'tf.raw_ops.RaggedTensorToTensor', an attacker can exploit an undefined behavior if input arguments are empty. The implementation (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones. There are multiple 'DCHECK' validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything."
403,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29554,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'DenseCountSparseOutput'. See CVE-2021-29554."
404,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29578,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'FractionalAvgPoolGrad'. See CVE-2021-29578."
405,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29547,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29547: An attacker can cause a segfault and denial of service via accessing data outside of bounds in 'tf.raw_ops.QuantizedBatchNormWithGlobalNormalization'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, '.flat<T>()' is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds."
406,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29603,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB write in TFLite. See CVE-2021-29603."
407,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29604,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of hashtable lookup. See CVE-2021-29604."
408,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29572,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer)."
409,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29587,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29587: TensorFlow is an end-to-end open source platform for machine learning. The `Prepare` step of the `SpaceToDepth` TFLite operator does not check for 0 before division (https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67). An attacker can craft a model such that `params->block_size` would be zero."
410,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29569,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'RequantizationRange'. See CVE-2021-29569."
411,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-8285,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 updates its dependency ""curl"" to a secure version (7.76.0)."
412,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29601,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite concatentation. See CVE-2021-29601."
413,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29573,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'MaxPoolGradWithArgmax'. See CVE-2021-29573."
414,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29586,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in optimized pooling implementations in TFLite. See CVE-2021-29586."
415,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29590,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in TFLite's implementation of 'Minimum' or 'Maximum'. See CVE-2021-29590."
416,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29598,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SVDF'. See CVE-2021-29598."
417,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29528,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedMul'. See CVE-2021-29528."
418,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29611,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseReshape'. See CVE-2021-29611."
419,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29580,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior and a 'CHECK'-fail in 'FractionalMaxPoolGrad'. See CVE-2021-29580."
420,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29618,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29618: Passing a complex argument to `tf.transpose` at the same time as passing 'conjugate=True' argument results in a crash."
421,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29575,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an overflow and a denial of service in 'tf.raw_ops.ReverseSequence'. See CVE-2021-29575."
422,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29616,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29616: The implementation of TrySimplify (https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs."
423,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29591,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow due to looping TFLite subgraph. See CVE-2021-29591."
424,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29606,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap OOB read in TFLite. See CVE-2021-29606."
425,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29607,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseSparseMinimum'. See CVE-2021-29607."
426,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29609,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseAdd'. See CVE-2021-29609."
427,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29583,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29583: The implementation of 'tf.raw_ops.FusedBatchNorm' is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that 'scale', 'offset', 'mean' and 'variance' (the last two only when required) all have the same number of elements as the number of channels of 'x'. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior."
428,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-8231,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency ""curl"" to v7.76.0 to include security fixes."
429,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-8286,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 updates 'curl' to '7.76.0' to handle CVE-2020-8286: curl 7.41.0 through 7.73.0 is vulnerable to an improper check for certificate revocation due to insufficient verification of the OCSP response."
430,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-8177,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update 'curl' to '7.76.0' to handle CVE-2020-8177."
431,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29593,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'BatchToSpaceNd'. See CVE-2021-29593."
432,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2020-8284,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 update its dependency ""curl"" to handle CVE-2020-8284."
433,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29579,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPoolGrad'. See CVE-2021-29579."
434,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29605,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite memory allocation. See CVE-2021-29605."
435,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29564,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'EditDistance'. See CVE-2021-29564."
436,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29553,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB in 'QuantizeAndDequantizeV3'. See CVE-2021-29553."
437,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29563,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29563: An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`. Eigen code operating on an empty matrix can trigger on an assertion and will cause program termination."
438,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29550,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29550: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values. The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger. Later, these computed values are used as arguments (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to `GeneratePoolingSequence`(https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation. Since `output_length` can be 0, this results in runtime crashing."
439,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29546,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29546: TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero."
440,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29610,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29610: The validation in 'tf.raw_ops.QuantizeAndDequantizeV2' allows invalid values for 'axis' argument:. The validation (https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses '||' to mix two different conditions. If 'axis_ < -1' the condition in 'OP_REQUIRES' will still be true, but this value of 'axis_' results in heap underflow. This allows attackers to read/write to other data on the heap."
441,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29571,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices."
442,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29560,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29560: An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel. Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when 'parent_output_index' is shorter than 'row_split'."
443,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-29568,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in 'tf.raw_ops.ParameterizedTruncatedNormal'. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of 'shape'. If 'shape' argument is empty, then 'shape_tensor.flat<T>()' is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."
444,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37645,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37645: In affected versions the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit 96f364a1ca3009f98980021c4b32be5fdcca33a1."
445,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37691,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37691: In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). The Tensorflow team has patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9."
446,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37688,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37688: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer. The Tensorflow team has patched the issue in GitHub commit 15691e456c7dc9bd6be203b09765b063bf4a380c."
447,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37692,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow versions 2.5.1 and 2.6.0 include a fix for CVE-2021-37692:
In affected versions under certain conditions, Go code can trigger a segfault in string deallocation. For string tensors, ""C.TF_TString_Dealloc"" is called during garbage collection within a finalizer function. However, tensor structure isn't checked until encoding to avoid a performance penalty. The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions). To fix this, the call to set the finalizer function is deferred until ""NewTensor"" returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written. The Tensorflow team has patched the issue in GitHub commit:
https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22
https://github.com/tensorflow/tensorflow/pull/50508
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cmgw-8vpc-rc59"
448,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37640,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.5.1 and 2.6.0 include a fix for CVE-2021-37640: In affected versions the implementation of 'tf.raw_ops.SparseReshape' can be made to trigger an integral division by 0 exception. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements. The reshape functor (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0. The Tensorflow team has patched the issue in GitHub commit 4923de56ec94fff7770df259ab7f2288a74feb41."
449,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22898,">=2.6.0a1,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow versions 2.3.4, 2.4.3, 2.5.1, and 2.6.0 update its dependency ""curl"" to include a fix for CVE-2021-22898"
450,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37685,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37685: In affected versions TFLite's 'expand_dims.cc' (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data. If 'axis' is a large negative value (e.g., '-100000'), then after the first 'if' it would still be negative. The check following the 'if' statement will pass and the 'for' loop would read one element before the start of 'input_dims.data' (when 'i = 0'). The Tensorflow team has patched the issue in GitHub commit d94ffe08a65400f898241c0374e9edc6fa8ed257."
451,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37657,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37657: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. The Tensorflow team has checked that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit f2a673bd34f0d64b8e40a551ac78989d16daad09."
452,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37663,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37663:
In affected versions, due to incomplete validation in ""tf.raw_ops.QuantizeV2"", an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that ""min_range"" and ""max_range"" both have the same non-zero number of elements. If ""axis"" is provided (i.e., not ""-1""), then validation should check that it is a value in range for the rank of ""input"" tensor and then the lengths of ""min_range"" and ""max_range"" inputs match the ""axis"" dimension of the ""input"" tensor. The Tensorflow team has patched the issue in GitHub commit 6da6620efad397c85493b8f8667b821403516708. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j
https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708"
453,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37661,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37661: In affected versions an attacker can cause a denial of service in 'boosted_trees_create_quantile_stream_resource' by using negative arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that 'num_streams' only contains non-negative numbers. In turn, this results in using this value to allocate memory (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40). However, 'reserve' receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library. The Tensorflow team has patched the issue in GitHub commit 8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992."
454,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37665,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37665:
In affected versions, due to incomplete validation in MKL implementation of requantization, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the ""input"" tensor. A similar issue occurs in ""MklRequantizePerChannelOp"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments. The Tensorflow team has patched the issue in GitHub commit 9e62869465573cb2d9b5053f1fa02a81fce21d69 and in the Github commit 203214568f5bc237603dbab6e1fd389f1572f5c9.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp
https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9
https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69"
455,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37676,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37676: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.SparseFillEmptyRows'. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors. The Tensorflow team has patched the issue in GitHub commit 578e634b4f1c1c684d4b4294f9e5281b2133b3ed."
456,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37675,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37675: In affected versions most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations. The Tensorflow team has patched the issue in GitHub commit 8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4."
457,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37687,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37687: In affected versions TFLite's 'GatherNd' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in 'indices'. Similar issue exists in 'Gather' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). The Tensorflow team has patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d."
458,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37668,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37668:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.UnravelIndex"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by ""dims"" is not empty. Hence, if one element of ""dims"" is 0, the implementation does a division by 0. The Tensorflow team has patched the issue in GitHub commit a776040a5e7ebf76eeb7eb923bf1ae417dd4d233.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5
https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233"
459,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37653,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37653: In affected versions an attacker can trigger a crash via a floating point exception in 'tf.raw_ops.ResourceGather'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, 'batch_size', and then divides by it without checking that this value is not 0. The Tensorflow team has patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11."
460,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37660,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37660: In affected versions an attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if 'x' and 'v' are empty but the code uses '||' instead of '&&'. The Tensorflow team has patched the issue in GitHub commit e86605c0a336c088b638da02135ea6f9f6753618."
461,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37684,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37684: In affected versions the implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 (https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695)."
462,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37643,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37643: If a user does not provide a valid padding value to 'tf.raw_ops.MatrixDiagPartOp', then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from. The Tensorflow team has patched the issue in GitHub commit 482da92095c4d48f8784b1f00dda4f81c28d2988."
463,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37644,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37644: In affected versions providing a negative element to 'num_elements' list argument of 'tf.raw_ops.TensorListReserve' causes the runtime to abort the process due to reallocating a 'std::vector' to have a negative number of elements. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls 'std::vector.resize()' with the new size controlled by input given by the user, without checking that this input is valid. The Tensorflow team has patched the issue in GitHub commit 8a6e874437670045e6c7dc6154c7412b4a2135e2."
464,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37646,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37646: In affected versions the implementation of 'tf.raw_ops.StringNGrams' is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls 'reserve' on a 'tstring' with a value that sometimes can be negative if user supplies negative 'ngram_widths'. The 'reserve' method calls 'TF_TString_Reserve' which has an 'unsigned long' argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit c283e542a3f422420cfdb332414543b62fc4e4a5."
465,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37681,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37681: In affected versions the implementation of SVDF in TFLite is vulnerable to a null pointer error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313). The 'GetVariableInput' function (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but 'GetTensorData' assumes that the argument is always a valid tensor. Furthermore, because 'GetVariableInput' calls 'GetMutableInput' (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return 'nullptr', the 'tensor->is_variable' expression can also trigger a null pointer exception. The Tensorflow team has patched the issue in GitHub commit 5b048e87e4e55990dae6b547add4dae59f4e1c76."
466,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37641,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37641: In affected versions if the arguments to 'tf.raw_ops.RaggedGather' don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by 'params_nested_splits' is not an empty list of tensors. The Tensorflow team has patched the issue in GitHub commit a2b743f6017d7b97af1fe49087ae15f0ac634373."
467,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37666,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37666: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToVariant'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. The Tensorflow team has patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612."
468,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37662,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37662: In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in 'BoostedTreesCalculateBestGainsPerFeature' and similar attack can occur in 'BoostedTreesCalculateBestFeatureSplitV2'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. The Tensorflow team has patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7."
469,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37690,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37690:
In affected versions when running shape functions, some functions (such as 'MutableHashTableShape') produce extra output information in the form of a 'ShapeAndType' struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault. 'ShapeRefiner' is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but the Tensorflow team was not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types. The Tensorflow team has patched the issue in GitHub commit ee119d4a498979525046fba1c3dd3f13a039fbb1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3hxh-8cp2-g4hg
https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1"
470,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37682,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37682:
In affected versions all TFLite operations that use quantization can be made to use unitialized values. (For example, https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200). The issue stems from the fact that ""quantization.params"" is only valid if ""quantization.type"" is different that ""kTfLiteNoQuantization"". However, these checks are missing in large parts of the code. The Tensorflow team has patched the issue in GitHub commits 537bc7c723439b9194a358f64d871dd326c18887, 4a91f2069f7145aab6ba2d8cfe41be8a110c18a5 and 8933b8a21280696ab119b63263babdb54c298538.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4c4g-crqm-xrxw
https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5
https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887
https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538"
471,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37650,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37650: In affected versions the implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types. The Tensorflow team has patched the issue in GitHub commit e0b6e58c328059829c3eb968136f17aa72b6c876."
472,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37669,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37669:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.NonMaxSuppressionV5"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a ""std::vector"". However, as ""std::vector::resize"" takes the size argument as a ""size_t"" and ""output_size"" is an ""int"", there is an implicit conversion to unsigned. If the attacker supplies a negative value, this conversion results in a crash. A similar issue occurs in ""CombinedNonMaxSuppression"". The Tensorflow team has patched the issue in GitHub commit 3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d and commit b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c
https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d
https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58"
473,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37677,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for 'tf.raw_ops.Dequantize' has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses 'axis' to select between two different values for 'minmax_rank' which is then used to retrieve tensor dimensions. However, code assumes that 'axis' can be either '-1' or a value greater than '-1', with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
474,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22901,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
475,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37655,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37655: TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to 'tf.raw_ops.ResourceScatterUpdate'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of 'indices' and 'updates': instead of checking that the shape of 'indices' is a prefix of the shape of 'updates' (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship. The Tensorflow team has patched the issue in GitHub commit 01cff3f986259d661103412a20745928c727326f."
476,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37672,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37672:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.SdcaOptimizerV2"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of ""example_labels"" is the same as the number of examples. The Tensorflow team has patched the issue in GitHub commit a4e138660270e7599793fa438cd7b2fc2ce215a6.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7
https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6"
477,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37670,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37670:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.UpperBound"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of ""sorted_input"" argument. A similar issue occurs in ""tf.raw_ops.LowerBound"". The Tensorflow team has patched the issue in GitHub commit 42459e4273c2e47a3232cc16c4f4fff3b3a35c38.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7
https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38"
478,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37679,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37679:
In affected versions it is possible to nest a ""tf.map_fn"" within another ""tf.map_fn"" call. However, if the input tensor is a ""RaggedTensor"" and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The ""t"" and ""z"" outputs should be identical, however this is not the case. The last row of ""t"" contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a ""Variant"" tensor to a ""RaggedTensor"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. The Tensorflow team has patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp
https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
479,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22897,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
480,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-22876,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
481,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37673,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37673:
In affected versions, an attacker can trigger a denial of service via a ""CHECK""-fail in ""tf.raw_ops.MapStage"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the ""key"" input is a valid non-empty tensor. The Tensorflow team has patched the issue in GitHub commit d7de67733925de196ec8863a33445b73f9562d1d.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg
https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d"
482,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37674,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in 'tf.raw_ops.MaxPoolGrad' caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the 'orig_input' and 'orig_output' tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
483,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-37678,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.7.0rc0,<2.7.0","Tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:
In affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses ""yaml.unsafe_load"" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r
https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012"
484,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41211,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41211: In affected versions, the shape inference code for 'QuantizeV2' can trigger a read outside of bounds of heap allocated array. This occurs whenever 'axis' is a negative value less than '-1'. In this case, we are accessing data before the start of a heap buffer. The code allows 'axis' to be an optional argument ('s' would contain an 'error::NOT_FOUND' error code). Otherwise, it assumes that 'axis' is a valid index into the dimensions of the 'input' tensor. If 'axis' is less than '-1' then this results in a heap OOB read. The fix is included in TensorFlow 2.7.0. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c
https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244"
485,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2021-41220,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41220: In affected versions, the async implementation of 'CollectiveReduceV2' suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been 'std::move()'d are still accessed. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5
https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
486,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23594,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered."
487,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23590,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.7.1 and 2.8.0 include a fix for CVE-2022-23590: A 'GraphDef' from a TensorFlow 'SavedModel' can be maliciously altered to cause a TensorFlow process to crash due to encountering a 'StatusOr' value that is an error and forcibly extracting the value from it.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278"
488,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23592,">=2.8.0a0,<2.8.0","Tensorflow version 2.8.0 includes a fix for CVE-2022-23592: TensorFlow's type inference can cause a heap out of bounds read as the bounds checking is done in a 'DCHECK' (which is a no-op during production). An attacker can control the 'input_idx' variable such that 'ix' would be larger than the number of values in 'node_t.args'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq36-27g6-p492"
489,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-23593,">=2.8.0a0,<2.8.0","Tensorflow 2.8.0 includes a fix for CVE-2022-23593: The 'simplifyBroadcast' function in the MLIR-TFRT infrastructure in TensorFlow is vulnerable to a segfault (hence, denial of service), if called with scalar shapes. If all shapes are scalar, then 'maxRank' is 0, so we build an empty 'SmallVector'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gwcx-jrx4-92w2"
490,tensorflow,>=2.4.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-29210,">=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","TensorFlow is an open source platform for machine learning. In version 2.8.0, the 'TensorKey' hash function used total estimated 'AllocatedBytes()', which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. 'int32_t'). It also tried to access individual tensor bytes through 'tensor.data()' of size 'AllocatedBytes()'. This led to ASAN failures because the 'AllocatedBytes()' is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the '.data()' buffer. The discoverers could not use this byte vector anyway because types such as 'tstring' include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."
491,tensorflow-datasets,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
492,torch,>=1.7.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
493,torchvision,>=0.8.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/setup.py,False,no one,no one,no one
494,absl-py,>=0.10.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,no one,no one,no one
495,scipy,>=1.5.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,CVE-2013-4251,">=0,<0.12.1",The scipy.weave component in SciPy before 0.12.1 creates insecure temporary directories.
496,numpy,>=1.19.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
497,numpy,>=1.19.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
498,numpy,>=1.19.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
499,numpy,>=1.19.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
500,easydict,>=1.9,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,no one,no one,no one
501,requests,>=2.25.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,CVE-2015-2296,">=2.1,<=2.5.3",The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.
502,requests,>=2.25.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements.txt,False,CVE-2023-32681,">=2.3.0,<2.31.0","Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.

"
503,pytest,>=6.2.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-dev.txt,False,no one,no one,no one
504,black,>=20.8b1,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-dev.txt,False,no one,no one,no one
505,mypy,>=0.790,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-dev.txt,False,no one,no one,no one
506,mypy-extensions,>=0.4.3,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-dev.txt,False,no one,no one,no one
507,flake8,>=3.8.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-dev.txt,False,no one,no one,no one
508,pre-commit,>=2.9.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-dev.txt,False,no one,no one,no one
509,jaxlib,>=0.1.60+cuda101,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-gpu.txt,False,no one,no one,no one
510,torch,>=1.7.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-pytorch.txt,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
511,torchvision,>=0.8.2,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-pytorch.txt,False,no one,no one,no one
512,jax,>=0.2.8,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-jax.txt,False,no one,no one,no one
513,jaxlib,>=0.1.60,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-jax.txt,False,no one,no one,no one
514,tensorflow-datasets,>=4.2.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,no one,no one,no one
515,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-19244,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite3"" to handle CVE-2019-19244."
516,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-19880,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""SQLite3"" to handle CVE-2019-19880."
517,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-10099,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2019-10099."
518,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2018-19664,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-19664."
519,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-13960,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2019-13960."
520,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2018-11770,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""Apache Spark"" to handle CVE-2018-11770."
521,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2018-20330,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-20330."
522,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-19645,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite"" to handle CVE-2019-19645."
523,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2018-17190,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2018-17190."
524,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15208,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15208: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a ""DCHECK"" which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue was patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d"
525,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15202,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15202: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'Shard' API in TensorFlow expects the last argument to be a function taking two 'int64' (i.e., 'long long') arguments. However, there are several places in TensorFlow where a lambda taking 'int' or 'int32' arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4"
526,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15190,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15190: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the ""tf.raw_ops.Switch"" operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor. However, the eager runtime traverses all tensors in the output. Since only one of the tensors is defined, the other one is ""nullptr"", hence we are binding a reference to ""nullptr"". This is undefined behavior and reported as an error if compiling with ""-fsanitize=null"". In this case, this results in a segmentation fault The issue was patched in commit da8558533d925694483d2c136a9220d6d49d843c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4g9f-63rx-5cw4"
527,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15209,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15209: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a ""nullptr"" buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with ""nullptr"". However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue was patched in commit 0b5662bc."
528,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15207,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34"
529,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15205,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15205: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'data_splits' argument of 'tf.raw_ops.StringNGrams' lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory In the linked code snippet, all the binary strings after 'ee ff' are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46"
530,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15195,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15195: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of 'SparseFillEmptyRowsGrad' uses a double indexing pattern. It is possible for 'reverse_index_map(i)' to be an index outside of bounds of 'grad_values', thus resulting in a heap buffer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr"
531,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15204,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15204: In eager mode, TensorFlow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 does not set the session state. Hence, calling ""tf.raw_ops.GetSessionHandle"" or ""tf.raw_ops.GetSessionHandleV2"" results in a null pointer dereference In linked snippet, in eager mode, ""ctx->session_state()"" returns ""nullptr"". Since code immediately dereferences this, we get a segmentation fault. The issue was patched in commit 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1"
532,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15203,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15203: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the 'fill' argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a 'printf' call is constructed. This may result in segmentation fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
533,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15206,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15206: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's ""SavedModel"" protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using ""tensorflow-serving"" or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d. However, this was not enough, as #41097 reported a different failure mode. The issue was finally patched in commit df095206f25471e864a8e63a0f1caef53a0e3a6"
534,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15211,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15211: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative ""-1"" value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the ""-1"" index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue was patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). A potential workaround would be to add a custom ""Verifier"" to the model loading code to ensure that only operators which accept optional inputs use the ""-1"" special value and only for the tensors that they expect to be optional. Since this allow-list type approach is error-prone, it's advised upgrading to the patched code."
535,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-13631,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13631."
536,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-13435,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13435."
537,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-13630,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13630."
538,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-13871,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13871."
539,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-13434,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13434."
540,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-9327,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-9327."
541,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-11655,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11655."
542,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-11656,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11656."
543,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15210,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15210: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2"
544,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15194,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow 2.4.0 includes a fix for CVE-2020-15194: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments. Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."""
545,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-14155,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2 and 2.3.2 update its dependency ""PCRE"" to handle CVE-2020-14155."
546,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15250,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency 'Junit4' to v4.13.1 to include a security fix."
547,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-20838,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency ""PCRE"" to fix CVE-2019-20838."
548,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-13790,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 updates its dependency ""Libjpeg-turbo"" to handle CVE-2020-13790."
549,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-26270,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26270: In affected versions, running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a CHECK failure when using the CUDA backend. This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer."
550,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-26266,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","TensorFlow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0 includes a fix for CVE-2020-26266: In affected versions and under certain cases a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers filled with the default value of the type but forgetting to default initialize the quantized floating point types in Eigen."
551,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-26271,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26271: In affected versions, under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library."
552,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-26267,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26267: In affected versions, the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes."
553,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-26268,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden."
554,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25661,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25661: In versions prior to 2.11.1 a malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. A proof of concept can be constructed with the 'Convolution3DTranspose' function. This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services. An attacker must have privilege to provide input to a 'Convolution3DTranspose' call.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq"
555,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25665,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25665: Prior to versions 2.12.0 and 2.11.1, when 'SparseSparseMaximum' is given invalid sparse tensors as inputs, it can give a null pointer error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-558h-mq8x-7q9g"
556,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25671,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25671: There is out-of-bounds access due to mismatched integer type sizes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j5w9-hmfh-4cr6"
557,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25658,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25658: Prior to versions 2.12.0 and 2.11.1, an out of bounds read is in GRUBlockCellGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-68v3-g9cm-rmm6"
558,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25801,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25801: Prior to versions 2.12.0 and 2.11.1, 'nn_ops.fractional_avg_pool_v2' and 'nn_ops.fractional_max_pool_v2' require the first and fourth elements of their parameter 'pooling_ratio' to be equal to 1.0, as pooling on batch and channel dimensions is not supported.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f49c-87jh-g47q"
559,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-27579,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-27579: Constructing a tflite model with a paramater 'filter_input_channel' of less than 1 gives a FPE.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5w96-866f-6rm8"
560,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25672,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25672: The function 'tf.raw_ops.LookupTableImportV2' cannot handle scalars in the 'values' parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
561,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25676,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25676: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.ParallelConcat' segfaults with a nullptr dereference when given a parameter 'shape' with rank that is not greater than zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6wfh-89q8-44jq"
562,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25666,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25666: Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f637-vh3r-vfh2"
563,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25667,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25667: Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when '2^31 <= num_frames * height * width * channels < 2^32', for example Full HD screencast of at least 346 frames.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68"
564,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25673,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25673: Versions prior to 2.12.0 and 2.11.1 have a Floating Point Exception in TensorListSplit with XLA. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
565,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25674,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25674: Versions prior to 2.12.0 and 2.11.1 have a null pointer error in RandomShuffle with XLA enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf97-q72m-7579"
566,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25670,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25670: Versions prior to 2.12.0 and 2.11.1 have a null point error in QuantizedMatMulWithBiasAndDequantize with MKL enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rq-hwc3-x77w"
567,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25668,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25668: Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96"
568,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25664,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25664: Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hg6-5c2q-7rcr"
569,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25663,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25663: Prior to versions 2.12.0 and 2.11.1, when 'ctx->step_containter()' is a null ptr, the Lookup function will be executed with a null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-64jg-wjww-7c5w"
570,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25660,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25660: Prior to versions 2.12.0 and 2.11.1, when the parameter 'summarize' of 'tf.raw_ops.Print' is zero, the new method 'SummarizeArray<bool>' will reference to a nullptr, leading to a seg fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj"
571,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25675,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25675: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.Bincount' segfaults when given a parameter 'weights' that is neither the same shape as parameter 'arr' nor a length-0 tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7x4v-9gxg-9hwj"
572,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25669,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25669: Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for 'tf.raw_ops.AvgPoolGrad', it can give a floating point exception.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rcf8-g8jv-vg6p"
573,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25662,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25662: Versions prior to 2.12.0 and 2.11.1 are vulnerable to integer overflow in EditDistance.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7jvm-xxmr-v5cw"
574,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2023-25659,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25659: Prior to versions 2.12.0 and 2.11.1, if the parameter 'indices' for 'DynamicStitch' does not match the shape of the parameter 'data', it can trigger an stack OOB read.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p"
575,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15266,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15266: In Tensorflow before version 2.4.0, when the 'boxes' argument of 'tf.image.crop_and_resize' has a very large value, the CPU kernel implementation receives it as a C++ 'nan' floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.
https://github.com/tensorflow/tensorflow/issues/42129
https://github.com/tensorflow/tensorflow/pull/42143/commits/3ade2efec2e90c6237de32a19680caaa3ebc2845
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xwhf-g6j5-j5gc"
576,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15265,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
577,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41210,"<2.4.4,>=2.5.0rc0,<2.5.2, >=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41210: In affected versions, the shape inference functions for 'SparseCountSparseOutput' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc
https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2"
578,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41196,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41196: In affected versions, the Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative. This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8"
579,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41195,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41195: In affected versions, the implementation of 'tf.math.segment_*' operations results in a 'CHECK'-fail related abort (and denial of service) if a segment id in 'segment_ids' is large. This is similar to CVE-2021-29584 (and similar to other reported vulnerabilities in TensorFlow localized to specific APIs): the implementation (both on CPU and GPU) computes the output shape using 'AddDim'. However, if the number of elements in the tensor overflows an 'int64_t' value, 'AddDim' results in a 'CHECK' failure which provokes a 'std::abort'. Instead, code should use 'AddDimWithStatus'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh"
580,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22925,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22925."
581,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41217,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41217: In affected versions, the process of building the control flow graph for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not. This occurs because the code assumes that the first node in the pairing (e.g., an 'Enter' node) always exists when encountering the second node (e.g., an 'Exit' node). When this is not the case, 'parent' is 'nullptr' so dereferencing it causes a crash. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5crj-c72x-m7gq
https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff"
582,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41228,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41228: In affected versions, TensorFlow's 'saved_model_cli' tool is vulnerable to a code injection as it calls 'eval' on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. The issue has been patched by adding a 'safe' flag which defaults to 'True' and an explicit warning for users.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v
https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7"
583,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41215,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41215: In affected versions, the shape inference code for 'DeserializeSparse' can trigger a null pointer dereference. This is because the shape inference function assumes that the 'serialize_sparse' tensor is a tensor with positive rank (and having '3' as the last dimension). The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r
https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850"
584,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41216,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41216: In affected versions, the shape inference function for 'Transpose' is vulnerable to a heap buffer overflow. This occurs whenever 'perm' contains negative elements. The shape inference function does not validate that the indices in 'perm' are all valid. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9
https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14"
585,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22924,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22924."
586,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22923,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22923."
587,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41226,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41226: In affected versions, the implementation of 'SparseBinCount' is vulnerable to a heap OOB access. This is because of missing validation between the elements of the 'values' argument and the shape of the sparse output. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-374m-jm66-3vj8
https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba"
588,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41200,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41200: In affected versions, if 'tf.summary.create_file_writer' is called with non-scalar arguments, code crashes due to a 'CHECK'-fail. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f"
589,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41218,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41218: In affected versions, the shape inference code for 'AllToAll' can be made to execute a division by 0. This occurs whenever the 'split_count' argument is 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273
https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc"
590,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41223,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41223: In affected versions, the implementation of 'FusedBatchNorm' kernels is vulnerable to a heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr
https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda"
591,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41224,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41224: In affected versions, the implementation of 'SparseFillEmptyRows' can be made to trigger a heap OOB access. This occurs whenever the size of 'indices' does not match the size of 'values'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v
https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b"
592,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41219,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41219: In affected versions, the code for sparse matrix multiplication is vulnerable to undefined behavior via binding a reference to 'nullptr'. This occurs whenever the dimensions of 'a' or 'b' are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, it should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x
https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae"
593,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41202,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41202: In affected versions, while calculating the size of the output within the 'tf.range' kernel, there is a conditional statement of type 'int64 = condition ? int64 : double'. Due to C++ implicit conversion rules, both branches of the condition will be cast to 'double' and the result would be truncated before the assignment. This result in overflows. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx"
594,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41221,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41221: In affected versions, the shape inference code for the 'Cudnn*' operations can be tricked into accessing invalid memory via a heap buffer overflow. This occurs because the ranks of the 'input', 'input_h' and 'input_c' parameters are not validated, but code assumes they have certain values. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx
https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6"
595,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41203,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41203: In affected versions, an attacker can trigger undefined behavior, integer overflows, segfaults and 'CHECK'-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7pxj-m4jf-r6h2"
596,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41222,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41222: In affected versions, the implementation of 'SplitV' can trigger a segfault if an attacker supplies negative arguments. This occurs whenever 'size_splits' contains more than one value and at least one value is negative. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6
https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6"
597,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22922,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22922."
598,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41227,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41227: In affected versions, the 'ImmutableConst' operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the 'tstring' TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7
https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b
https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585"
599,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41201,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41201: In affected versions, during execution, 'EinsumHelper::ParseEquation()' is supposed to set the flags in 'input_has_ellipsis' vector and '*output_has_ellipsis' boolean to indicate whether there is ellipsis in the corresponding inputs and output. However, the code only changes these flags to 'true' and never assigns 'false'. This results in unitialized variable access if callers assume that 'EinsumHelper::ParseEquation()' always sets these flags. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j86v-p27c-73fm
https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6"
600,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22926,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22926."
601,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41205,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41205: In affected versions, the shape inference functions for the 'QuantizeAndDequantizeV*' operations can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f
https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d"
602,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41214,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41214: In affected versions, the shape inference code for 'tf.ragged.cross' has an undefined behavior due to binding a reference to 'nullptr'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
603,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41207,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41207: In affected versions, the implementation of 'ParallelConcat' misses some input validation and can produce a division by 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
604,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41204,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41204: In affected versions, during TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-786j-5qwq-r36x
https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659"
605,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41213,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf
https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7"
606,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41212,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41212: In affected versions, the shape inference code for 'tf.ragged.cross' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
607,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41225,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41225: In affected versions, TensorFlow's Grappler optimizer has a use of unitialized variable. If the 'train_nodes' vector (obtained from the saved model that gets optimized) does not contain a 'Dequeue' node, then 'dequeue_node' is left unitialized. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw
https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"
608,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41198,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41198: In affected versions, if 'tf.tile' is called with a large input argument, then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q"
609,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41209,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41209: In affected versions, the implementations for convolution operators trigger a division by 0 if passed empty filter tensor arguments. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hpv-v2rx-c5g6
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
610,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41199,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41199: In affected versions, if 'tf.image.resize' is called with a large input argument then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm"
611,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-10531,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 update its dependency 'icu' to v69.1 to include a security fix."
612,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23591,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The 'GraphDef' format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a 'GraphDef' containing a fragment such as the following can be consumed when loading a 'SavedModel'. This would result in a stack overflow during execution as resolving each 'NodeDef' means resolving the function itself and its nodes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
613,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23576,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
614,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23585,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding PNG images TensorFlow can produce a memory leak if the image is invalid. After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
615,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23578,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. If a graph node is invalid, TensorFlow can leak memory in the implementation of `ImmutableExecutorState::Initialize`. Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
616,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23583,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
617,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23567,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23567: The implementations of 'Sparse*Cwise*' ops are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or 'CHECK'-fails when building new 'TensorShape' objects (so, assert failures based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43"
618,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23574,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. There is a typo in TensorFlow's `SpecializeType` which results in heap OOB read/write. Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
619,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23571,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
620,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23589,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place). First, during constant folding, the `GraphDef` might not have the required nodes for the binary operation. If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect. We have a similar issue during `IsIdentityConsumingSwitch`. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
621,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23586,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
622,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21733,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21733: The implementation of 'StringNGrams' can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. There is missing a validation on 'pad_witdh' and that result in computing a negative value for 'ngram_width' which is later used to allocate parts of the output.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g"
623,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23587,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
624,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21735,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21735: The implementation of 'FractionalMaxPool' can be made to crash a TensorFlow process via a division by 0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj"
625,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23577,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `GetInitOp` is vulnerable to a crash caused by dereferencing a null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
626,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23566,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. TensorFlow is vulnerable to a heap OOB write in `Grappler`. The `set_output` function writes to an array at the specified index. Hence, this gives a malicious user a write primitive. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
627,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23562,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23562: The implementation of 'Range' suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr"
628,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23572,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
629,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23588,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
630,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23579,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23579: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'SafeToRemoveIdentity' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5f2r-qp73-37mr"
631,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23569,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23569: Multiple operations in TensorFlow can be used to trigger a denial of service via 'CHECK'-fails (i.e., assertion failures). This is similar to CVE-2021-41197 and has a similar fix. It is possible that other similar instances exist.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qj5r-f9mv-rffh"
632,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23575,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
633,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23580,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23580: During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-627q-g293-49q7"
634,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21732,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21732: The implementation of 'ThreadPoolHandle' can be used to trigger a denial of service attack by allocating too much memory. This is because the 'num_threads' argument is only checked to not be negative, but there is no upper bound on its value.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq"
635,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21740,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21740: The implementation of 'SparseCountSparseOutput' is vulnerable to a heap overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-44qp-9wwf-734r"
636,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23595,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23595: When building an XLA compilation cache, if default settings are used, TensorFlow triggers a null pointer dereference. In the default scenario, all devices are allowed, so 'flr->config_proto' is 'nullptr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fpcp-9h7m-ffpx"
637,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23581,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23581: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'IsSimplifiableReshape' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq86-3f29-px2c"
638,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21739,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21739: The implementation of 'QuantizedMaxPool' has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5"
639,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23564,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23564: When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a 'CHECK' assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3"
640,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23565,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23565: An attacker can trigger denial of service via assertion failure by altering a 'SavedModel' on disk such that 'AttrDef's of some operation are duplicated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4v5p-v5h9-6xjx"
641,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21741,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21741: An attacker can craft a TFLite model that would trigger a division by zero in the implementation of depthwise convolutions. The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is strictly positive.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-428x-9xc2-m8mj"
642,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21726,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21726: The implementation of 'Dequantize' does not fully validate the value of 'axis' and can result in heap OOB accesses. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72"
643,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23557,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23557: An attacker can craft a TFLite model that would trigger a division by zero in 'BiasAndClamp' implementation. There is no check that the 'bias_size' is non zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf2j-f278-xh4v"
644,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21728,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
645,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23568,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23568: The implementation of 'AddManySparseToTensorsMap' is vulnerable to an integer overflow which results in a 'CHECK'-fail when building new 'TensorShape' objects (so, an assert failure based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2"
646,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23563,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23563: In multiple places, TensorFlow uses 'tempfile.mktemp' to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in 'mktemp' and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the 'mktemp' function usage. It was replaced 'mktemp' with the safer 'mkstemp'/'mkdtemp' functions, according to the usage pattern.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wc4g-r73w-x8mm"
647,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21730,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21730: The implementation of 'FractionalAvgPoolGrad' does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4"
648,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21736,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21736: The implementation of 'SparseTensorSliceDataset' has an undefined behavior: under certain conditions, it can be made to dereference a 'nullptr' value. The 3 input arguments to 'SparseTensorSliceDataset' represent a sparse tensor. However, there are some preconditions that these arguments must satisfy, but these are not validated in the implementation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9"
649,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23570,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
650,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23558,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23558: An attacker can craft a TFLite model that would cause an integer overflow in 'TfLiteIntArrayCreate'. The 'TfLiteIntArrayGetSizeInBytes' returns an 'int' instead of a 'size_t'. An attacker can control model inputs such that 'computed_size' overflows the size of 'int' datatype.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9gwq-6cwj-47h3"
651,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23559,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23559: An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both 'embedding_size' and 'lookup_size' are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98p5-x8x4-c9m5"
652,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21727,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21727: The implementation of shape inference for 'Dequantize' is vulnerable to an integer overflow weakness. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes 'axis + 1', an attacker can trigger an integer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw"
653,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21725,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21725: The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f"
654,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21738,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21738: The implementation of 'SparseCountSparseOutput' can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6"
655,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23584,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
656,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23582,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23582: A malicious user can cause a denial of service by altering a 'SavedModel' such that 'TensorByteSize' would trigger 'CHECK' failures. 'TensorShape' constructor throws a 'CHECK'-fail if shape is partial or has a number of elements that would overflow the size of an 'int'. The 'PartialTensorShape' constructor instead does not cause a 'CHECK'-abort if the shape is partial, which is exactly what this function needs to be able to return '-1'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4j82-5ccr-4r8v"
657,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23561,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23561: An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c78-vcq7-7vxq"
658,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21731,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21731: The implementation of shape inference for 'ConcatV2' can be used to trigger a denial of service attack via a segfault caused by a type confusion. The 'axis' argument is translated into 'concat_dim' in the 'ConcatShapeHelper' helper function. Then, a value for 'min_rank' is computed based on 'concat_dim'. This is then used to validate that the 'values' tensor has at least the required rank. However, 'WithRankAtLeast' receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented. Due to the fact that 'min_rank' is a 32-bits value and the value of 'axis', the 'rank' argument is a negative value, so the error check is bypassed.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
659,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21734,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21734: The implementation of 'MapStage' is vulnerable to a 'CHECK'-fail if the key tensor is not a scalar.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm"
660,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23573,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
661,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21737,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21737: The implementation of '*Bincount' operations allows malicious users to cause denial of service by passing in arguments which would trigger a 'CHECK'-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in 'CHECK' failures later when the output tensors get allocated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2vv-v9cg-qhh7"
662,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-21729,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21729: The implementation of 'UnravelIndex' is vulnerable to a division by zero caused by an integer overflow bug.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j"
663,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23560,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23560: An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4hvf-hxvg-f67v"
664,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41208,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41208: In affected versions, the code for boosted trees in TensorFlow is still missing validation. As a result, attackers can trigger denial of service (via dereferencing 'nullptr's or via 'CHECK'-failures) as well as abuse undefined behavior (binding references to 'nullptr's). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call. Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs. TensorFlow's boosted trees APIs will be deprecated in subsequent releases.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-57wx-m983-2f88
https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6gw-r52c-724r"
665,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41206,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41206: In affected versions, several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or 'CHECK'-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. These issues were discovered internally via tooling while working on improving/testing GPU op determinism. As such, there aren't reproducers and there will be multiple fixes for these issues.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pgcq-h79j-2f69
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x"
666,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27775,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27775."
667,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29193,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29193: missing validation which causes 'TensorSummaryV2' to crash."
668,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27776,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27776."
669,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29196,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29196: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
670,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29197: Missing validation which causes denial of service via 'UnsortedSegmentJoin'."
671,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27779,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27779."
672,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29202,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29202: Denial of service in 'tf.ragged.constant' due to lack of validation."
673,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29201,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29201: Missing validation which results in undefined behavior in 'QuantizedConv2D'."
674,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29206,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29206: Missing validation which results in undefined behavior in 'SparseTensorDenseAdd'."
675,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27778,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27778."
676,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29204,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29204: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
677,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29199,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29199: Missing validation which causes denial of service via 'LoadAndRemapMatrix'."
678,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29213,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29213: Crashes stemming from incomplete validation in signal ops."
679,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29211,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29211: Segfault when 'tf.histogram_fixed_width' is called with NaN values."
680,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27780,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27780."
681,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29205,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29205: Segfault due to missing support for quantized types."
682,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-22576,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-22576."
683,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29209,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29209: Type confusion leading to 'CHECK'-failure based denial of service."
684,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27782,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27782."
685,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29195,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29195: Missing validation which causes denial of service via 'StagePeek'."
686,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29216,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29216: Code injection in 'saved_model_cli'."
687,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29200,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29200: Missing validation which causes denial of service via 'LSTMBlockCell'."
688,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29198,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29198:  Missing validation which causes denial of service via 'SparseTensorToCSRSparseMatrix'."
689,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29207,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29207: Issues arising from undefined behavior stemming from users supplying invalid resource handles."
690,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29208,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29208: Segfault and OOB write due to incomplete validation in 'EditDistance'."
691,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29194,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29194: Missing validation which causes denial of service via 'DeleteSessionTensor'."
692,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27781,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27781."
693,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-30115,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-30115."
694,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2021-41197: Affected versions allow tensors to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an 'int64_t'. If an overflow occurs, 'MultiplyWithoutOverflow' would return a negative result. In the majority of TensorFlow codebase this then results in a 'CHECK'-failure. Newer constructs exist which return a 'Status' instead of crashing the binary. This is similar to CVE-2021-29584.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-vrvr-3rx2
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mw6j-hh29-h379"
695,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2018-25032,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'zlib' to v1.2.12 to handle CVE-2018-25032."
696,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-27774,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27774."
697,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29192,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29192: missing validation which crashes 'QuantizeAndDequantizeV4Grad'."
698,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29191,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29191: Missing validation which causes denial of service via 'GetSessionTensor'."
699,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29212,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29212: Core dump when loading TFLite models with quantization."
700,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29203,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29203: Integer overflow in 'SpaceToBatchND'."
701,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35985,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35985: 'CHECK' fail in 'LRNGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp"
702,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35971,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35971: 'CHECK' fail in 'FakeQuantWithMinMaxVars'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7"
703,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35952,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35952: 'CHECK' failures in 'UnbatchGradOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47"
704,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35979,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35979: Segfault in 'QuantizedRelu' and 'QuantizedRelu6'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x"
705,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36002,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36002: 'CHECK' fail in 'Unbatch'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg"
706,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35996,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35996: Floating point exception in 'Conv2D'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37"
707,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35959,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35959: 'CHECK' failures in 'AvgPool3DGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq"
708,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35990,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35990: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannelGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh"
709,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35983,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35983: 'CHECK' fail in 'Save' and 'SaveSlices'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4"
710,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35974,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35974: Segfault in 'QuantizeDownAndShrinkRange'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x"
711,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36019,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36019: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannel'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7"
712,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35994,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35994: 'CHECK' fail in 'CollectiveGather'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f"
713,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36014,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36014: Null-dereference in 'mlir::tfg::TFOp::nameAttr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7j3m-8g3c-9qqq"
714,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35964,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35964: Segfault in 'BlockLSTMGradV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668"
715,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35987,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35987: 'CHECK' fail in 'DenseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49"
716,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36011,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36011: Null dereference on MLIR on empty function attributes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv43-93gv-vm8f"
717,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36027,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36027: Segfault TFLite converter on per-channel quantized transposed convolutions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr"
718,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35972,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35972: Segfault in 'QuantizedBiasAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9"
719,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35968,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35968: 'CHECK' fail in 'AvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25"
720,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35941,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35941: 'CHECK' failure in 'AvgPoolOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5"
721,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35940,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35940: Int overflow in 'RaggedRangeOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x"
722,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35939,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35939: OOB write in 'scatter_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf"
723,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35997,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35997: 'CHECK' fail in 'tf.sparse.cross'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf"
724,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36016,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36016: 'CHECK'-fail in 'tensorflow::full_type::SubstituteFromAttrs'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g468-qj8g-vcjc"
725,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35937,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35937: OOB read in 'Gather_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h"
726,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35963,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35963: 'CHECK' failures in 'FractionalAvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm"
727,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36015,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36015: Integer overflow in math ops. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rh87-q4vg-m45j"
728,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35984,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35984: 'CHECK' fail in 'ParameterizedTruncatedNormal'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5"
729,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36013,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36013: Null-dereference in 'mlir::tfg::GraphDefImporter::ConvertNodeDef'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828c-5j5q-vrjq"
730,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35981,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35981: 'CHECK' fail in 'FractionalMaxPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw"
731,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35960,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35960: 'CHECK' failure in 'TensorListReserve' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4"
732,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36017,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36017: Segfault in 'Requantize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc"
733,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35969,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35969: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx"
734,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36012,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36012: Assertion fail on MLIR empty edge names.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jvhc-5hhr-w3v5"
735,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36000,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36000: 'CHECK' fail in 'Eig'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v"
736,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35986,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35986: Segfault in 'RaggedBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v"
737,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35973,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35973: Segfault in 'QuantizedMatMul'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v"
738,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36026,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36026: 'CHECK' fail in 'QuantizeAndDequantizeV3'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq"
739,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35966,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35966: Segfault in 'QuantizedAvgPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9"
740,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35993,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35993: 'CHECK' fail in 'SetSize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9"
741,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35988,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35988: 'CHECK' fail in 'tf.linalg.matrix_rank'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c"
742,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35965,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35965: Segfault in 'LowerBound' and 'UpperBound'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36"
743,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35967,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35967: Segfault in 'QuantizedAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x"
744,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35970,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35970: Segfault in 'QuantizedInstanceNorm'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp"
745,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35995,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35995: 'CHECK' fail in 'AudioSummaryV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4"
746,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36004,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36004: 'CHECK' fail in 'tf.random.gamma'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q"
747,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36018,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36018: 'CHECK' fail in 'RaggedTensorToVariant'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf"
748,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36003,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36003: 'CHECK' fail in 'RandomPoissonV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq"
749,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35934,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35934: 'CHECK' failure in tf.reshape via overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45"
750,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35998,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35998: 'CHECK' fail in 'EmptyTensorList'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5"
751,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35992,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35992: 'CHECK' fail in 'TensorListFromTensor'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp"
752,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35982,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35982: Segfault in 'SparseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv"
753,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36001,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36001: 'CHECK' fail in 'DrawBoundingBoxes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5"
754,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35999,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35999: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw"
755,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35989,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35989: 'CHECK' fail in 'MaxPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq"
756,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-36005,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36005: 'CHECK' fail in 'FakeQuantWithMinMaxVarsGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm"
757,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41893,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41893: If 'tf.raw_ops.TensorListResize' is given a nonscalar value for input 'size', it results 'CHECK' fail which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-67pf-62xr-q35m"
758,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41894,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41894: The reference kernel of the 'CONV_3D_TRANSPOSE' TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. Instead of 'data_ptr += num_channels;' it should be 'data_ptr += output_num_channels;' as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels > output_num_channels. An attacker can craft a model with a specific number of input channels. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6q3-vv32-2cq5"
759,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41880,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41880: When the 'BaseCandidateSamplerOp' function receives a value in 'true_classes' larger than 'range_max', a heap oob read occurs.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j"
760,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41897,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41897: If 'FractionMaxPoolGrad' is given outsize inputs 'row_pooling_sequence' and 'col_pooling_sequence', TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2w8-jw48-fr7j"
761,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41898,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41898: If 'SparseFillEmptyRowsGrad' is given empty inputs, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hq7g-wwwp-q46h"
762,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41884,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41884: If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jq6x-99hj-q636"
763,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41888,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41888: When running on GPU, 'tf.image.generate_bounding_box_proposals' receives a 'scores' input that must be of rank 4 but is not checked.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6x99-gv2v-q76v"
764,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41910,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41910: The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-frqp-wp83-qggv"
765,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41901,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41901: An input 'sparse_matrix' that is not a matrix with a shape with rank 0 will trigger a 'CHECK' fail in 'tf.raw_ops.SparseMatrixNNZ'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9fm-r5mm-rf9f"
766,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41900,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41900: The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472"
767,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41911,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41911: When printing a tensor, we get it's data as a 'const char*' array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from 'char' to 'bool' are undefined if the 'char' is not '0' or '1', so sanitizers/fuzzers will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pf36-r9c6-h97j"
768,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41896,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41896: If 'ThreadUnsafeUnigramCandidateSampler' is given input 'filterbank_channel_count' greater than the allowed max size, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35"
769,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41902,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."
770,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41895,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41895: If 'MirrorPadGrad' is given outsize input 'paddings', TensorFlow will give a heap OOB error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gq2j-cr96-gvqx"
771,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41891,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41891: If 'tf.raw_ops.TensorListConcat' is given 'element_shape=[]', it results segmentation fault which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-66vq-54fq-6jvv"
772,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41889,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41889: If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a 'nullptr', which is not caught. An example can be seen in 'tf.compat.v1.extract_volume_patches' by passing in quantized tensors as input 'ksizes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xxcj-rhqg-m46g"
773,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41885,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41885: When 'tf.raw_ops.FusedResizeAndPadConv2D' is given a large tensor shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-762h-vpvw-3rcx"
774,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41908,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41908: TensorFlow is an open source platform for machine learning. An input 'token' that is not a UTF-8 bytestring will trigger a 'CHECK' fail in 'tf.raw_ops.PyFunc'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv77-9g28-cwg3"
775,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41890,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41890: If 'BCast::ToShape' is given input larger than an 'int32', it will crash, despite being supposed to handle up to an 'int64'. An example can be seen in 'tf.experimental.numpy.outer' by passing in large input to the input 'b'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h246-cgh4-7475"
776,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41907,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41907: When 'tf.raw_ops.ResizeNearestNeighborGrad' is given a large 'size' input, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-368v-7v32-52fx"
777,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41886,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41886: When 'tf.raw_ops.ImageProjectiveTransformV2' is given a large output shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-54pp-c6pp-7fpx"
778,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41899,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41899: TensorFlow is an open source platform for machine learning. Inputs 'dense_features' or 'example_state_data' not of rank 2 will trigger a 'CHECK' fail in 'SdcaOptimizer'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27rc-728f-x5w2"
779,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41909,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41909: An input 'encoded' that is not a valid 'CompositeTensorVariant' tensor will trigger a segfault in 'tf.raw_ops.CompositeTensorVariantToComponents'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjx6-v474-2ch9"
780,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35935,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35935: 'CHECK' failure in 'SobolSample' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqvq-fvhr-v6hc"
781,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-35991,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35991: 'CHECK' fail in 'TensorListScatter' and 'TensorListScatterV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xf83-q765-xm6m"
782,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41887,"<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.9.3 and 2.10.1 include a fix for CVE-2022-41887: 'tf.keras.losses.poisson' receives a 'y_pred' and 'y_true' that are passed through 'functor::mul' in 'BinaryOp'. If the resulting dimensions overflow an 'int32', TensorFlow will crash due to a size mismatch during broadcast assignment.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fvv-46hw-vpg3"
783,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15358,">=1.15.0rc0,<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 updates its dependency ""SQLite"" to handle CVE-2020-15358."
784,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-16168,">=2.0.0a0,<2.0.1,<1.15.2",Tensorflow versions 1.15.2 and 2.0.1 updates 'sqlite3' to handle CVE-2019-16168.
785,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-5482,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5482."
786,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-19646,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 update its dependency ""SQLite"" to handle CVE-2019-19646."
787,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-5215,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(""hello"", tf.float16), if eager execution is enabled."
788,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
789,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29567,">=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.5.0rc0,<2.5.0","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers."
790,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-41883,">=2.10.0rc0,<2.10.1","Tensorflow 2.10.1 includes a fix for CVE-2022-41883: When ops that have specified input sizes receive a differing number of inputs, the executor will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w58w-79xv-6vcj"
791,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15212,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15212: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to ""segment_ids_data"" can alter ""output_index"" and then write to outside of ""output_data"" buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
792,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15214,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15214: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimension of output tensor. This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array. This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
793,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15192,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15192: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes a list of strings to 'dlpack.to_dlpack' there is a memory leak following an expected validation failure. The issue occurs because the 'status' argument during validation failures is not properly checked. Since each of the above methods can return an error status, the 'status' value must be checked before continuing.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv"
794,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15193,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of ""dlpack.to_dlpack"" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a ""reinterpret_cast"". Since the ""PyObject"" is a Python object, not a Tensorflow tensor, the cast to ""EagerTensor"" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v"
795,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15191,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15191: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to 'dlpack.to_dlpack' the expected validations will cause variables to bind to 'nullptr' while setting a 'status' variable to the error condition. However, this 'status' argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with '-fsanitize=null'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr"
796,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15213,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15213: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimension of the output tensor, attackers can use a very large value to trigger a large allocation. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps. However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87"
797,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15197,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15197: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix. However, malicious users can pass in tensors of different rank, resulting in a ""CHECK"" assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02."
798,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15200,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15200: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A ""BatchedMap"" is equivalent to a vector where each element is a hashmap. However, if the first element of ""splits_values"" is not 0, ""batch_idx"" will never be 1, hence there will be no hashmap at index 0 in ""per_batch_counts"". Trying to access that in the user code results in a segmentation fault. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3"
799,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15199,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15199: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the ""splits"" tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure. Since ""BatchedMap"" is equivalent to a vector, it needs to have at least one element to not be ""nullptr"". If user passes a ""splits"" tensor that is empty or has exactly one element, we get a ""SIGABRT"" signal raised by the operating system. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h"
800,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15201,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15201: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Hence, the code is prone to heap buffer overflow. If ""split_values"" does not end with a value at least ""num_values"" then the ""while"" loop condition will trigger a read outside of the bounds of ""split_values"" once ""batch_idx"" grows too large. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4"
801,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15198,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15198: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has the same shape as the ""values"" one. The values in these tensors are always accessed in parallel. Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3"
802,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-15196,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15196: In Tensorflow version 2.3.0, the ""SparseCountSparseOutput"" and ""RaggedCountSparseOutput"" implementations don't validate that the ""weights"" tensor has the same shape as the data. The check exists for ""DenseCountSparseOutput"", where both tensors are fully specified. In the sparse and ragged count weights are still accessed in parallel with the data. But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph"
803,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37635,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37635: In affected versions the implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data. The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor. The Tensorflow team has patched the issue in GitHub commit 87158f43f05f2720a374f3e6d22a7aaa3a33f750."
804,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37637,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37637: It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. The Tensorflow team has patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5."
805,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37683,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37683: In affected versions the implementation of division in TFLite is vulnerable to a division by 0 error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. The Tensorflow team has patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28."
806,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37667,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37667: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.UnicodeEncode'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the 'input_splits' tensor before validating that this tensor is not empty. The Tensorflow team has patched the issue in GitHub commit 2e0ee46f1a47675152d3d865797a18358881d7a6."
807,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37671,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37671: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.Map*' and 'tf.raw_ops.OrderedMap*' operations. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that 'indices' is in ascending order, but does not check that 'indices' is not empty. The Tensorflow team has patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac."
808,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37689,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37689: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. This is caused by the MLIR optimization of 'L2NormalizeReduceAxis' operator. The implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements. The Tensorflow team has patched the issue in GitHub commit d6b57f461b39fd1aa8c1b870f1b974aac3554955."
809,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37648,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37648: In affected versions the code for 'tf.raw_ops.SaveV2' does not properly validate the inputs and an attacker can trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses 'ValidateInputs' to check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer above. However, the validation uses 'OP_REQUIRES' which translates to setting the 'Status' object of the current 'OpKernelContext' to an error status, followed by an empty 'return' statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the nQext line in 'Compute' that follows the call to 'ValidateInputs'. This is equivalent to lacking the validation. The Tensorflow team has patched the issue in GitHub commit 9728c60e136912a12d99ca56e106b7cce7af5986."
810,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37680,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37680: In affected versions the implementation of fully connected layers in TFLite is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226). The Tensorflow team has patched the issue in GitHub commit 718721986aa137691ee23f03638867151f74935f."
811,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37636,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37636: In affected versions the implementation of 'tf.raw_ops.SparseDenseCwiseDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit d9204be9f49520cdaaeb2541d1dc5187b23f31d9."
812,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37642,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37642: In affected versions the implementation of 'tf.raw_ops.ResourceScatterDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76."
813,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37652,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37652: In affected versions the implementation for 'tf.raw_ops.BoostedTreesCreateEnsemble' can result in a use after free error if an attacker supplies specially crafted arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent 'free'-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed. The Tensorflow team has patched the issue in GitHub commit 5ecec9c6fbdbc6be03295685190a45e7eee726ab."
814,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37649,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37649: The code for 'tf.raw_ops.UncompressElement' can be made to trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a 'CompressedElement' from a 'Variant' tensor and then proceeds to dereference it for decompressing. There is no check that the 'Variant' tensor contained a 'CompressedElement', so the pointer is actually 'nullptr'. The Tensorflow team has patched the issue in GitHub commit 7bdf50bb4f5c54a4997c379092888546c97c3ebd."
815,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37659,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37659: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations). The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr. We have patched the issue in GitHub commit 93f428fd1768df147171ed674fee1fc5ab8309ec."
816,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37647,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37647: When a user does not supply arguments that determine a valid sparse tensor, 'tf.raw_ops.SparseTensorSliceDataset' implementation can be made to dereference a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either 'indices' or 'values' are provided for an empty sparse tensor when the other is not. If 'indices' is empty, then code that performs validation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference. If 'indices' as provided by the user is empty, then 'indices' in the C++ code above is backed by an empty 'std::vector', hence calling 'indices->dim_size(0)' results in null pointer dereferencing (same as calling 'std::vector::at()' on an empty vector). The Tensorflow team has patched the issue in GitHub commit 02cc160e29d20631de3859c6653184e3f876b9d7."
817,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37658,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37658: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixSetDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit ff8894044dfae5568ecbf2ed514c1a37dc394f1b."
818,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37656,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37656: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToSparse'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order. The Tensorflow team has patched the issue in GitHub commit 1071f554dbd09f7e101324d366eec5f4fe5a3ece."
819,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37638,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37638: Sending invalid argument for 'row_partition_types' of 'tf.raw_ops.RaggedTensorToTensor' API results in a null pointer dereference and undefined behavior. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty. The Tensorflow team has patched the issue in GitHub commit 301ae88b331d37a2a16159b65b255f4f9eb39314."
820,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37654,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37654: In affected versions an attacker can trigger a crash via a 'CHECK'-fail in debug builds of TensorFlow using 'tf.raw_ops.ResourceGather' or a read from outside the bounds of heap allocated data in the same API in a release build. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the 'batch_dims' value that the user supplies is less than the rank of the input tensor. Since the implementation uses several for loops over the dimensions of 'tensor', this results in reading data from outside the bounds of heap allocated buffer backing the tensor. The Tensorflow team has patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d."
821,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37651,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37651: In affected versions the implementation for 'tf.raw_ops.FractionalAvgPoolGrad' can be tricked into accessing data outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty 'EigenDoubleMatrixMap' and then accesses this buffer with indices that are outside of the empty area. The Tensorflow team has patched the issue in GitHub commit 0f931751fb20f565c4e94aa6df58d54a003cdb30."
822,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37639,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37639: When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer. Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the 'tensor_name' user controlled input and immediately retrieves the tensor at the restoration index (controlled via 'preferred_shard' argument). This occurs without validating that the provided list has enough values. If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements and if the restoration index is outside the bounds, this results in heap OOB read. The Tensorflow team has patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622."
823,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37664,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37664: In affected versions an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range. The Tensorflow team has patched the issue in GitHub commit e84c975313e8e8e38bb2ea118196369c45c51378."
824,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37686,">=2.3.0rc0,<2.3.4rc0,>=2.4.0rc0,<2.4.3rc0,>=2.5.0rc0,<=2.5.0,>=2.6.0rc0,<2.6.0","Several versions of TensorFlow are affected by CVE-2021-37686: In affected versions, the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for ellipsis in axis definition (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that 'ellipsis_end_idx' is smaller than 'i' (e.g., always negative). In this case, the inner loop does not increase 'i' and the 'continue' statement causes execution to skip over the preincrement at the end of the outer loop. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695."
825,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-26269,">=2.4.0rc0,<2.4.0","TensorFlow 2.4.0 includes a fix for CVE-2020-26269: In TensorFlow release candidate versions 2.4.0rc*, the general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of the array holding the directories. There are multiple invariants and preconditions that are assumed by the parallel implementation of GetMatchingPaths but are not verified by the PRs introducing it (#40861 and #44310). Thus, we are completely rewriting the implementation to fully specify and validate these. This is patched in version 2.4.0. This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched."
826,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29614,">=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.5.0rc0,<2.5.0","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory."
827,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29530,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by invalid validation in 'SparseMatrixSparseCholesky'. See CVE-2021-29530."
828,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29519,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'SparseCross' caused by type confusion. See CVE-2021-29519."
829,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29522,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv3DBackprop*'. See CVE-2021-29522."
830,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29529,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap buffer overflow caused by rounding. See CVE-2021-29529."
831,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29518,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix vulnerabilities where session operations in eager mode lead to null pointer dereferences. See CVE-2021-29518."
832,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29538,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29538: An attacker can cause a division by zero to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments). If all shapes are empty then 'work_unit_size' is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service."
833,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29533,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 includes a fix for CVE-2021-29533: An attacker can trigger a denial of service via a 'CHECK' failure by passing an empty image to 'tf.raw_ops.DrawBoundingBoxes'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses 'CHECK_*' assertions instead of 'OP_REQUIRES' to validate user controlled inputs. Whereas 'OP_REQUIRES' allows returning an error condition back to the user, the 'CHECK_*' macros result in a crash if the condition is false, similar to 'assert'. In this case, 'height' is 0 from the 'images' input. This results in 'max_box_row_clamp' being negative and the assertion being falsified, followed by aborting program execution."
834,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29520,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a heap buffer overflow in 'Conv3DBackprop*'. See CVE-2021-29520."
835,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29531,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.EncodePng'. See CVE-2021-29531."
836,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29521,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a segfault in 'SparseCountSparseOutput'. See CVE-2021-29521."
837,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29549,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29549: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero. Since `vector_num_elements` is determined based on input shapes (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0."
838,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29537,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29537: An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly."
839,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29532,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29532: An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads."
840,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29615,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow in 'ParseAttrValue' with nested tensors. See CVE-2021-29615."
841,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29548,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization)."
842,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29534,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29534: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.SparseConcat'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in 'shapes[0]' as dimensions for the output shape. The 'TensorShape' constructor (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a 'CHECK' operation which triggers when 'InitDims' (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use 'BuildTensorShapeBase' or 'AddDimWithStatus' to prevent 'CHECK'-failures in the presence of overflows."
843,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29513,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion."
844,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29525,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropInput'. See CVE-2021-29525."
845,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29524,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropFilter'. See CVE-2021-29524."
846,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29523,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'AddManySparseToTensorsMap'. See CVE-2021-29523."
847,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29552,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29552: An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar. Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination."
848,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29539,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument."
849,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29541,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'StringNGrams'. See CVE-2021-29541."
850,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29535,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29535: An attacker can cause a heap buffer overflow in 'QuantizedMul' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
851,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29542,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'StringNGrams'. See CVE-2021-29542."
852,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29536,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29536: An attacker can cause a heap buffer overflow in 'QuantizedReshape' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
853,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29544,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29544: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.QuantizeAndDequantizeV4Grad'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the 'input_*' tensors. In turn, this results in the tensors being passes as they are to 'QuantizeAndDequantizePerChannelGradientImpl' (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306). However, the 'vec<T>' method, requires the rank to 1 and triggers a 'CHECK' failure otherwise."
854,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29543,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29543: An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks."
855,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29540,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29540: TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in 'filter_sizes'. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor."
856,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-8169,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency 'curl' to version 7.76.0 to handle CVE-2020-8169."
857,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29516,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix fixes a null pointer dereference via invalid Ragged Tensors. See CVE-2021-29516."
858,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29517,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in 'Conv3D'. See CVE-2021-29517."
859,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29515,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a reference binding to null pointer in 'MatrixDiag*' ops. See CVE-2021-29515."
860,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29594,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's convolution code. See CVE-2021-29594."
861,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29596,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'EmbeddingLookup'. See CVE-2021-29596."
862,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29558,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29558: An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset."
863,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29545,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29545: An attacker can trigger a denial of service via a 'CHECK'-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at 'indices(i, 0)' is such that 'indices(i, 0) + 1' is outside the bounds of 'csr_row_ptr', this results in writing outside of bounds of heap allocated data."
864,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29551,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29551: The implementation of 'MatrixTriangularSolve' (https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails."
865,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29592,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in TFLite's 'Reshape' operator. See CVE-2021-29592."
866,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29581,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'CTCBeamSearchDecoder'. See CVE-2021-29581."
867,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29617,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29617: An attacker can cause a denial of service via `CHECK`-fail in `tf.strings.substr` with invalid arguments."
868,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29574,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior in 'MaxPool3DGradGrad'. See CVE-2021-29574."
869,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29512,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds."
870,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29556,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29556: An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument."
871,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29613,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'tf.raw_ops.CTCLoss'. See CVE-2021-29613."
872,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29526,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'Conv2D'. See CVE-2021-29526."
873,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29527,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedConv2D'. See CVE-2021-29527."
874,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29595,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29595: The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0."
875,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29561,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'LoadAndRemapMatrix'. See CVE-2021-29561."
876,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29585,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29585: The TFLite computation for size of output after padding, `ComputeOutSize`(https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division. Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0."
877,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29589,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29589: The reference implementation of the `GatherNd` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966). An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension."
878,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29570,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'MaxPoolGradWithArgmax'. See CVE-2021-29570."
879,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29559,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB access in unicode ops. See CVE-2021-29559."
880,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29555,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'FusedBatchNorm'. See CVE-2021-29555."
881,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29588,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'TransposeConv'. See CVE-2021-29588."
882,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29557,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'SparseMatMul'. See CVE-2021-29557."
883,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29612,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'BandedTriangularSolve'. See CVE-2021-29612."
884,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29514,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor."
885,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29584,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail due to integer overflow. See CVE-2021-29584."
886,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29582,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in 'tf.raw_ops.Dequantize'. See CVE-2021-29582."
887,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29562,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.IRFFT'. See CVE-2021-29562."
888,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29597,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SpaceToBatchNd'. See CVE-2021-29597."
889,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29565,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'SparseFillEmptyRows'. See CVE-2021-29565."
890,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29619,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'tf.raw_ops.SparseCountSparseOutput'. See CVE-2021-29619."
891,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29602,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'DepthwiseConv'. See CVE-2021-29602."
892,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29577,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'AvgPool3DGrad'. See CVE-2021-29577."
893,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29566,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29566: An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to 'tf.raw_ops.Dilation2DBackpropInput'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array. The values for 'h_out' and 'w_out' are guaranteed to be in range for 'out_backprop' (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating 'h_in_max'/'w_in_max' and 'in_backprop'."
894,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29576,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPool3DGradGrad'. See CVE-2021-29576."
895,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29600,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'OneHot'. See CVE-2021-29600."
896,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29599,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'Split'. See CVE-2021-29599."
897,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29608,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29608: TensorFlow is an end-to-end open source platform for machine learning. Due to lack of validation in 'tf.raw_ops.RaggedTensorToTensor', an attacker can exploit an undefined behavior if input arguments are empty. The implementation (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones. There are multiple 'DCHECK' validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything."
898,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29554,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'DenseCountSparseOutput'. See CVE-2021-29554."
899,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29578,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'FractionalAvgPoolGrad'. See CVE-2021-29578."
900,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29547,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29547: An attacker can cause a segfault and denial of service via accessing data outside of bounds in 'tf.raw_ops.QuantizedBatchNormWithGlobalNormalization'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, '.flat<T>()' is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds."
901,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29603,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB write in TFLite. See CVE-2021-29603."
902,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29604,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of hashtable lookup. See CVE-2021-29604."
903,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29572,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer)."
904,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29587,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29587: TensorFlow is an end-to-end open source platform for machine learning. The `Prepare` step of the `SpaceToDepth` TFLite operator does not check for 0 before division (https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67). An attacker can craft a model such that `params->block_size` would be zero."
905,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29569,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'RequantizationRange'. See CVE-2021-29569."
906,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-8285,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 updates its dependency ""curl"" to a secure version (7.76.0)."
907,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29601,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite concatentation. See CVE-2021-29601."
908,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29573,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'MaxPoolGradWithArgmax'. See CVE-2021-29573."
909,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29586,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in optimized pooling implementations in TFLite. See CVE-2021-29586."
910,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29590,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in TFLite's implementation of 'Minimum' or 'Maximum'. See CVE-2021-29590."
911,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29598,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SVDF'. See CVE-2021-29598."
912,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29528,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedMul'. See CVE-2021-29528."
913,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29611,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseReshape'. See CVE-2021-29611."
914,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29580,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior and a 'CHECK'-fail in 'FractionalMaxPoolGrad'. See CVE-2021-29580."
915,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29618,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29618: Passing a complex argument to `tf.transpose` at the same time as passing 'conjugate=True' argument results in a crash."
916,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29575,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an overflow and a denial of service in 'tf.raw_ops.ReverseSequence'. See CVE-2021-29575."
917,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29616,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29616: The implementation of TrySimplify (https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs."
918,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29591,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow due to looping TFLite subgraph. See CVE-2021-29591."
919,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29606,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap OOB read in TFLite. See CVE-2021-29606."
920,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29607,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseSparseMinimum'. See CVE-2021-29607."
921,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29609,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseAdd'. See CVE-2021-29609."
922,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29583,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29583: The implementation of 'tf.raw_ops.FusedBatchNorm' is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that 'scale', 'offset', 'mean' and 'variance' (the last two only when required) all have the same number of elements as the number of channels of 'x'. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior."
923,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-8231,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency ""curl"" to v7.76.0 to include security fixes."
924,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-8286,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 updates 'curl' to '7.76.0' to handle CVE-2020-8286: curl 7.41.0 through 7.73.0 is vulnerable to an improper check for certificate revocation due to insufficient verification of the OCSP response."
925,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-8177,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update 'curl' to '7.76.0' to handle CVE-2020-8177."
926,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29593,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'BatchToSpaceNd'. See CVE-2021-29593."
927,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2020-8284,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 update its dependency ""curl"" to handle CVE-2020-8284."
928,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29579,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPoolGrad'. See CVE-2021-29579."
929,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29605,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite memory allocation. See CVE-2021-29605."
930,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29564,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'EditDistance'. See CVE-2021-29564."
931,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29553,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB in 'QuantizeAndDequantizeV3'. See CVE-2021-29553."
932,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29563,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29563: An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`. Eigen code operating on an empty matrix can trigger on an assertion and will cause program termination."
933,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29550,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29550: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values. The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger. Later, these computed values are used as arguments (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to `GeneratePoolingSequence`(https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation. Since `output_length` can be 0, this results in runtime crashing."
934,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29546,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29546: TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero."
935,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29610,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29610: The validation in 'tf.raw_ops.QuantizeAndDequantizeV2' allows invalid values for 'axis' argument:. The validation (https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses '||' to mix two different conditions. If 'axis_ < -1' the condition in 'OP_REQUIRES' will still be true, but this value of 'axis_' results in heap underflow. This allows attackers to read/write to other data on the heap."
936,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29571,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices."
937,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29560,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29560: An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel. Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when 'parent_output_index' is shorter than 'row_split'."
938,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-29568,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in 'tf.raw_ops.ParameterizedTruncatedNormal'. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of 'shape'. If 'shape' argument is empty, then 'shape_tensor.flat<T>()' is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."
939,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37645,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37645: In affected versions the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit 96f364a1ca3009f98980021c4b32be5fdcca33a1."
940,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37691,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37691: In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). The Tensorflow team has patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9."
941,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37688,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37688: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer. The Tensorflow team has patched the issue in GitHub commit 15691e456c7dc9bd6be203b09765b063bf4a380c."
942,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37692,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow versions 2.5.1 and 2.6.0 include a fix for CVE-2021-37692:
In affected versions under certain conditions, Go code can trigger a segfault in string deallocation. For string tensors, ""C.TF_TString_Dealloc"" is called during garbage collection within a finalizer function. However, tensor structure isn't checked until encoding to avoid a performance penalty. The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions). To fix this, the call to set the finalizer function is deferred until ""NewTensor"" returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written. The Tensorflow team has patched the issue in GitHub commit:
https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22
https://github.com/tensorflow/tensorflow/pull/50508
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cmgw-8vpc-rc59"
943,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37640,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.5.1 and 2.6.0 include a fix for CVE-2021-37640: In affected versions the implementation of 'tf.raw_ops.SparseReshape' can be made to trigger an integral division by 0 exception. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements. The reshape functor (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0. The Tensorflow team has patched the issue in GitHub commit 4923de56ec94fff7770df259ab7f2288a74feb41."
944,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22898,">=2.6.0a1,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow versions 2.3.4, 2.4.3, 2.5.1, and 2.6.0 update its dependency ""curl"" to include a fix for CVE-2021-22898"
945,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37685,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37685: In affected versions TFLite's 'expand_dims.cc' (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data. If 'axis' is a large negative value (e.g., '-100000'), then after the first 'if' it would still be negative. The check following the 'if' statement will pass and the 'for' loop would read one element before the start of 'input_dims.data' (when 'i = 0'). The Tensorflow team has patched the issue in GitHub commit d94ffe08a65400f898241c0374e9edc6fa8ed257."
946,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37657,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37657: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. The Tensorflow team has checked that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit f2a673bd34f0d64b8e40a551ac78989d16daad09."
947,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37663,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37663:
In affected versions, due to incomplete validation in ""tf.raw_ops.QuantizeV2"", an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that ""min_range"" and ""max_range"" both have the same non-zero number of elements. If ""axis"" is provided (i.e., not ""-1""), then validation should check that it is a value in range for the rank of ""input"" tensor and then the lengths of ""min_range"" and ""max_range"" inputs match the ""axis"" dimension of the ""input"" tensor. The Tensorflow team has patched the issue in GitHub commit 6da6620efad397c85493b8f8667b821403516708. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j
https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708"
948,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37661,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37661: In affected versions an attacker can cause a denial of service in 'boosted_trees_create_quantile_stream_resource' by using negative arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that 'num_streams' only contains non-negative numbers. In turn, this results in using this value to allocate memory (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40). However, 'reserve' receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library. The Tensorflow team has patched the issue in GitHub commit 8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992."
949,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37665,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37665:
In affected versions, due to incomplete validation in MKL implementation of requantization, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the ""input"" tensor. A similar issue occurs in ""MklRequantizePerChannelOp"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments. The Tensorflow team has patched the issue in GitHub commit 9e62869465573cb2d9b5053f1fa02a81fce21d69 and in the Github commit 203214568f5bc237603dbab6e1fd389f1572f5c9.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp
https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9
https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69"
950,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37676,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37676: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.SparseFillEmptyRows'. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors. The Tensorflow team has patched the issue in GitHub commit 578e634b4f1c1c684d4b4294f9e5281b2133b3ed."
951,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37675,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37675: In affected versions most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations. The Tensorflow team has patched the issue in GitHub commit 8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4."
952,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37687,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37687: In affected versions TFLite's 'GatherNd' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in 'indices'. Similar issue exists in 'Gather' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). The Tensorflow team has patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d."
953,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37668,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37668:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.UnravelIndex"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by ""dims"" is not empty. Hence, if one element of ""dims"" is 0, the implementation does a division by 0. The Tensorflow team has patched the issue in GitHub commit a776040a5e7ebf76eeb7eb923bf1ae417dd4d233.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5
https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233"
954,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37653,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37653: In affected versions an attacker can trigger a crash via a floating point exception in 'tf.raw_ops.ResourceGather'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, 'batch_size', and then divides by it without checking that this value is not 0. The Tensorflow team has patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11."
955,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37660,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37660: In affected versions an attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if 'x' and 'v' are empty but the code uses '||' instead of '&&'. The Tensorflow team has patched the issue in GitHub commit e86605c0a336c088b638da02135ea6f9f6753618."
956,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37684,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37684: In affected versions the implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 (https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695)."
957,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37643,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37643: If a user does not provide a valid padding value to 'tf.raw_ops.MatrixDiagPartOp', then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from. The Tensorflow team has patched the issue in GitHub commit 482da92095c4d48f8784b1f00dda4f81c28d2988."
958,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37644,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37644: In affected versions providing a negative element to 'num_elements' list argument of 'tf.raw_ops.TensorListReserve' causes the runtime to abort the process due to reallocating a 'std::vector' to have a negative number of elements. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls 'std::vector.resize()' with the new size controlled by input given by the user, without checking that this input is valid. The Tensorflow team has patched the issue in GitHub commit 8a6e874437670045e6c7dc6154c7412b4a2135e2."
959,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37646,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37646: In affected versions the implementation of 'tf.raw_ops.StringNGrams' is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls 'reserve' on a 'tstring' with a value that sometimes can be negative if user supplies negative 'ngram_widths'. The 'reserve' method calls 'TF_TString_Reserve' which has an 'unsigned long' argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit c283e542a3f422420cfdb332414543b62fc4e4a5."
960,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37681,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37681: In affected versions the implementation of SVDF in TFLite is vulnerable to a null pointer error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313). The 'GetVariableInput' function (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but 'GetTensorData' assumes that the argument is always a valid tensor. Furthermore, because 'GetVariableInput' calls 'GetMutableInput' (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return 'nullptr', the 'tensor->is_variable' expression can also trigger a null pointer exception. The Tensorflow team has patched the issue in GitHub commit 5b048e87e4e55990dae6b547add4dae59f4e1c76."
961,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37641,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37641: In affected versions if the arguments to 'tf.raw_ops.RaggedGather' don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by 'params_nested_splits' is not an empty list of tensors. The Tensorflow team has patched the issue in GitHub commit a2b743f6017d7b97af1fe49087ae15f0ac634373."
962,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37666,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37666: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToVariant'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. The Tensorflow team has patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612."
963,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37662,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37662: In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in 'BoostedTreesCalculateBestGainsPerFeature' and similar attack can occur in 'BoostedTreesCalculateBestFeatureSplitV2'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. The Tensorflow team has patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7."
964,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37690,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37690:
In affected versions when running shape functions, some functions (such as 'MutableHashTableShape') produce extra output information in the form of a 'ShapeAndType' struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault. 'ShapeRefiner' is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but the Tensorflow team was not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types. The Tensorflow team has patched the issue in GitHub commit ee119d4a498979525046fba1c3dd3f13a039fbb1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3hxh-8cp2-g4hg
https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1"
965,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37682,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37682:
In affected versions all TFLite operations that use quantization can be made to use unitialized values. (For example, https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200). The issue stems from the fact that ""quantization.params"" is only valid if ""quantization.type"" is different that ""kTfLiteNoQuantization"". However, these checks are missing in large parts of the code. The Tensorflow team has patched the issue in GitHub commits 537bc7c723439b9194a358f64d871dd326c18887, 4a91f2069f7145aab6ba2d8cfe41be8a110c18a5 and 8933b8a21280696ab119b63263babdb54c298538.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4c4g-crqm-xrxw
https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5
https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887
https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538"
966,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37650,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37650: In affected versions the implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types. The Tensorflow team has patched the issue in GitHub commit e0b6e58c328059829c3eb968136f17aa72b6c876."
967,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37669,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37669:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.NonMaxSuppressionV5"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a ""std::vector"". However, as ""std::vector::resize"" takes the size argument as a ""size_t"" and ""output_size"" is an ""int"", there is an implicit conversion to unsigned. If the attacker supplies a negative value, this conversion results in a crash. A similar issue occurs in ""CombinedNonMaxSuppression"". The Tensorflow team has patched the issue in GitHub commit 3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d and commit b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c
https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d
https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58"
968,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37677,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for 'tf.raw_ops.Dequantize' has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses 'axis' to select between two different values for 'minmax_rank' which is then used to retrieve tensor dimensions. However, code assumes that 'axis' can be either '-1' or a value greater than '-1', with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
969,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22901,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
970,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37655,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37655: TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to 'tf.raw_ops.ResourceScatterUpdate'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of 'indices' and 'updates': instead of checking that the shape of 'indices' is a prefix of the shape of 'updates' (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship. The Tensorflow team has patched the issue in GitHub commit 01cff3f986259d661103412a20745928c727326f."
971,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37672,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37672:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.SdcaOptimizerV2"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of ""example_labels"" is the same as the number of examples. The Tensorflow team has patched the issue in GitHub commit a4e138660270e7599793fa438cd7b2fc2ce215a6.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7
https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6"
972,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37670,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37670:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.UpperBound"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of ""sorted_input"" argument. A similar issue occurs in ""tf.raw_ops.LowerBound"". The Tensorflow team has patched the issue in GitHub commit 42459e4273c2e47a3232cc16c4f4fff3b3a35c38.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7
https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38"
973,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37679,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37679:
In affected versions it is possible to nest a ""tf.map_fn"" within another ""tf.map_fn"" call. However, if the input tensor is a ""RaggedTensor"" and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The ""t"" and ""z"" outputs should be identical, however this is not the case. The last row of ""t"" contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a ""Variant"" tensor to a ""RaggedTensor"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. The Tensorflow team has patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp
https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
974,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22897,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
975,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-22876,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
976,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37673,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37673:
In affected versions, an attacker can trigger a denial of service via a ""CHECK""-fail in ""tf.raw_ops.MapStage"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the ""key"" input is a valid non-empty tensor. The Tensorflow team has patched the issue in GitHub commit d7de67733925de196ec8863a33445b73f9562d1d.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg
https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d"
977,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37674,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in 'tf.raw_ops.MaxPoolGrad' caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the 'orig_input' and 'orig_output' tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
978,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-37678,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.7.0rc0,<2.7.0","Tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:
In affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses ""yaml.unsafe_load"" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r
https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012"
979,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41211,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41211: In affected versions, the shape inference code for 'QuantizeV2' can trigger a read outside of bounds of heap allocated array. This occurs whenever 'axis' is a negative value less than '-1'. In this case, we are accessing data before the start of a heap buffer. The code allows 'axis' to be an optional argument ('s' would contain an 'error::NOT_FOUND' error code). Otherwise, it assumes that 'axis' is a valid index into the dimensions of the 'input' tensor. If 'axis' is less than '-1' then this results in a heap OOB read. The fix is included in TensorFlow 2.7.0. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c
https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244"
980,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2021-41220,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41220: In affected versions, the async implementation of 'CollectiveReduceV2' suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been 'std::move()'d are still accessed. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5
https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
981,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23594,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered."
982,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23590,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.7.1 and 2.8.0 include a fix for CVE-2022-23590: A 'GraphDef' from a TensorFlow 'SavedModel' can be maliciously altered to cause a TensorFlow process to crash due to encountering a 'StatusOr' value that is an error and forcibly extracting the value from it.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278"
983,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23592,">=2.8.0a0,<2.8.0","Tensorflow version 2.8.0 includes a fix for CVE-2022-23592: TensorFlow's type inference can cause a heap out of bounds read as the bounds checking is done in a 'DCHECK' (which is a no-op during production). An attacker can control the 'input_idx' variable such that 'ix' would be larger than the number of values in 'node_t.args'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq36-27g6-p492"
984,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-23593,">=2.8.0a0,<2.8.0","Tensorflow 2.8.0 includes a fix for CVE-2022-23593: The 'simplifyBroadcast' function in the MLIR-TFRT infrastructure in TensorFlow is vulnerable to a segfault (hence, denial of service), if called with scalar shapes. If all shapes are scalar, then 'maxRank' is 0, so we build an empty 'SmallVector'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gwcx-jrx4-92w2"
985,tensorflow,>=2.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/requirements/requirements-tf2.txt,False,CVE-2022-29210,">=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","TensorFlow is an open source platform for machine learning. In version 2.8.0, the 'TensorKey' hash function used total estimated 'AllocatedBytes()', which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. 'int32_t'). It also tried to access individual tensor bytes through 'tensor.data()' of size 'AllocatedBytes()'. This led to ASAN failures because the 'AllocatedBytes()' is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the '.data()' buffer. The discoverers could not use this byte vector anyway because types such as 'tstring' include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."
986,nose,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,no one,no one,no one
987,pycodestyle,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,True,no one,no one,no one
988,scipy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2013-4251,">=0,<0.12.1",The scipy.weave component in SciPy before 0.12.1 creates insecure temporary directories.
989,matplotlib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,no one,no one,no one
990,mnist,~= 0.2,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,True,no one,no one,no one
991,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2017-12852,<1.13.2,"Numpy 1.13.2 includes a fix for CVE-2017-12852: The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.
https://github.com/numpy/numpy/issues/9560#issuecomment-322395292"
992,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-6446,<1.16.3,"Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.
https://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb"
993,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
994,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
995,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
996,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
997,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2014-1859,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1859: (1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/pull/4262"
998,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2014-1858,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1858: __init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15"
999,tensorflow-probability,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,no one,no one,no one
1000,joblib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,PVE-2022-51394,<1.1.1,"Joblib 1.1.1 fixes a security issue where 'eval(pre_dispatch)' could potentially run arbitrary code. Now only basic numerics are supported.
https://github.com/joblib/joblib/pull/1327"
1001,joblib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21797,<1.2.0,"Joblib 1.2.0 includes a fix for CVE-2022-21797: The package joblib from 0 and before 1.2.0 is vulnerable to Arbitrary Code Execution via the pre_dispatch flag in Parallel() class due to the eval() statement.
https://github.com/joblib/joblib/issues/1128"
1002,joblib,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,PVE-2022-51041,<1.2.0,"Joblib 1.2.0 fixes a security issue where 'eval(pre_dispatch)' could potentially run arbitrary code. Now only basic numerics are supported.
https://github.com/joblib/joblib/pull/1327"
1003,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,PVE-2021-36375,<1.10.0,tensorflow before 1.10.0 uses an insecure grpc dependency.
1004,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-9635,<1.12.2,NULL pointer dereference in Google TensorFlow before 1.12.2 could cause a denial of service via an invalid GIF file. See CVE-2019-9635.
1005,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-16778,<1.15,"Tensorflow 1.15 includes a fix for CVE-2019-16778: In TensorFlow before 1.15, a heap buffer overflow in UnsortedSegmentSum can be produced when the Index template argument is int32. In this case data_size and num_segments fields are truncated from int64 to int32 and can produce negative numbers, resulting in accessing out of bounds heap memory. This is unlikely to be exploitable and was detected and fixed internally in TensorFlow 1.15 and 2.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-844w-j86r-4x2j
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2019-002.md
https://github.com/tensorflow/tensorflow/commit/db4f9717c41bccc3ce10099ab61996b246099892"
1006,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,PVE-2021-37524,<1.15.0,"The original changelog reads: ""Tensorflow 2.0 fixes a potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access."" However, it was later confirmed that the fix was already included in 1.15 and later. See: <https://github.com/tensorflow/tensorflow/issues/37701>."
1007,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19244,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite3"" to handle CVE-2019-19244."
1008,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19880,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""SQLite3"" to handle CVE-2019-19880."
1009,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-10099,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2019-10099."
1010,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-19664,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-19664."
1011,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-13960,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2019-13960."
1012,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-11770,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""Apache Spark"" to handle CVE-2018-11770."
1013,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-20330,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-20330."
1014,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19645,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite"" to handle CVE-2019-19645."
1015,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-17190,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2018-17190."
1016,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15208,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15208: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a ""DCHECK"" which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue was patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d"
1017,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15202,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15202: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'Shard' API in TensorFlow expects the last argument to be a function taking two 'int64' (i.e., 'long long') arguments. However, there are several places in TensorFlow where a lambda taking 'int' or 'int32' arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4"
1018,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15190,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15190: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the ""tf.raw_ops.Switch"" operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor. However, the eager runtime traverses all tensors in the output. Since only one of the tensors is defined, the other one is ""nullptr"", hence we are binding a reference to ""nullptr"". This is undefined behavior and reported as an error if compiling with ""-fsanitize=null"". In this case, this results in a segmentation fault The issue was patched in commit da8558533d925694483d2c136a9220d6d49d843c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4g9f-63rx-5cw4"
1019,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15209,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15209: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a ""nullptr"" buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with ""nullptr"". However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue was patched in commit 0b5662bc."
1020,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15207,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34"
1021,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15205,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15205: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'data_splits' argument of 'tf.raw_ops.StringNGrams' lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory In the linked code snippet, all the binary strings after 'ee ff' are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46"
1022,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15195,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15195: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of 'SparseFillEmptyRowsGrad' uses a double indexing pattern. It is possible for 'reverse_index_map(i)' to be an index outside of bounds of 'grad_values', thus resulting in a heap buffer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr"
1023,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15204,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15204: In eager mode, TensorFlow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 does not set the session state. Hence, calling ""tf.raw_ops.GetSessionHandle"" or ""tf.raw_ops.GetSessionHandleV2"" results in a null pointer dereference In linked snippet, in eager mode, ""ctx->session_state()"" returns ""nullptr"". Since code immediately dereferences this, we get a segmentation fault. The issue was patched in commit 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1"
1024,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15203,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15203: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the 'fill' argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a 'printf' call is constructed. This may result in segmentation fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
1025,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15206,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15206: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's ""SavedModel"" protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using ""tensorflow-serving"" or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d. However, this was not enough, as #41097 reported a different failure mode. The issue was finally patched in commit df095206f25471e864a8e63a0f1caef53a0e3a6"
1026,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15211,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15211: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative ""-1"" value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the ""-1"" index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue was patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). A potential workaround would be to add a custom ""Verifier"" to the model loading code to ensure that only operators which accept optional inputs use the ""-1"" special value and only for the tensors that they expect to be optional. Since this allow-list type approach is error-prone, it's advised upgrading to the patched code."
1027,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13631,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13631."
1028,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13435,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13435."
1029,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13630,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13630."
1030,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13871,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13871."
1031,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13434,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13434."
1032,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-9327,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-9327."
1033,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-11655,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11655."
1034,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-11656,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11656."
1035,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15210,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15210: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2"
1036,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15194,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow 2.4.0 includes a fix for CVE-2020-15194: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments. Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."""
1037,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-14155,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2 and 2.3.2 update its dependency ""PCRE"" to handle CVE-2020-14155."
1038,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15250,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency 'Junit4' to v4.13.1 to include a security fix."
1039,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-20838,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency ""PCRE"" to fix CVE-2019-20838."
1040,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13790,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 updates its dependency ""Libjpeg-turbo"" to handle CVE-2020-13790."
1041,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26270,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26270: In affected versions, running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a CHECK failure when using the CUDA backend. This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer."
1042,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26266,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","TensorFlow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0 includes a fix for CVE-2020-26266: In affected versions and under certain cases a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers filled with the default value of the type but forgetting to default initialize the quantized floating point types in Eigen."
1043,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26271,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26271: In affected versions, under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library."
1044,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26267,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26267: In affected versions, the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes."
1045,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26268,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden."
1046,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-7576,<1.6.0a1,Google TensorFlow 1.6.x and earlier is affected by: Null Pointer Dereference. The type of exploitation is: context-dependent. See CVE-2018-7576.
1047,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-21233,<1.7.0,"TensorFlow before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in core/kernels/decode_bmp_op.cc. See CVE-2018-21233."
1048,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-7575,<1.7.0a1,Google TensorFlow 1.7.x and earlier is affected by a Buffer Overflow vulnerability. The type of exploitation is context-dependent. See CVE-2018-7575.
1049,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-7577,<1.7.1,"Memcpy parameter overlap in Google Snappy library 1.1.4, as used in Google TensorFlow before 1.7.1, could result in a crash or read from other parts of process memory. See CVE-2018-7577."
1050,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-10055,<1.7.1,Invalid memory access and/or a heap buffer overflow in the TensorFlow XLA compiler in Google TensorFlow before 1.7.1 could cause a crash or read from other parts of process memory via a crafted configuration file. See CVE-2018-10055.
1051,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25661,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25661: In versions prior to 2.11.1 a malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. A proof of concept can be constructed with the 'Convolution3DTranspose' function. This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services. An attacker must have privilege to provide input to a 'Convolution3DTranspose' call.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq"
1052,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25665,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25665: Prior to versions 2.12.0 and 2.11.1, when 'SparseSparseMaximum' is given invalid sparse tensors as inputs, it can give a null pointer error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-558h-mq8x-7q9g"
1053,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25671,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25671: There is out-of-bounds access due to mismatched integer type sizes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j5w9-hmfh-4cr6"
1054,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25658,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25658: Prior to versions 2.12.0 and 2.11.1, an out of bounds read is in GRUBlockCellGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-68v3-g9cm-rmm6"
1055,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25801,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25801: Prior to versions 2.12.0 and 2.11.1, 'nn_ops.fractional_avg_pool_v2' and 'nn_ops.fractional_max_pool_v2' require the first and fourth elements of their parameter 'pooling_ratio' to be equal to 1.0, as pooling on batch and channel dimensions is not supported.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f49c-87jh-g47q"
1056,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-27579,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-27579: Constructing a tflite model with a paramater 'filter_input_channel' of less than 1 gives a FPE.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5w96-866f-6rm8"
1057,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25672,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25672: The function 'tf.raw_ops.LookupTableImportV2' cannot handle scalars in the 'values' parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
1058,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25676,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25676: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.ParallelConcat' segfaults with a nullptr dereference when given a parameter 'shape' with rank that is not greater than zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6wfh-89q8-44jq"
1059,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25666,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25666: Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f637-vh3r-vfh2"
1060,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25667,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25667: Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when '2^31 <= num_frames * height * width * channels < 2^32', for example Full HD screencast of at least 346 frames.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68"
1061,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25673,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25673: Versions prior to 2.12.0 and 2.11.1 have a Floating Point Exception in TensorListSplit with XLA. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
1062,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25674,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25674: Versions prior to 2.12.0 and 2.11.1 have a null pointer error in RandomShuffle with XLA enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf97-q72m-7579"
1063,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25670,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25670: Versions prior to 2.12.0 and 2.11.1 have a null point error in QuantizedMatMulWithBiasAndDequantize with MKL enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rq-hwc3-x77w"
1064,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25668,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25668: Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96"
1065,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25664,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25664: Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hg6-5c2q-7rcr"
1066,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25663,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25663: Prior to versions 2.12.0 and 2.11.1, when 'ctx->step_containter()' is a null ptr, the Lookup function will be executed with a null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-64jg-wjww-7c5w"
1067,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25660,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25660: Prior to versions 2.12.0 and 2.11.1, when the parameter 'summarize' of 'tf.raw_ops.Print' is zero, the new method 'SummarizeArray<bool>' will reference to a nullptr, leading to a seg fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj"
1068,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25675,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25675: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.Bincount' segfaults when given a parameter 'weights' that is neither the same shape as parameter 'arr' nor a length-0 tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7x4v-9gxg-9hwj"
1069,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25669,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25669: Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for 'tf.raw_ops.AvgPoolGrad', it can give a floating point exception.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rcf8-g8jv-vg6p"
1070,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25662,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25662: Versions prior to 2.12.0 and 2.11.1 are vulnerable to integer overflow in EditDistance.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7jvm-xxmr-v5cw"
1071,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25659,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25659: Prior to versions 2.12.0 and 2.11.1, if the parameter 'indices' for 'DynamicStitch' does not match the shape of the parameter 'data', it can trigger an stack OOB read.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p"
1072,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15266,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15266: In Tensorflow before version 2.4.0, when the 'boxes' argument of 'tf.image.crop_and_resize' has a very large value, the CPU kernel implementation receives it as a C++ 'nan' floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.
https://github.com/tensorflow/tensorflow/issues/42129
https://github.com/tensorflow/tensorflow/pull/42143/commits/3ade2efec2e90c6237de32a19680caaa3ebc2845
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xwhf-g6j5-j5gc"
1073,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15265,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
1074,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41210,"<2.4.4,>=2.5.0rc0,<2.5.2, >=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41210: In affected versions, the shape inference functions for 'SparseCountSparseOutput' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc
https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2"
1075,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41196,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41196: In affected versions, the Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative. This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8"
1076,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41195,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41195: In affected versions, the implementation of 'tf.math.segment_*' operations results in a 'CHECK'-fail related abort (and denial of service) if a segment id in 'segment_ids' is large. This is similar to CVE-2021-29584 (and similar to other reported vulnerabilities in TensorFlow localized to specific APIs): the implementation (both on CPU and GPU) computes the output shape using 'AddDim'. However, if the number of elements in the tensor overflows an 'int64_t' value, 'AddDim' results in a 'CHECK' failure which provokes a 'std::abort'. Instead, code should use 'AddDimWithStatus'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh"
1077,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22925,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22925."
1078,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41217,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41217: In affected versions, the process of building the control flow graph for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not. This occurs because the code assumes that the first node in the pairing (e.g., an 'Enter' node) always exists when encountering the second node (e.g., an 'Exit' node). When this is not the case, 'parent' is 'nullptr' so dereferencing it causes a crash. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5crj-c72x-m7gq
https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff"
1079,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41228,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41228: In affected versions, TensorFlow's 'saved_model_cli' tool is vulnerable to a code injection as it calls 'eval' on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. The issue has been patched by adding a 'safe' flag which defaults to 'True' and an explicit warning for users.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v
https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7"
1080,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41215,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41215: In affected versions, the shape inference code for 'DeserializeSparse' can trigger a null pointer dereference. This is because the shape inference function assumes that the 'serialize_sparse' tensor is a tensor with positive rank (and having '3' as the last dimension). The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r
https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850"
1081,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41216,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41216: In affected versions, the shape inference function for 'Transpose' is vulnerable to a heap buffer overflow. This occurs whenever 'perm' contains negative elements. The shape inference function does not validate that the indices in 'perm' are all valid. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9
https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14"
1082,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22924,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22924."
1083,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22923,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22923."
1084,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41226,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41226: In affected versions, the implementation of 'SparseBinCount' is vulnerable to a heap OOB access. This is because of missing validation between the elements of the 'values' argument and the shape of the sparse output. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-374m-jm66-3vj8
https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba"
1085,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41200,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41200: In affected versions, if 'tf.summary.create_file_writer' is called with non-scalar arguments, code crashes due to a 'CHECK'-fail. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f"
1086,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41218,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41218: In affected versions, the shape inference code for 'AllToAll' can be made to execute a division by 0. This occurs whenever the 'split_count' argument is 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273
https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc"
1087,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41223,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41223: In affected versions, the implementation of 'FusedBatchNorm' kernels is vulnerable to a heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr
https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda"
1088,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41224,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41224: In affected versions, the implementation of 'SparseFillEmptyRows' can be made to trigger a heap OOB access. This occurs whenever the size of 'indices' does not match the size of 'values'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v
https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b"
1089,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41219,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41219: In affected versions, the code for sparse matrix multiplication is vulnerable to undefined behavior via binding a reference to 'nullptr'. This occurs whenever the dimensions of 'a' or 'b' are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, it should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x
https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae"
1090,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41202,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41202: In affected versions, while calculating the size of the output within the 'tf.range' kernel, there is a conditional statement of type 'int64 = condition ? int64 : double'. Due to C++ implicit conversion rules, both branches of the condition will be cast to 'double' and the result would be truncated before the assignment. This result in overflows. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx"
1091,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41221,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41221: In affected versions, the shape inference code for the 'Cudnn*' operations can be tricked into accessing invalid memory via a heap buffer overflow. This occurs because the ranks of the 'input', 'input_h' and 'input_c' parameters are not validated, but code assumes they have certain values. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx
https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6"
1092,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41203,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41203: In affected versions, an attacker can trigger undefined behavior, integer overflows, segfaults and 'CHECK'-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7pxj-m4jf-r6h2"
1093,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41222,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41222: In affected versions, the implementation of 'SplitV' can trigger a segfault if an attacker supplies negative arguments. This occurs whenever 'size_splits' contains more than one value and at least one value is negative. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6
https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6"
1094,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22922,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22922."
1095,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41227,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41227: In affected versions, the 'ImmutableConst' operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the 'tstring' TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7
https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b
https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585"
1096,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41201,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41201: In affected versions, during execution, 'EinsumHelper::ParseEquation()' is supposed to set the flags in 'input_has_ellipsis' vector and '*output_has_ellipsis' boolean to indicate whether there is ellipsis in the corresponding inputs and output. However, the code only changes these flags to 'true' and never assigns 'false'. This results in unitialized variable access if callers assume that 'EinsumHelper::ParseEquation()' always sets these flags. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j86v-p27c-73fm
https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6"
1097,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22926,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22926."
1098,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41205,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41205: In affected versions, the shape inference functions for the 'QuantizeAndDequantizeV*' operations can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f
https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d"
1099,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41214,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41214: In affected versions, the shape inference code for 'tf.ragged.cross' has an undefined behavior due to binding a reference to 'nullptr'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
1100,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41207,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41207: In affected versions, the implementation of 'ParallelConcat' misses some input validation and can produce a division by 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
1101,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41204,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41204: In affected versions, during TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-786j-5qwq-r36x
https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659"
1102,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41213,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf
https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7"
1103,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41212,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41212: In affected versions, the shape inference code for 'tf.ragged.cross' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
1104,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41225,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41225: In affected versions, TensorFlow's Grappler optimizer has a use of unitialized variable. If the 'train_nodes' vector (obtained from the saved model that gets optimized) does not contain a 'Dequeue' node, then 'dequeue_node' is left unitialized. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw
https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"
1105,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41198,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41198: In affected versions, if 'tf.tile' is called with a large input argument, then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q"
1106,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41209,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41209: In affected versions, the implementations for convolution operators trigger a division by 0 if passed empty filter tensor arguments. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hpv-v2rx-c5g6
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
1107,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41199,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41199: In affected versions, if 'tf.image.resize' is called with a large input argument then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm"
1108,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-10531,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 update its dependency 'icu' to v69.1 to include a security fix."
1109,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23591,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The 'GraphDef' format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a 'GraphDef' containing a fragment such as the following can be consumed when loading a 'SavedModel'. This would result in a stack overflow during execution as resolving each 'NodeDef' means resolving the function itself and its nodes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1110,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23576,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1111,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23585,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding PNG images TensorFlow can produce a memory leak if the image is invalid. After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1112,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23578,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. If a graph node is invalid, TensorFlow can leak memory in the implementation of `ImmutableExecutorState::Initialize`. Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1113,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23583,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1114,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23567,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23567: The implementations of 'Sparse*Cwise*' ops are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or 'CHECK'-fails when building new 'TensorShape' objects (so, assert failures based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43"
1115,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23574,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. There is a typo in TensorFlow's `SpecializeType` which results in heap OOB read/write. Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
1116,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23571,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1117,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23589,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place). First, during constant folding, the `GraphDef` might not have the required nodes for the binary operation. If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect. We have a similar issue during `IsIdentityConsumingSwitch`. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1118,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23586,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1119,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21733,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21733: The implementation of 'StringNGrams' can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. There is missing a validation on 'pad_witdh' and that result in computing a negative value for 'ngram_width' which is later used to allocate parts of the output.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g"
1120,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23587,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1121,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21735,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21735: The implementation of 'FractionalMaxPool' can be made to crash a TensorFlow process via a division by 0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj"
1122,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23577,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `GetInitOp` is vulnerable to a crash caused by dereferencing a null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1123,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23566,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. TensorFlow is vulnerable to a heap OOB write in `Grappler`. The `set_output` function writes to an array at the specified index. Hence, this gives a malicious user a write primitive. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1124,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23562,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23562: The implementation of 'Range' suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr"
1125,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23572,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
1126,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23588,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1127,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23579,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23579: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'SafeToRemoveIdentity' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5f2r-qp73-37mr"
1128,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23569,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23569: Multiple operations in TensorFlow can be used to trigger a denial of service via 'CHECK'-fails (i.e., assertion failures). This is similar to CVE-2021-41197 and has a similar fix. It is possible that other similar instances exist.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qj5r-f9mv-rffh"
1129,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23575,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1130,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23580,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23580: During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-627q-g293-49q7"
1131,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21732,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21732: The implementation of 'ThreadPoolHandle' can be used to trigger a denial of service attack by allocating too much memory. This is because the 'num_threads' argument is only checked to not be negative, but there is no upper bound on its value.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq"
1132,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21740,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21740: The implementation of 'SparseCountSparseOutput' is vulnerable to a heap overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-44qp-9wwf-734r"
1133,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23595,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23595: When building an XLA compilation cache, if default settings are used, TensorFlow triggers a null pointer dereference. In the default scenario, all devices are allowed, so 'flr->config_proto' is 'nullptr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fpcp-9h7m-ffpx"
1134,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23581,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23581: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'IsSimplifiableReshape' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq86-3f29-px2c"
1135,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21739,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21739: The implementation of 'QuantizedMaxPool' has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5"
1136,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23564,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23564: When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a 'CHECK' assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3"
1137,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23565,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23565: An attacker can trigger denial of service via assertion failure by altering a 'SavedModel' on disk such that 'AttrDef's of some operation are duplicated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4v5p-v5h9-6xjx"
1138,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21741,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21741: An attacker can craft a TFLite model that would trigger a division by zero in the implementation of depthwise convolutions. The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is strictly positive.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-428x-9xc2-m8mj"
1139,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21726,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21726: The implementation of 'Dequantize' does not fully validate the value of 'axis' and can result in heap OOB accesses. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72"
1140,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23557,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23557: An attacker can craft a TFLite model that would trigger a division by zero in 'BiasAndClamp' implementation. There is no check that the 'bias_size' is non zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf2j-f278-xh4v"
1141,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21728,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
1142,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23568,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23568: The implementation of 'AddManySparseToTensorsMap' is vulnerable to an integer overflow which results in a 'CHECK'-fail when building new 'TensorShape' objects (so, an assert failure based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2"
1143,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23563,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23563: In multiple places, TensorFlow uses 'tempfile.mktemp' to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in 'mktemp' and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the 'mktemp' function usage. It was replaced 'mktemp' with the safer 'mkstemp'/'mkdtemp' functions, according to the usage pattern.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wc4g-r73w-x8mm"
1144,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21730,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21730: The implementation of 'FractionalAvgPoolGrad' does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4"
1145,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21736,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21736: The implementation of 'SparseTensorSliceDataset' has an undefined behavior: under certain conditions, it can be made to dereference a 'nullptr' value. The 3 input arguments to 'SparseTensorSliceDataset' represent a sparse tensor. However, there are some preconditions that these arguments must satisfy, but these are not validated in the implementation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9"
1146,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23570,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
1147,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23558,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23558: An attacker can craft a TFLite model that would cause an integer overflow in 'TfLiteIntArrayCreate'. The 'TfLiteIntArrayGetSizeInBytes' returns an 'int' instead of a 'size_t'. An attacker can control model inputs such that 'computed_size' overflows the size of 'int' datatype.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9gwq-6cwj-47h3"
1148,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23559,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23559: An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both 'embedding_size' and 'lookup_size' are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98p5-x8x4-c9m5"
1149,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21727,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21727: The implementation of shape inference for 'Dequantize' is vulnerable to an integer overflow weakness. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes 'axis + 1', an attacker can trigger an integer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw"
1150,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21725,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21725: The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f"
1151,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21738,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21738: The implementation of 'SparseCountSparseOutput' can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6"
1152,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23584,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1153,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23582,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23582: A malicious user can cause a denial of service by altering a 'SavedModel' such that 'TensorByteSize' would trigger 'CHECK' failures. 'TensorShape' constructor throws a 'CHECK'-fail if shape is partial or has a number of elements that would overflow the size of an 'int'. The 'PartialTensorShape' constructor instead does not cause a 'CHECK'-abort if the shape is partial, which is exactly what this function needs to be able to return '-1'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4j82-5ccr-4r8v"
1154,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23561,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23561: An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c78-vcq7-7vxq"
1155,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21731,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21731: The implementation of shape inference for 'ConcatV2' can be used to trigger a denial of service attack via a segfault caused by a type confusion. The 'axis' argument is translated into 'concat_dim' in the 'ConcatShapeHelper' helper function. Then, a value for 'min_rank' is computed based on 'concat_dim'. This is then used to validate that the 'values' tensor has at least the required rank. However, 'WithRankAtLeast' receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented. Due to the fact that 'min_rank' is a 32-bits value and the value of 'axis', the 'rank' argument is a negative value, so the error check is bypassed.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
1156,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21734,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21734: The implementation of 'MapStage' is vulnerable to a 'CHECK'-fail if the key tensor is not a scalar.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm"
1157,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23573,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1158,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21737,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21737: The implementation of '*Bincount' operations allows malicious users to cause denial of service by passing in arguments which would trigger a 'CHECK'-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in 'CHECK' failures later when the output tensors get allocated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2vv-v9cg-qhh7"
1159,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21729,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21729: The implementation of 'UnravelIndex' is vulnerable to a division by zero caused by an integer overflow bug.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j"
1160,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23560,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23560: An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4hvf-hxvg-f67v"
1161,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41208,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41208: In affected versions, the code for boosted trees in TensorFlow is still missing validation. As a result, attackers can trigger denial of service (via dereferencing 'nullptr's or via 'CHECK'-failures) as well as abuse undefined behavior (binding references to 'nullptr's). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call. Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs. TensorFlow's boosted trees APIs will be deprecated in subsequent releases.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-57wx-m983-2f88
https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6gw-r52c-724r"
1162,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41206,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41206: In affected versions, several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or 'CHECK'-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. These issues were discovered internally via tooling while working on improving/testing GPU op determinism. As such, there aren't reproducers and there will be multiple fixes for these issues.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pgcq-h79j-2f69
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x"
1163,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27775,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27775."
1164,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29193,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29193: missing validation which causes 'TensorSummaryV2' to crash."
1165,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27776,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27776."
1166,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29196,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29196: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
1167,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29197: Missing validation which causes denial of service via 'UnsortedSegmentJoin'."
1168,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27779,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27779."
1169,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29202,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29202: Denial of service in 'tf.ragged.constant' due to lack of validation."
1170,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29201,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29201: Missing validation which results in undefined behavior in 'QuantizedConv2D'."
1171,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29206,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29206: Missing validation which results in undefined behavior in 'SparseTensorDenseAdd'."
1172,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27778,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27778."
1173,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29204,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29204: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
1174,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29199,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29199: Missing validation which causes denial of service via 'LoadAndRemapMatrix'."
1175,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29213,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29213: Crashes stemming from incomplete validation in signal ops."
1176,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29211,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29211: Segfault when 'tf.histogram_fixed_width' is called with NaN values."
1177,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27780,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27780."
1178,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29205,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29205: Segfault due to missing support for quantized types."
1179,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-22576,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-22576."
1180,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29209,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29209: Type confusion leading to 'CHECK'-failure based denial of service."
1181,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27782,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27782."
1182,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29195,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29195: Missing validation which causes denial of service via 'StagePeek'."
1183,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29216,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29216: Code injection in 'saved_model_cli'."
1184,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29200,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29200: Missing validation which causes denial of service via 'LSTMBlockCell'."
1185,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29198,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29198:  Missing validation which causes denial of service via 'SparseTensorToCSRSparseMatrix'."
1186,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29207,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29207: Issues arising from undefined behavior stemming from users supplying invalid resource handles."
1187,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29208,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29208: Segfault and OOB write due to incomplete validation in 'EditDistance'."
1188,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29194,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29194: Missing validation which causes denial of service via 'DeleteSessionTensor'."
1189,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27781,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27781."
1190,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-30115,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-30115."
1191,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2021-41197: Affected versions allow tensors to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an 'int64_t'. If an overflow occurs, 'MultiplyWithoutOverflow' would return a negative result. In the majority of TensorFlow codebase this then results in a 'CHECK'-failure. Newer constructs exist which return a 'Status' instead of crashing the binary. This is similar to CVE-2021-29584.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-vrvr-3rx2
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mw6j-hh29-h379"
1192,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-25032,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'zlib' to v1.2.12 to handle CVE-2018-25032."
1193,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27774,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27774."
1194,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29192,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29192: missing validation which crashes 'QuantizeAndDequantizeV4Grad'."
1195,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29191,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29191: Missing validation which causes denial of service via 'GetSessionTensor'."
1196,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29212,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29212: Core dump when loading TFLite models with quantization."
1197,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29203,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29203: Integer overflow in 'SpaceToBatchND'."
1198,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35985,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35985: 'CHECK' fail in 'LRNGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp"
1199,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35971,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35971: 'CHECK' fail in 'FakeQuantWithMinMaxVars'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7"
1200,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35952,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35952: 'CHECK' failures in 'UnbatchGradOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47"
1201,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35979,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35979: Segfault in 'QuantizedRelu' and 'QuantizedRelu6'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x"
1202,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36002,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36002: 'CHECK' fail in 'Unbatch'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg"
1203,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35996,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35996: Floating point exception in 'Conv2D'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37"
1204,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35959,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35959: 'CHECK' failures in 'AvgPool3DGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq"
1205,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35990,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35990: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannelGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh"
1206,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35983,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35983: 'CHECK' fail in 'Save' and 'SaveSlices'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4"
1207,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35974,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35974: Segfault in 'QuantizeDownAndShrinkRange'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x"
1208,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36019,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36019: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannel'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7"
1209,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35994,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35994: 'CHECK' fail in 'CollectiveGather'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f"
1210,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36014,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36014: Null-dereference in 'mlir::tfg::TFOp::nameAttr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7j3m-8g3c-9qqq"
1211,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35964,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35964: Segfault in 'BlockLSTMGradV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668"
1212,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35987,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35987: 'CHECK' fail in 'DenseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49"
1213,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36011,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36011: Null dereference on MLIR on empty function attributes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv43-93gv-vm8f"
1214,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36027,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36027: Segfault TFLite converter on per-channel quantized transposed convolutions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr"
1215,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35972,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35972: Segfault in 'QuantizedBiasAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9"
1216,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35968,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35968: 'CHECK' fail in 'AvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25"
1217,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35941,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35941: 'CHECK' failure in 'AvgPoolOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5"
1218,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35940,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35940: Int overflow in 'RaggedRangeOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x"
1219,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35939,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35939: OOB write in 'scatter_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf"
1220,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35997,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35997: 'CHECK' fail in 'tf.sparse.cross'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf"
1221,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36016,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36016: 'CHECK'-fail in 'tensorflow::full_type::SubstituteFromAttrs'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g468-qj8g-vcjc"
1222,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35937,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35937: OOB read in 'Gather_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h"
1223,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35963,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35963: 'CHECK' failures in 'FractionalAvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm"
1224,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36015,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36015: Integer overflow in math ops. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rh87-q4vg-m45j"
1225,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35984,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35984: 'CHECK' fail in 'ParameterizedTruncatedNormal'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5"
1226,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36013,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36013: Null-dereference in 'mlir::tfg::GraphDefImporter::ConvertNodeDef'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828c-5j5q-vrjq"
1227,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35981,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35981: 'CHECK' fail in 'FractionalMaxPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw"
1228,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35960,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35960: 'CHECK' failure in 'TensorListReserve' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4"
1229,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36017,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36017: Segfault in 'Requantize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc"
1230,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35969,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35969: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx"
1231,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36012,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36012: Assertion fail on MLIR empty edge names.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jvhc-5hhr-w3v5"
1232,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36000,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36000: 'CHECK' fail in 'Eig'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v"
1233,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35986,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35986: Segfault in 'RaggedBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v"
1234,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35973,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35973: Segfault in 'QuantizedMatMul'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v"
1235,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36026,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36026: 'CHECK' fail in 'QuantizeAndDequantizeV3'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq"
1236,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35966,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35966: Segfault in 'QuantizedAvgPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9"
1237,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35993,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35993: 'CHECK' fail in 'SetSize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9"
1238,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35988,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35988: 'CHECK' fail in 'tf.linalg.matrix_rank'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c"
1239,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35965,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35965: Segfault in 'LowerBound' and 'UpperBound'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36"
1240,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35967,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35967: Segfault in 'QuantizedAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x"
1241,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35970,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35970: Segfault in 'QuantizedInstanceNorm'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp"
1242,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35995,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35995: 'CHECK' fail in 'AudioSummaryV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4"
1243,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36004,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36004: 'CHECK' fail in 'tf.random.gamma'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q"
1244,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36018,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36018: 'CHECK' fail in 'RaggedTensorToVariant'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf"
1245,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36003,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36003: 'CHECK' fail in 'RandomPoissonV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq"
1246,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35934,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35934: 'CHECK' failure in tf.reshape via overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45"
1247,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35998,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35998: 'CHECK' fail in 'EmptyTensorList'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5"
1248,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35992,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35992: 'CHECK' fail in 'TensorListFromTensor'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp"
1249,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35982,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35982: Segfault in 'SparseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv"
1250,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36001,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36001: 'CHECK' fail in 'DrawBoundingBoxes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5"
1251,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35999,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35999: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw"
1252,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35989,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35989: 'CHECK' fail in 'MaxPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq"
1253,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36005,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36005: 'CHECK' fail in 'FakeQuantWithMinMaxVarsGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm"
1254,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41893,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41893: If 'tf.raw_ops.TensorListResize' is given a nonscalar value for input 'size', it results 'CHECK' fail which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-67pf-62xr-q35m"
1255,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41894,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41894: The reference kernel of the 'CONV_3D_TRANSPOSE' TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. Instead of 'data_ptr += num_channels;' it should be 'data_ptr += output_num_channels;' as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels > output_num_channels. An attacker can craft a model with a specific number of input channels. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6q3-vv32-2cq5"
1256,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41880,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41880: When the 'BaseCandidateSamplerOp' function receives a value in 'true_classes' larger than 'range_max', a heap oob read occurs.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j"
1257,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41897,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41897: If 'FractionMaxPoolGrad' is given outsize inputs 'row_pooling_sequence' and 'col_pooling_sequence', TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2w8-jw48-fr7j"
1258,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41898,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41898: If 'SparseFillEmptyRowsGrad' is given empty inputs, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hq7g-wwwp-q46h"
1259,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41884,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41884: If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jq6x-99hj-q636"
1260,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41888,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41888: When running on GPU, 'tf.image.generate_bounding_box_proposals' receives a 'scores' input that must be of rank 4 but is not checked.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6x99-gv2v-q76v"
1261,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41910,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41910: The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-frqp-wp83-qggv"
1262,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41901,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41901: An input 'sparse_matrix' that is not a matrix with a shape with rank 0 will trigger a 'CHECK' fail in 'tf.raw_ops.SparseMatrixNNZ'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9fm-r5mm-rf9f"
1263,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41900,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41900: The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472"
1264,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41911,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41911: When printing a tensor, we get it's data as a 'const char*' array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from 'char' to 'bool' are undefined if the 'char' is not '0' or '1', so sanitizers/fuzzers will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pf36-r9c6-h97j"
1265,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41896,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41896: If 'ThreadUnsafeUnigramCandidateSampler' is given input 'filterbank_channel_count' greater than the allowed max size, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35"
1266,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41902,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."
1267,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41895,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41895: If 'MirrorPadGrad' is given outsize input 'paddings', TensorFlow will give a heap OOB error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gq2j-cr96-gvqx"
1268,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41891,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41891: If 'tf.raw_ops.TensorListConcat' is given 'element_shape=[]', it results segmentation fault which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-66vq-54fq-6jvv"
1269,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41889,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41889: If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a 'nullptr', which is not caught. An example can be seen in 'tf.compat.v1.extract_volume_patches' by passing in quantized tensors as input 'ksizes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xxcj-rhqg-m46g"
1270,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41885,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41885: When 'tf.raw_ops.FusedResizeAndPadConv2D' is given a large tensor shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-762h-vpvw-3rcx"
1271,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41908,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41908: TensorFlow is an open source platform for machine learning. An input 'token' that is not a UTF-8 bytestring will trigger a 'CHECK' fail in 'tf.raw_ops.PyFunc'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv77-9g28-cwg3"
1272,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41890,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41890: If 'BCast::ToShape' is given input larger than an 'int32', it will crash, despite being supposed to handle up to an 'int64'. An example can be seen in 'tf.experimental.numpy.outer' by passing in large input to the input 'b'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h246-cgh4-7475"
1273,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41907,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41907: When 'tf.raw_ops.ResizeNearestNeighborGrad' is given a large 'size' input, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-368v-7v32-52fx"
1274,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41886,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41886: When 'tf.raw_ops.ImageProjectiveTransformV2' is given a large output shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-54pp-c6pp-7fpx"
1275,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41899,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41899: TensorFlow is an open source platform for machine learning. Inputs 'dense_features' or 'example_state_data' not of rank 2 will trigger a 'CHECK' fail in 'SdcaOptimizer'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27rc-728f-x5w2"
1276,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41909,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41909: An input 'encoded' that is not a valid 'CompositeTensorVariant' tensor will trigger a segfault in 'tf.raw_ops.CompositeTensorVariantToComponents'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjx6-v474-2ch9"
1277,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35935,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35935: 'CHECK' failure in 'SobolSample' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqvq-fvhr-v6hc"
1278,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35991,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35991: 'CHECK' fail in 'TensorListScatter' and 'TensorListScatterV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xf83-q765-xm6m"
1279,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41887,"<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.9.3 and 2.10.1 include a fix for CVE-2022-41887: 'tf.keras.losses.poisson' receives a 'y_pred' and 'y_true' that are passed through 'functor::mul' in 'BinaryOp'. If the resulting dimensions overflow an 'int32', TensorFlow will crash due to a size mismatch during broadcast assignment.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fvv-46hw-vpg3"
1280,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-8825,<=1.7,Google TensorFlow 1.7 and below is affected by: Buffer Overflow. The impact is: execute arbitrary code (local). See CVE-2018-8825.
1281,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15358,">=1.15.0rc0,<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 updates its dependency ""SQLite"" to handle CVE-2020-15358."
1282,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-16168,">=2.0.0a0,<2.0.1,<1.15.2",Tensorflow versions 1.15.2 and 2.0.1 updates 'sqlite3' to handle CVE-2019-16168.
1283,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-5482,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5482."
1284,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19646,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 update its dependency ""SQLite"" to handle CVE-2019-19646."
1285,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-5215,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(""hello"", tf.float16), if eager execution is enabled."
1286,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
1287,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29567,">=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.5.0rc0,<2.5.0","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers."
1288,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41883,">=2.10.0rc0,<2.10.1","Tensorflow 2.10.1 includes a fix for CVE-2022-41883: When ops that have specified input sizes receive a differing number of inputs, the executor will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w58w-79xv-6vcj"
1289,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15212,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15212: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to ""segment_ids_data"" can alter ""output_index"" and then write to outside of ""output_data"" buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
1290,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15214,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15214: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimension of output tensor. This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array. This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
1291,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15192,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15192: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes a list of strings to 'dlpack.to_dlpack' there is a memory leak following an expected validation failure. The issue occurs because the 'status' argument during validation failures is not properly checked. Since each of the above methods can return an error status, the 'status' value must be checked before continuing.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv"
1292,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15193,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of ""dlpack.to_dlpack"" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a ""reinterpret_cast"". Since the ""PyObject"" is a Python object, not a Tensorflow tensor, the cast to ""EagerTensor"" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v"
1293,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15191,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15191: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to 'dlpack.to_dlpack' the expected validations will cause variables to bind to 'nullptr' while setting a 'status' variable to the error condition. However, this 'status' argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with '-fsanitize=null'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr"
1294,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15213,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15213: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimension of the output tensor, attackers can use a very large value to trigger a large allocation. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps. However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87"
1295,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15197,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15197: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix. However, malicious users can pass in tensors of different rank, resulting in a ""CHECK"" assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02."
1296,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15200,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15200: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A ""BatchedMap"" is equivalent to a vector where each element is a hashmap. However, if the first element of ""splits_values"" is not 0, ""batch_idx"" will never be 1, hence there will be no hashmap at index 0 in ""per_batch_counts"". Trying to access that in the user code results in a segmentation fault. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3"
1297,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15199,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15199: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the ""splits"" tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure. Since ""BatchedMap"" is equivalent to a vector, it needs to have at least one element to not be ""nullptr"". If user passes a ""splits"" tensor that is empty or has exactly one element, we get a ""SIGABRT"" signal raised by the operating system. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h"
1298,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15201,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15201: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Hence, the code is prone to heap buffer overflow. If ""split_values"" does not end with a value at least ""num_values"" then the ""while"" loop condition will trigger a read outside of the bounds of ""split_values"" once ""batch_idx"" grows too large. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4"
1299,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15198,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15198: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has the same shape as the ""values"" one. The values in these tensors are always accessed in parallel. Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3"
1300,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15196,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15196: In Tensorflow version 2.3.0, the ""SparseCountSparseOutput"" and ""RaggedCountSparseOutput"" implementations don't validate that the ""weights"" tensor has the same shape as the data. The check exists for ""DenseCountSparseOutput"", where both tensors are fully specified. In the sparse and ragged count weights are still accessed in parallel with the data. But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph"
1301,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37635,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37635: In affected versions the implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data. The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor. The Tensorflow team has patched the issue in GitHub commit 87158f43f05f2720a374f3e6d22a7aaa3a33f750."
1302,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37637,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37637: It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. The Tensorflow team has patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5."
1303,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37683,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37683: In affected versions the implementation of division in TFLite is vulnerable to a division by 0 error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. The Tensorflow team has patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28."
1304,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37667,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37667: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.UnicodeEncode'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the 'input_splits' tensor before validating that this tensor is not empty. The Tensorflow team has patched the issue in GitHub commit 2e0ee46f1a47675152d3d865797a18358881d7a6."
1305,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37671,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37671: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.Map*' and 'tf.raw_ops.OrderedMap*' operations. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that 'indices' is in ascending order, but does not check that 'indices' is not empty. The Tensorflow team has patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac."
1306,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37689,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37689: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. This is caused by the MLIR optimization of 'L2NormalizeReduceAxis' operator. The implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements. The Tensorflow team has patched the issue in GitHub commit d6b57f461b39fd1aa8c1b870f1b974aac3554955."
1307,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37648,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37648: In affected versions the code for 'tf.raw_ops.SaveV2' does not properly validate the inputs and an attacker can trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses 'ValidateInputs' to check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer above. However, the validation uses 'OP_REQUIRES' which translates to setting the 'Status' object of the current 'OpKernelContext' to an error status, followed by an empty 'return' statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the nQext line in 'Compute' that follows the call to 'ValidateInputs'. This is equivalent to lacking the validation. The Tensorflow team has patched the issue in GitHub commit 9728c60e136912a12d99ca56e106b7cce7af5986."
1308,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37680,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37680: In affected versions the implementation of fully connected layers in TFLite is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226). The Tensorflow team has patched the issue in GitHub commit 718721986aa137691ee23f03638867151f74935f."
1309,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37636,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37636: In affected versions the implementation of 'tf.raw_ops.SparseDenseCwiseDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit d9204be9f49520cdaaeb2541d1dc5187b23f31d9."
1310,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37642,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37642: In affected versions the implementation of 'tf.raw_ops.ResourceScatterDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76."
1311,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37652,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37652: In affected versions the implementation for 'tf.raw_ops.BoostedTreesCreateEnsemble' can result in a use after free error if an attacker supplies specially crafted arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent 'free'-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed. The Tensorflow team has patched the issue in GitHub commit 5ecec9c6fbdbc6be03295685190a45e7eee726ab."
1312,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37649,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37649: The code for 'tf.raw_ops.UncompressElement' can be made to trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a 'CompressedElement' from a 'Variant' tensor and then proceeds to dereference it for decompressing. There is no check that the 'Variant' tensor contained a 'CompressedElement', so the pointer is actually 'nullptr'. The Tensorflow team has patched the issue in GitHub commit 7bdf50bb4f5c54a4997c379092888546c97c3ebd."
1313,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37659,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37659: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations). The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr. We have patched the issue in GitHub commit 93f428fd1768df147171ed674fee1fc5ab8309ec."
1314,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37647,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37647: When a user does not supply arguments that determine a valid sparse tensor, 'tf.raw_ops.SparseTensorSliceDataset' implementation can be made to dereference a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either 'indices' or 'values' are provided for an empty sparse tensor when the other is not. If 'indices' is empty, then code that performs validation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference. If 'indices' as provided by the user is empty, then 'indices' in the C++ code above is backed by an empty 'std::vector', hence calling 'indices->dim_size(0)' results in null pointer dereferencing (same as calling 'std::vector::at()' on an empty vector). The Tensorflow team has patched the issue in GitHub commit 02cc160e29d20631de3859c6653184e3f876b9d7."
1315,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37658,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37658: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixSetDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit ff8894044dfae5568ecbf2ed514c1a37dc394f1b."
1316,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37656,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37656: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToSparse'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order. The Tensorflow team has patched the issue in GitHub commit 1071f554dbd09f7e101324d366eec5f4fe5a3ece."
1317,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37638,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37638: Sending invalid argument for 'row_partition_types' of 'tf.raw_ops.RaggedTensorToTensor' API results in a null pointer dereference and undefined behavior. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty. The Tensorflow team has patched the issue in GitHub commit 301ae88b331d37a2a16159b65b255f4f9eb39314."
1318,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37654,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37654: In affected versions an attacker can trigger a crash via a 'CHECK'-fail in debug builds of TensorFlow using 'tf.raw_ops.ResourceGather' or a read from outside the bounds of heap allocated data in the same API in a release build. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the 'batch_dims' value that the user supplies is less than the rank of the input tensor. Since the implementation uses several for loops over the dimensions of 'tensor', this results in reading data from outside the bounds of heap allocated buffer backing the tensor. The Tensorflow team has patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d."
1319,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37651,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37651: In affected versions the implementation for 'tf.raw_ops.FractionalAvgPoolGrad' can be tricked into accessing data outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty 'EigenDoubleMatrixMap' and then accesses this buffer with indices that are outside of the empty area. The Tensorflow team has patched the issue in GitHub commit 0f931751fb20f565c4e94aa6df58d54a003cdb30."
1320,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37639,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37639: When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer. Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the 'tensor_name' user controlled input and immediately retrieves the tensor at the restoration index (controlled via 'preferred_shard' argument). This occurs without validating that the provided list has enough values. If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements and if the restoration index is outside the bounds, this results in heap OOB read. The Tensorflow team has patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622."
1321,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37664,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37664: In affected versions an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range. The Tensorflow team has patched the issue in GitHub commit e84c975313e8e8e38bb2ea118196369c45c51378."
1322,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37686,">=2.3.0rc0,<2.3.4rc0,>=2.4.0rc0,<2.4.3rc0,>=2.5.0rc0,<=2.5.0,>=2.6.0rc0,<2.6.0","Several versions of TensorFlow are affected by CVE-2021-37686: In affected versions, the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for ellipsis in axis definition (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that 'ellipsis_end_idx' is smaller than 'i' (e.g., always negative). In this case, the inner loop does not increase 'i' and the 'continue' statement causes execution to skip over the preincrement at the end of the outer loop. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695."
1323,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26269,">=2.4.0rc0,<2.4.0","TensorFlow 2.4.0 includes a fix for CVE-2020-26269: In TensorFlow release candidate versions 2.4.0rc*, the general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of the array holding the directories. There are multiple invariants and preconditions that are assumed by the parallel implementation of GetMatchingPaths but are not verified by the PRs introducing it (#40861 and #44310). Thus, we are completely rewriting the implementation to fully specify and validate these. This is patched in version 2.4.0. This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched."
1324,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29614,">=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.5.0rc0,<2.5.0","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory."
1325,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29530,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by invalid validation in 'SparseMatrixSparseCholesky'. See CVE-2021-29530."
1326,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29519,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'SparseCross' caused by type confusion. See CVE-2021-29519."
1327,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29522,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv3DBackprop*'. See CVE-2021-29522."
1328,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29529,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap buffer overflow caused by rounding. See CVE-2021-29529."
1329,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29518,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix vulnerabilities where session operations in eager mode lead to null pointer dereferences. See CVE-2021-29518."
1330,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29538,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29538: An attacker can cause a division by zero to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments). If all shapes are empty then 'work_unit_size' is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service."
1331,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29533,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 includes a fix for CVE-2021-29533: An attacker can trigger a denial of service via a 'CHECK' failure by passing an empty image to 'tf.raw_ops.DrawBoundingBoxes'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses 'CHECK_*' assertions instead of 'OP_REQUIRES' to validate user controlled inputs. Whereas 'OP_REQUIRES' allows returning an error condition back to the user, the 'CHECK_*' macros result in a crash if the condition is false, similar to 'assert'. In this case, 'height' is 0 from the 'images' input. This results in 'max_box_row_clamp' being negative and the assertion being falsified, followed by aborting program execution."
1332,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29520,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a heap buffer overflow in 'Conv3DBackprop*'. See CVE-2021-29520."
1333,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29531,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.EncodePng'. See CVE-2021-29531."
1334,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29521,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a segfault in 'SparseCountSparseOutput'. See CVE-2021-29521."
1335,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29549,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29549: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero. Since `vector_num_elements` is determined based on input shapes (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0."
1336,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29537,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29537: An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly."
1337,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29532,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29532: An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads."
1338,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29615,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow in 'ParseAttrValue' with nested tensors. See CVE-2021-29615."
1339,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29548,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization)."
1340,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29534,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29534: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.SparseConcat'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in 'shapes[0]' as dimensions for the output shape. The 'TensorShape' constructor (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a 'CHECK' operation which triggers when 'InitDims' (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use 'BuildTensorShapeBase' or 'AddDimWithStatus' to prevent 'CHECK'-failures in the presence of overflows."
1341,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29513,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion."
1342,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29525,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropInput'. See CVE-2021-29525."
1343,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29524,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropFilter'. See CVE-2021-29524."
1344,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29523,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'AddManySparseToTensorsMap'. See CVE-2021-29523."
1345,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29552,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29552: An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar. Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination."
1346,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29539,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument."
1347,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29541,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'StringNGrams'. See CVE-2021-29541."
1348,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29535,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29535: An attacker can cause a heap buffer overflow in 'QuantizedMul' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
1349,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29542,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'StringNGrams'. See CVE-2021-29542."
1350,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29536,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29536: An attacker can cause a heap buffer overflow in 'QuantizedReshape' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
1351,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29544,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29544: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.QuantizeAndDequantizeV4Grad'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the 'input_*' tensors. In turn, this results in the tensors being passes as they are to 'QuantizeAndDequantizePerChannelGradientImpl' (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306). However, the 'vec<T>' method, requires the rank to 1 and triggers a 'CHECK' failure otherwise."
1352,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29543,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29543: An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks."
1353,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29540,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29540: TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in 'filter_sizes'. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor."
1354,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8169,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency 'curl' to version 7.76.0 to handle CVE-2020-8169."
1355,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29516,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix fixes a null pointer dereference via invalid Ragged Tensors. See CVE-2021-29516."
1356,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29517,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in 'Conv3D'. See CVE-2021-29517."
1357,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29515,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a reference binding to null pointer in 'MatrixDiag*' ops. See CVE-2021-29515."
1358,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29594,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's convolution code. See CVE-2021-29594."
1359,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29596,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'EmbeddingLookup'. See CVE-2021-29596."
1360,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29558,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29558: An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset."
1361,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29545,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29545: An attacker can trigger a denial of service via a 'CHECK'-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at 'indices(i, 0)' is such that 'indices(i, 0) + 1' is outside the bounds of 'csr_row_ptr', this results in writing outside of bounds of heap allocated data."
1362,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29551,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29551: The implementation of 'MatrixTriangularSolve' (https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails."
1363,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29592,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in TFLite's 'Reshape' operator. See CVE-2021-29592."
1364,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29581,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'CTCBeamSearchDecoder'. See CVE-2021-29581."
1365,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29617,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29617: An attacker can cause a denial of service via `CHECK`-fail in `tf.strings.substr` with invalid arguments."
1366,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29574,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior in 'MaxPool3DGradGrad'. See CVE-2021-29574."
1367,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29512,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds."
1368,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29556,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29556: An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument."
1369,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29613,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'tf.raw_ops.CTCLoss'. See CVE-2021-29613."
1370,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29526,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'Conv2D'. See CVE-2021-29526."
1371,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29527,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedConv2D'. See CVE-2021-29527."
1372,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29595,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29595: The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0."
1373,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29561,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'LoadAndRemapMatrix'. See CVE-2021-29561."
1374,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29585,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29585: The TFLite computation for size of output after padding, `ComputeOutSize`(https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division. Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0."
1375,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29589,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29589: The reference implementation of the `GatherNd` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966). An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension."
1376,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29570,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'MaxPoolGradWithArgmax'. See CVE-2021-29570."
1377,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29559,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB access in unicode ops. See CVE-2021-29559."
1378,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29555,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'FusedBatchNorm'. See CVE-2021-29555."
1379,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29588,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'TransposeConv'. See CVE-2021-29588."
1380,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29557,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'SparseMatMul'. See CVE-2021-29557."
1381,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29612,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'BandedTriangularSolve'. See CVE-2021-29612."
1382,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29514,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor."
1383,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29584,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail due to integer overflow. See CVE-2021-29584."
1384,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29582,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in 'tf.raw_ops.Dequantize'. See CVE-2021-29582."
1385,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29562,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.IRFFT'. See CVE-2021-29562."
1386,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29597,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SpaceToBatchNd'. See CVE-2021-29597."
1387,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29565,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'SparseFillEmptyRows'. See CVE-2021-29565."
1388,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29619,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'tf.raw_ops.SparseCountSparseOutput'. See CVE-2021-29619."
1389,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29602,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'DepthwiseConv'. See CVE-2021-29602."
1390,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29577,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'AvgPool3DGrad'. See CVE-2021-29577."
1391,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29566,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29566: An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to 'tf.raw_ops.Dilation2DBackpropInput'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array. The values for 'h_out' and 'w_out' are guaranteed to be in range for 'out_backprop' (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating 'h_in_max'/'w_in_max' and 'in_backprop'."
1392,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29576,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPool3DGradGrad'. See CVE-2021-29576."
1393,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29600,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'OneHot'. See CVE-2021-29600."
1394,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29599,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'Split'. See CVE-2021-29599."
1395,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29608,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29608: TensorFlow is an end-to-end open source platform for machine learning. Due to lack of validation in 'tf.raw_ops.RaggedTensorToTensor', an attacker can exploit an undefined behavior if input arguments are empty. The implementation (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones. There are multiple 'DCHECK' validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything."
1396,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29554,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'DenseCountSparseOutput'. See CVE-2021-29554."
1397,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29578,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'FractionalAvgPoolGrad'. See CVE-2021-29578."
1398,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29547,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29547: An attacker can cause a segfault and denial of service via accessing data outside of bounds in 'tf.raw_ops.QuantizedBatchNormWithGlobalNormalization'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, '.flat<T>()' is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds."
1399,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29603,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB write in TFLite. See CVE-2021-29603."
1400,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29604,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of hashtable lookup. See CVE-2021-29604."
1401,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29572,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer)."
1402,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29587,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29587: TensorFlow is an end-to-end open source platform for machine learning. The `Prepare` step of the `SpaceToDepth` TFLite operator does not check for 0 before division (https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67). An attacker can craft a model such that `params->block_size` would be zero."
1403,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29569,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'RequantizationRange'. See CVE-2021-29569."
1404,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8285,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 updates its dependency ""curl"" to a secure version (7.76.0)."
1405,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29601,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite concatentation. See CVE-2021-29601."
1406,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29573,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'MaxPoolGradWithArgmax'. See CVE-2021-29573."
1407,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29586,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in optimized pooling implementations in TFLite. See CVE-2021-29586."
1408,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29590,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in TFLite's implementation of 'Minimum' or 'Maximum'. See CVE-2021-29590."
1409,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29598,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SVDF'. See CVE-2021-29598."
1410,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29528,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedMul'. See CVE-2021-29528."
1411,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29611,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseReshape'. See CVE-2021-29611."
1412,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29580,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior and a 'CHECK'-fail in 'FractionalMaxPoolGrad'. See CVE-2021-29580."
1413,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29618,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29618: Passing a complex argument to `tf.transpose` at the same time as passing 'conjugate=True' argument results in a crash."
1414,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29575,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an overflow and a denial of service in 'tf.raw_ops.ReverseSequence'. See CVE-2021-29575."
1415,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29616,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29616: The implementation of TrySimplify (https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs."
1416,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29591,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow due to looping TFLite subgraph. See CVE-2021-29591."
1417,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29606,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap OOB read in TFLite. See CVE-2021-29606."
1418,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29607,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseSparseMinimum'. See CVE-2021-29607."
1419,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29609,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseAdd'. See CVE-2021-29609."
1420,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29583,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29583: The implementation of 'tf.raw_ops.FusedBatchNorm' is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that 'scale', 'offset', 'mean' and 'variance' (the last two only when required) all have the same number of elements as the number of channels of 'x'. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior."
1421,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8231,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency ""curl"" to v7.76.0 to include security fixes."
1422,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8286,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 updates 'curl' to '7.76.0' to handle CVE-2020-8286: curl 7.41.0 through 7.73.0 is vulnerable to an improper check for certificate revocation due to insufficient verification of the OCSP response."
1423,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8177,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update 'curl' to '7.76.0' to handle CVE-2020-8177."
1424,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29593,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'BatchToSpaceNd'. See CVE-2021-29593."
1425,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8284,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 update its dependency ""curl"" to handle CVE-2020-8284."
1426,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29579,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPoolGrad'. See CVE-2021-29579."
1427,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29605,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite memory allocation. See CVE-2021-29605."
1428,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29564,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'EditDistance'. See CVE-2021-29564."
1429,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29553,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB in 'QuantizeAndDequantizeV3'. See CVE-2021-29553."
1430,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29563,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29563: An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`. Eigen code operating on an empty matrix can trigger on an assertion and will cause program termination."
1431,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29550,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29550: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values. The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger. Later, these computed values are used as arguments (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to `GeneratePoolingSequence`(https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation. Since `output_length` can be 0, this results in runtime crashing."
1432,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29546,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29546: TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero."
1433,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29610,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29610: The validation in 'tf.raw_ops.QuantizeAndDequantizeV2' allows invalid values for 'axis' argument:. The validation (https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses '||' to mix two different conditions. If 'axis_ < -1' the condition in 'OP_REQUIRES' will still be true, but this value of 'axis_' results in heap underflow. This allows attackers to read/write to other data on the heap."
1434,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29571,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices."
1435,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29560,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29560: An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel. Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when 'parent_output_index' is shorter than 'row_split'."
1436,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29568,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in 'tf.raw_ops.ParameterizedTruncatedNormal'. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of 'shape'. If 'shape' argument is empty, then 'shape_tensor.flat<T>()' is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."
1437,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37645,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37645: In affected versions the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit 96f364a1ca3009f98980021c4b32be5fdcca33a1."
1438,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37691,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37691: In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). The Tensorflow team has patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9."
1439,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37688,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37688: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer. The Tensorflow team has patched the issue in GitHub commit 15691e456c7dc9bd6be203b09765b063bf4a380c."
1440,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37692,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow versions 2.5.1 and 2.6.0 include a fix for CVE-2021-37692:
In affected versions under certain conditions, Go code can trigger a segfault in string deallocation. For string tensors, ""C.TF_TString_Dealloc"" is called during garbage collection within a finalizer function. However, tensor structure isn't checked until encoding to avoid a performance penalty. The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions). To fix this, the call to set the finalizer function is deferred until ""NewTensor"" returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written. The Tensorflow team has patched the issue in GitHub commit:
https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22
https://github.com/tensorflow/tensorflow/pull/50508
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cmgw-8vpc-rc59"
1441,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37640,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.5.1 and 2.6.0 include a fix for CVE-2021-37640: In affected versions the implementation of 'tf.raw_ops.SparseReshape' can be made to trigger an integral division by 0 exception. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements. The reshape functor (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0. The Tensorflow team has patched the issue in GitHub commit 4923de56ec94fff7770df259ab7f2288a74feb41."
1442,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22898,">=2.6.0a1,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow versions 2.3.4, 2.4.3, 2.5.1, and 2.6.0 update its dependency ""curl"" to include a fix for CVE-2021-22898"
1443,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37685,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37685: In affected versions TFLite's 'expand_dims.cc' (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data. If 'axis' is a large negative value (e.g., '-100000'), then after the first 'if' it would still be negative. The check following the 'if' statement will pass and the 'for' loop would read one element before the start of 'input_dims.data' (when 'i = 0'). The Tensorflow team has patched the issue in GitHub commit d94ffe08a65400f898241c0374e9edc6fa8ed257."
1444,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37657,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37657: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. The Tensorflow team has checked that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit f2a673bd34f0d64b8e40a551ac78989d16daad09."
1445,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37663,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37663:
In affected versions, due to incomplete validation in ""tf.raw_ops.QuantizeV2"", an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that ""min_range"" and ""max_range"" both have the same non-zero number of elements. If ""axis"" is provided (i.e., not ""-1""), then validation should check that it is a value in range for the rank of ""input"" tensor and then the lengths of ""min_range"" and ""max_range"" inputs match the ""axis"" dimension of the ""input"" tensor. The Tensorflow team has patched the issue in GitHub commit 6da6620efad397c85493b8f8667b821403516708. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j
https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708"
1446,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37661,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37661: In affected versions an attacker can cause a denial of service in 'boosted_trees_create_quantile_stream_resource' by using negative arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that 'num_streams' only contains non-negative numbers. In turn, this results in using this value to allocate memory (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40). However, 'reserve' receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library. The Tensorflow team has patched the issue in GitHub commit 8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992."
1447,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37665,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37665:
In affected versions, due to incomplete validation in MKL implementation of requantization, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the ""input"" tensor. A similar issue occurs in ""MklRequantizePerChannelOp"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments. The Tensorflow team has patched the issue in GitHub commit 9e62869465573cb2d9b5053f1fa02a81fce21d69 and in the Github commit 203214568f5bc237603dbab6e1fd389f1572f5c9.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp
https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9
https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69"
1448,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37676,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37676: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.SparseFillEmptyRows'. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors. The Tensorflow team has patched the issue in GitHub commit 578e634b4f1c1c684d4b4294f9e5281b2133b3ed."
1449,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37675,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37675: In affected versions most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations. The Tensorflow team has patched the issue in GitHub commit 8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4."
1450,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37687,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37687: In affected versions TFLite's 'GatherNd' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in 'indices'. Similar issue exists in 'Gather' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). The Tensorflow team has patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d."
1451,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37668,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37668:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.UnravelIndex"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by ""dims"" is not empty. Hence, if one element of ""dims"" is 0, the implementation does a division by 0. The Tensorflow team has patched the issue in GitHub commit a776040a5e7ebf76eeb7eb923bf1ae417dd4d233.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5
https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233"
1452,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37653,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37653: In affected versions an attacker can trigger a crash via a floating point exception in 'tf.raw_ops.ResourceGather'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, 'batch_size', and then divides by it without checking that this value is not 0. The Tensorflow team has patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11."
1453,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37660,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37660: In affected versions an attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if 'x' and 'v' are empty but the code uses '||' instead of '&&'. The Tensorflow team has patched the issue in GitHub commit e86605c0a336c088b638da02135ea6f9f6753618."
1454,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37684,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37684: In affected versions the implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 (https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695)."
1455,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37643,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37643: If a user does not provide a valid padding value to 'tf.raw_ops.MatrixDiagPartOp', then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from. The Tensorflow team has patched the issue in GitHub commit 482da92095c4d48f8784b1f00dda4f81c28d2988."
1456,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37644,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37644: In affected versions providing a negative element to 'num_elements' list argument of 'tf.raw_ops.TensorListReserve' causes the runtime to abort the process due to reallocating a 'std::vector' to have a negative number of elements. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls 'std::vector.resize()' with the new size controlled by input given by the user, without checking that this input is valid. The Tensorflow team has patched the issue in GitHub commit 8a6e874437670045e6c7dc6154c7412b4a2135e2."
1457,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37646,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37646: In affected versions the implementation of 'tf.raw_ops.StringNGrams' is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls 'reserve' on a 'tstring' with a value that sometimes can be negative if user supplies negative 'ngram_widths'. The 'reserve' method calls 'TF_TString_Reserve' which has an 'unsigned long' argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit c283e542a3f422420cfdb332414543b62fc4e4a5."
1458,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37681,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37681: In affected versions the implementation of SVDF in TFLite is vulnerable to a null pointer error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313). The 'GetVariableInput' function (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but 'GetTensorData' assumes that the argument is always a valid tensor. Furthermore, because 'GetVariableInput' calls 'GetMutableInput' (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return 'nullptr', the 'tensor->is_variable' expression can also trigger a null pointer exception. The Tensorflow team has patched the issue in GitHub commit 5b048e87e4e55990dae6b547add4dae59f4e1c76."
1459,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37641,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37641: In affected versions if the arguments to 'tf.raw_ops.RaggedGather' don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by 'params_nested_splits' is not an empty list of tensors. The Tensorflow team has patched the issue in GitHub commit a2b743f6017d7b97af1fe49087ae15f0ac634373."
1460,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37666,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37666: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToVariant'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. The Tensorflow team has patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612."
1461,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37662,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37662: In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in 'BoostedTreesCalculateBestGainsPerFeature' and similar attack can occur in 'BoostedTreesCalculateBestFeatureSplitV2'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. The Tensorflow team has patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7."
1462,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37690,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37690:
In affected versions when running shape functions, some functions (such as 'MutableHashTableShape') produce extra output information in the form of a 'ShapeAndType' struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault. 'ShapeRefiner' is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but the Tensorflow team was not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types. The Tensorflow team has patched the issue in GitHub commit ee119d4a498979525046fba1c3dd3f13a039fbb1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3hxh-8cp2-g4hg
https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1"
1463,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37682,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37682:
In affected versions all TFLite operations that use quantization can be made to use unitialized values. (For example, https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200). The issue stems from the fact that ""quantization.params"" is only valid if ""quantization.type"" is different that ""kTfLiteNoQuantization"". However, these checks are missing in large parts of the code. The Tensorflow team has patched the issue in GitHub commits 537bc7c723439b9194a358f64d871dd326c18887, 4a91f2069f7145aab6ba2d8cfe41be8a110c18a5 and 8933b8a21280696ab119b63263babdb54c298538.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4c4g-crqm-xrxw
https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5
https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887
https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538"
1464,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37650,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37650: In affected versions the implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types. The Tensorflow team has patched the issue in GitHub commit e0b6e58c328059829c3eb968136f17aa72b6c876."
1465,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37669,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37669:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.NonMaxSuppressionV5"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a ""std::vector"". However, as ""std::vector::resize"" takes the size argument as a ""size_t"" and ""output_size"" is an ""int"", there is an implicit conversion to unsigned. If the attacker supplies a negative value, this conversion results in a crash. A similar issue occurs in ""CombinedNonMaxSuppression"". The Tensorflow team has patched the issue in GitHub commit 3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d and commit b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c
https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d
https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58"
1466,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37677,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for 'tf.raw_ops.Dequantize' has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses 'axis' to select between two different values for 'minmax_rank' which is then used to retrieve tensor dimensions. However, code assumes that 'axis' can be either '-1' or a value greater than '-1', with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
1467,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22901,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
1468,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37655,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37655: TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to 'tf.raw_ops.ResourceScatterUpdate'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of 'indices' and 'updates': instead of checking that the shape of 'indices' is a prefix of the shape of 'updates' (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship. The Tensorflow team has patched the issue in GitHub commit 01cff3f986259d661103412a20745928c727326f."
1469,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37672,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37672:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.SdcaOptimizerV2"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of ""example_labels"" is the same as the number of examples. The Tensorflow team has patched the issue in GitHub commit a4e138660270e7599793fa438cd7b2fc2ce215a6.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7
https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6"
1470,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37670,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37670:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.UpperBound"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of ""sorted_input"" argument. A similar issue occurs in ""tf.raw_ops.LowerBound"". The Tensorflow team has patched the issue in GitHub commit 42459e4273c2e47a3232cc16c4f4fff3b3a35c38.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7
https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38"
1471,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37679,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37679:
In affected versions it is possible to nest a ""tf.map_fn"" within another ""tf.map_fn"" call. However, if the input tensor is a ""RaggedTensor"" and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The ""t"" and ""z"" outputs should be identical, however this is not the case. The last row of ""t"" contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a ""Variant"" tensor to a ""RaggedTensor"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. The Tensorflow team has patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp
https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
1472,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22897,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
1473,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22876,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
1474,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37673,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37673:
In affected versions, an attacker can trigger a denial of service via a ""CHECK""-fail in ""tf.raw_ops.MapStage"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the ""key"" input is a valid non-empty tensor. The Tensorflow team has patched the issue in GitHub commit d7de67733925de196ec8863a33445b73f9562d1d.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg
https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d"
1475,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37674,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in 'tf.raw_ops.MaxPoolGrad' caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the 'orig_input' and 'orig_output' tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
1476,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37678,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.7.0rc0,<2.7.0","Tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:
In affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses ""yaml.unsafe_load"" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r
https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012"
1477,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41211,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41211: In affected versions, the shape inference code for 'QuantizeV2' can trigger a read outside of bounds of heap allocated array. This occurs whenever 'axis' is a negative value less than '-1'. In this case, we are accessing data before the start of a heap buffer. The code allows 'axis' to be an optional argument ('s' would contain an 'error::NOT_FOUND' error code). Otherwise, it assumes that 'axis' is a valid index into the dimensions of the 'input' tensor. If 'axis' is less than '-1' then this results in a heap OOB read. The fix is included in TensorFlow 2.7.0. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c
https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244"
1478,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41220,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41220: In affected versions, the async implementation of 'CollectiveReduceV2' suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been 'std::move()'d are still accessed. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5
https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
1479,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23594,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered."
1480,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23590,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.7.1 and 2.8.0 include a fix for CVE-2022-23590: A 'GraphDef' from a TensorFlow 'SavedModel' can be maliciously altered to cause a TensorFlow process to crash due to encountering a 'StatusOr' value that is an error and forcibly extracting the value from it.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278"
1481,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23592,">=2.8.0a0,<2.8.0","Tensorflow version 2.8.0 includes a fix for CVE-2022-23592: TensorFlow's type inference can cause a heap out of bounds read as the bounds checking is done in a 'DCHECK' (which is a no-op during production). An attacker can control the 'input_idx' variable such that 'ix' would be larger than the number of values in 'node_t.args'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq36-27g6-p492"
1482,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23593,">=2.8.0a0,<2.8.0","Tensorflow 2.8.0 includes a fix for CVE-2022-23593: The 'simplifyBroadcast' function in the MLIR-TFRT infrastructure in TensorFlow is vulnerable to a segfault (hence, denial of service), if called with scalar shapes. If all shapes are scalar, then 'maxRank' is 0, so we build an empty 'SmallVector'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gwcx-jrx4-92w2"
1483,tensorflow,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29210,">=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","TensorFlow is an open source platform for machine learning. In version 2.8.0, the 'TensorKey' hash function used total estimated 'AllocatedBytes()', which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. 'int32_t'). It also tried to access individual tensor bytes through 'tensor.data()' of size 'AllocatedBytes()'. This led to ASAN failures because the 'AllocatedBytes()' is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the '.data()' buffer. The discoverers could not use this byte vector anyway because types such as 'tstring' include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."
1484,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,PVE-2021-36375,<1.10.0,Tensorflow-gpu before 1.10.0 uses an insecure grpc dependency.
1485,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-9635,<1.12.2,NULL pointer dereference in Google TensorFlow before 1.12.2 could cause a denial of service via an invalid GIF file. See CVE-2019-9635.
1486,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-16778,<1.15,"Tensorflow-gpu 1.15 includes a fix for CVE-2019-16778: In TensorFlow before 1.15, a heap buffer overflow in UnsortedSegmentSum can be produced when the Index template argument is int32. In this case data_size and num_segments fields are truncated from int64 to int32 and can produce negative numbers, resulting in accessing out of bounds heap memory. This is unlikely to be exploitable and was detected and fixed internally in TensorFlow 1.15 and 2.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-844w-j86r-4x2j
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2019-002.md
https://github.com/tensorflow/tensorflow/commit/db4f9717c41bccc3ce10099ab61996b246099892"
1487,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,PVE-2021-37524,<1.15.0,"The original changelog reads: ""Tensorflow-gpu 2.0 fixes a potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access."" However, it was later confirmed that the fix was already included in 1.15 and later. See: <https://github.com/tensorflow/tensorflow/issues/37701>."
1488,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-13960,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2019-13960."
1489,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-20330,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-20330."
1490,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-17190,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2018-17190."
1491,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-11770,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""Apache Spark"" to handle CVE-2018-11770."
1492,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-10099,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2019-10099."
1493,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19880,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""SQLite3"" to handle CVE-2019-19880."
1494,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19244,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite3"" to handle CVE-2019-19244."
1495,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19645,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite"" to handle CVE-2019-19645."
1496,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-19664,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow-gpu versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-19664."
1497,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15204,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15204: In eager mode, TensorFlow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 does not set the session state. Hence, calling ""tf.raw_ops.GetSessionHandle"" or ""tf.raw_ops.GetSessionHandleV2"" results in a null pointer dereference In linked snippet, in eager mode, ""ctx->session_state()"" returns ""nullptr"". Since code immediately dereferences this, we get a segmentation fault. The issue was patched in commit 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1"
1498,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15195,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15195: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of 'SparseFillEmptyRowsGrad' uses a double indexing pattern. It is possible for 'reverse_index_map(i)' to be an index outside of bounds of 'grad_values', thus resulting in a heap buffer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr"
1499,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15206,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15206: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's ""SavedModel"" protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using ""tensorflow-serving"" or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d. However, this was not enough, as #41097 reported a different failure mode. The issue was finally patched in commit df095206f25471e864a8e63a0f1caef53a0e3a6"
1500,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15209,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15209: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a ""nullptr"" buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with ""nullptr"". However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue was patched in commit 0b5662bc."
1501,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15205,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15205: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'data_splits' argument of 'tf.raw_ops.StringNGrams' lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory In the linked code snippet, all the binary strings after 'ee ff' are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46"
1502,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15203,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15203: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the 'fill' argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a 'printf' call is constructed. This may result in segmentation fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
1503,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15207,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34"
1504,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15211,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15211: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative ""-1"" value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the ""-1"" index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue was patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). A potential workaround would be to add a custom ""Verifier"" to the model loading code to ensure that only operators which accept optional inputs use the ""-1"" special value and only for the tensors that they expect to be optional. Since this allow-list type approach is error-prone, it's advised upgrading to the patched code."
1505,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15208,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15208: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a ""DCHECK"" which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue was patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d"
1506,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15190,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15190: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the ""tf.raw_ops.Switch"" operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor. However, the eager runtime traverses all tensors in the output. Since only one of the tensors is defined, the other one is ""nullptr"", hence we are binding a reference to ""nullptr"". This is undefined behavior and reported as an error if compiling with ""-fsanitize=null"". In this case, this results in a segmentation fault The issue was patched in commit da8558533d925694483d2c136a9220d6d49d843c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4g9f-63rx-5cw4"
1507,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15202,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15202: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'Shard' API in TensorFlow expects the last argument to be a function taking two 'int64' (i.e., 'long long') arguments. However, there are several places in TensorFlow where a lambda taking 'int' or 'int32' arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4"
1508,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-11655,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11655."
1509,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-11656,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11656."
1510,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13631,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13631."
1511,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13435,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13435."
1512,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13871,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13871."
1513,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13630,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13630."
1514,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13434,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13434."
1515,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-9327,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-9327."
1516,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15210,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15210: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2"
1517,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15194,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu 2.4.0 includes a fix for CVE-2020-15194: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments. Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."""
1518,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-14155,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow-gpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2 and 2.3.2 update its dependency ""PCRE"" to handle CVE-2020-14155."
1519,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-13790,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow-gpu versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 updates its dependency ""Libjpeg-turbo"" to handle CVE-2020-13790."
1520,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-20838,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow-gpu versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency ""PCRE"" to fix CVE-2019-20838."
1521,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15250,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow-gpu versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency 'Junit4' to v4.13.1 to include a security fix."
1522,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26271,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow-gpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26271: In affected versions, under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library."
1523,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26267,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow-gpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26267: In affected versions, the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes."
1524,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26266,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow-gpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0 includes a fix for CVE-2020-26266: In affected versions and under certain cases a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers filled with the default value of the type but forgetting to default initialize the quantized floating point types in Eigen."
1525,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26268,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow-gpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden."
1526,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26270,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow-gpu versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26270: In affected versions, running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a CHECK failure when using the CUDA backend. This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer."
1527,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-7576,<1.6.0a1,Google TensorFlow 1.6.x and earlier is affected by: Null Pointer Dereference. The type of exploitation is: context-dependent. See CVE-2018-7576.
1528,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-21233,<1.7.0,"Tensorflow-gpu before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in core/kernels/decode_bmp_op.cc. See CVE-2018-21233."
1529,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-7575,<1.7.0a1,Google TensorFlow 1.7.x and earlier is affected by a Buffer Overflow vulnerability. The type of exploitation is context-dependent. See CVE-2018-7575.
1530,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-7577,<1.7.1,"Memcpy parameter overlap in Google Snappy library 1.1.4, as used in Google TensorFlow before 1.7.1, could result in a crash or read from other parts of process memory. See CVE-2018-7577."
1531,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-10055,<1.7.1,Invalid memory access and/or a heap buffer overflow in the TensorFlow XLA compiler in Google TensorFlow before 1.7.1 could cause a crash or read from other parts of process memory via a crafted configuration file. See CVE-2018-10055.
1532,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25673,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25673: Versions prior to 2.12.0 and 2.11.1 have a Floating Point Exception in TensorListSplit with XLA. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
1533,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25672,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25672: The function 'tf.raw_ops.LookupTableImportV2' cannot handle scalars in the 'values' parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
1534,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25676,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25676: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.ParallelConcat' segfaults with a nullptr dereference when given a parameter 'shape' with rank that is not greater than zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6wfh-89q8-44jq"
1535,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25666,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25666: Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f637-vh3r-vfh2"
1536,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25667,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25667: Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when '2^31 <= num_frames * height * width * channels < 2^32', for example Full HD screencast of at least 346 frames.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68"
1537,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25674,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25674: Versions prior to 2.12.0 and 2.11.1 have a null pointer error in RandomShuffle with XLA enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf97-q72m-7579"
1538,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25661,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25661: In versions prior to 2.11.1 a malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. A proof of concept can be constructed with the 'Convolution3DTranspose' function. This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services. An attacker must have privilege to provide input to a 'Convolution3DTranspose' call.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq"
1539,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25801,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25801: Prior to versions 2.12.0 and 2.11.1, 'nn_ops.fractional_avg_pool_v2' and 'nn_ops.fractional_max_pool_v2' require the first and fourth elements of their parameter 'pooling_ratio' to be equal to 1.0, as pooling on batch and channel dimensions is not supported.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f49c-87jh-g47q"
1540,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25675,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25675: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.Bincount' segfaults when given a parameter 'weights' that is neither the same shape as parameter 'arr' nor a length-0 tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7x4v-9gxg-9hwj"
1541,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25665,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25665: Prior to versions 2.12.0 and 2.11.1, when 'SparseSparseMaximum' is given invalid sparse tensors as inputs, it can give a null pointer error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-558h-mq8x-7q9g"
1542,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-27579,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-27579: Constructing a tflite model with a paramater 'filter_input_channel' of less than 1 gives a FPE.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5w96-866f-6rm8"
1543,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25671,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25671: There is out-of-bounds access due to mismatched integer type sizes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j5w9-hmfh-4cr6"
1544,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25670,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25670: Versions prior to 2.12.0 and 2.11.1 have a null point error in QuantizedMatMulWithBiasAndDequantize with MKL enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rq-hwc3-x77w"
1545,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25669,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25669: Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for 'tf.raw_ops.AvgPoolGrad', it can give a floating point exception.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rcf8-g8jv-vg6p"
1546,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25668,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25668: Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96"
1547,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25664,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25664: Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hg6-5c2q-7rcr"
1548,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25663,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25663: Prior to versions 2.12.0 and 2.11.1, when 'ctx->step_containter()' is a null ptr, the Lookup function will be executed with a null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-64jg-wjww-7c5w"
1549,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25662,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25662: Versions prior to 2.12.0 and 2.11.1 are vulnerable to integer overflow in EditDistance.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7jvm-xxmr-v5cw"
1550,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25660,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25660: Prior to versions 2.12.0 and 2.11.1, when the parameter 'summarize' of 'tf.raw_ops.Print' is zero, the new method 'SummarizeArray<bool>' will reference to a nullptr, leading to a seg fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj"
1551,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25659,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25659: Prior to versions 2.12.0 and 2.11.1, if the parameter 'indices' for 'DynamicStitch' does not match the shape of the parameter 'data', it can trigger an stack OOB read.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p"
1552,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2023-25658,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow-gpu 2.11.1 and 2.12.0 include a fix for CVE-2023-25658: Prior to versions 2.12.0 and 2.11.1, an out of bounds read is in GRUBlockCellGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-68v3-g9cm-rmm6"
1553,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15265,<2.4.0,"Tensorflow-gpu 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
1554,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15266,<2.4.0,"Tensorflow-gpu 2.4.0 includes a fix for CVE-2020-15266: In Tensorflow before version 2.4.0, when the 'boxes' argument of 'tf.image.crop_and_resize' has a very large value, the CPU kernel implementation receives it as a C++ 'nan' floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.
https://github.com/tensorflow/tensorflow/issues/42129
https://github.com/tensorflow/tensorflow/pull/42143/commits/3ade2efec2e90c6237de32a19680caaa3ebc2845
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xwhf-g6j5-j5gc"
1555,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15265,<2.4.0,"Tensorflow-gpu 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
1556,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15265,<2.4.0,"Tensorflow-gpu 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
1557,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41210,"<2.4.4,>=2.5.0rc0,<2.5.2, >=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41210: In affected versions, the shape inference functions for 'SparseCountSparseOutput' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc
https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2"
1558,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41195,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41195: In affected versions, the implementation of 'tf.math.segment_*' operations results in a 'CHECK'-fail related abort (and denial of service) if a segment id in 'segment_ids' is large. This is similar to CVE-2021-29584 (and similar to other reported vulnerabilities in TensorFlow localized to specific APIs): the implementation (both on CPU and GPU) computes the output shape using 'AddDim'. However, if the number of elements in the tensor overflows an 'int64_t' value, 'AddDim' results in a 'CHECK' failure which provokes a 'std::abort'. Instead, code should use 'AddDimWithStatus'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh"
1559,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22926,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22926."
1560,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41216,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41216: In affected versions, the shape inference function for 'Transpose' is vulnerable to a heap buffer overflow. This occurs whenever 'perm' contains negative elements. The shape inference function does not validate that the indices in 'perm' are all valid. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9
https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14"
1561,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41207,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41207: In affected versions, the implementation of 'ParallelConcat' misses some input validation and can produce a division by 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
1562,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41209,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41209: In affected versions, the implementations for convolution operators trigger a division by 0 if passed empty filter tensor arguments. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hpv-v2rx-c5g6
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
1563,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22925,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22925."
1564,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22922,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22922."
1565,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41227,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41227: In affected versions, the 'ImmutableConst' operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the 'tstring' TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7
https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b
https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585"
1566,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41218,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41218: In affected versions, the shape inference code for 'AllToAll' can be made to execute a division by 0. This occurs whenever the 'split_count' argument is 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273
https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc"
1567,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41196,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41196: In affected versions, the Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative. This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8"
1568,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41201,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41201: In affected versions, during execution, 'EinsumHelper::ParseEquation()' is supposed to set the flags in 'input_has_ellipsis' vector and '*output_has_ellipsis' boolean to indicate whether there is ellipsis in the corresponding inputs and output. However, the code only changes these flags to 'true' and never assigns 'false'. This results in unitialized variable access if callers assume that 'EinsumHelper::ParseEquation()' always sets these flags. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j86v-p27c-73fm
https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6"
1569,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41228,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41228: In affected versions, TensorFlow's 'saved_model_cli' tool is vulnerable to a code injection as it calls 'eval' on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. The issue has been patched by adding a 'safe' flag which defaults to 'True' and an explicit warning for users.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v
https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7"
1570,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41215,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41215: In affected versions, the shape inference code for 'DeserializeSparse' can trigger a null pointer dereference. This is because the shape inference function assumes that the 'serialize_sparse' tensor is a tensor with positive rank (and having '3' as the last dimension). The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r
https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850"
1571,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41223,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41223: In affected versions, the implementation of 'FusedBatchNorm' kernels is vulnerable to a heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr
https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda"
1572,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41224,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41224: In affected versions, the implementation of 'SparseFillEmptyRows' can be made to trigger a heap OOB access. This occurs whenever the size of 'indices' does not match the size of 'values'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v
https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b"
1573,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41217,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41217: In affected versions, the process of building the control flow graph for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not. This occurs because the code assumes that the first node in the pairing (e.g., an 'Enter' node) always exists when encountering the second node (e.g., an 'Exit' node). When this is not the case, 'parent' is 'nullptr' so dereferencing it causes a crash. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5crj-c72x-m7gq
https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff"
1574,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41214,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41214: In affected versions, the shape inference code for 'tf.ragged.cross' has an undefined behavior due to binding a reference to 'nullptr'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
1575,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41205,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41205: In affected versions, the shape inference functions for the 'QuantizeAndDequantizeV*' operations can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f
https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d"
1576,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41219,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41219: In affected versions, the code for sparse matrix multiplication is vulnerable to undefined behavior via binding a reference to 'nullptr'. This occurs whenever the dimensions of 'a' or 'b' are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, it should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x
https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae"
1577,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22924,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22924."
1578,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41202,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41202: In affected versions, while calculating the size of the output within the 'tf.range' kernel, there is a conditional statement of type 'int64 = condition ? int64 : double'. Due to C++ implicit conversion rules, both branches of the condition will be cast to 'double' and the result would be truncated before the assignment. This result in overflows. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx"
1579,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41204,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41204: In affected versions, during TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-786j-5qwq-r36x
https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659"
1580,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41226,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41226: In affected versions, the implementation of 'SparseBinCount' is vulnerable to a heap OOB access. This is because of missing validation between the elements of the 'values' argument and the shape of the sparse output. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-374m-jm66-3vj8
https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba"
1581,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41199,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41199: In affected versions, if 'tf.image.resize' is called with a large input argument then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm"
1582,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41203,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41203: In affected versions, an attacker can trigger undefined behavior, integer overflows, segfaults and 'CHECK'-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7pxj-m4jf-r6h2"
1583,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41213,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf
https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7"
1584,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41222,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41222: In affected versions, the implementation of 'SplitV' can trigger a segfault if an attacker supplies negative arguments. This occurs whenever 'size_splits' contains more than one value and at least one value is negative. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6
https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6"
1585,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41200,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41200: In affected versions, if 'tf.summary.create_file_writer' is called with non-scalar arguments, code crashes due to a 'CHECK'-fail. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f"
1586,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41221,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41221: In affected versions, the shape inference code for the 'Cudnn*' operations can be tricked into accessing invalid memory via a heap buffer overflow. This occurs because the ranks of the 'input', 'input_h' and 'input_c' parameters are not validated, but code assumes they have certain values. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx
https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6"
1587,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41212,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41212: In affected versions, the shape inference code for 'tf.ragged.cross' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
1588,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41225,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41225: In affected versions, TensorFlow's Grappler optimizer has a use of unitialized variable. If the 'train_nodes' vector (obtained from the saved model that gets optimized) does not contain a 'Dequeue' node, then 'dequeue_node' is left unitialized. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw
https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"
1589,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41198,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41198: In affected versions, if 'tf.tile' is called with a large input argument, then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q"
1590,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22923,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow-gpu versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22923."
1591,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-10531,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1","Tensorflow-gpu versions 2.5.3, 2.6.3 and 2.7.1 update its dependency 'icu' to v69.1 to include a security fix."
1592,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21735,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21735: The implementation of 'FractionalMaxPool' can be made to crash a TensorFlow process via a division by 0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj"
1593,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23572,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
1594,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23565,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23565: An attacker can trigger denial of service via assertion failure by altering a 'SavedModel' on disk such that 'AttrDef's of some operation are duplicated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4v5p-v5h9-6xjx"
1595,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23580,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23580: During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-627q-g293-49q7"
1596,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23557,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23557: An attacker can craft a TFLite model that would trigger a division by zero in 'BiasAndClamp' implementation. There is no check that the 'bias_size' is non zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf2j-f278-xh4v"
1597,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23579,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23579: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'SafeToRemoveIdentity' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5f2r-qp73-37mr"
1598,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23577,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. The implementation of `GetInitOp` is vulnerable to a crash caused by dereferencing a null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1599,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23591,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The 'GraphDef' format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a 'GraphDef' containing a fragment such as the following can be consumed when loading a 'SavedModel'. This would result in a stack overflow during execution as resolving each 'NodeDef' means resolving the function itself and its nodes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1600,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23576,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1601,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23562,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23562: The implementation of 'Range' suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr"
1602,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21738,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21738: The implementation of 'SparseCountSparseOutput' can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6"
1603,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23588,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1604,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23582,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23582: A malicious user can cause a denial of service by altering a 'SavedModel' such that 'TensorByteSize' would trigger 'CHECK' failures. 'TensorShape' constructor throws a 'CHECK'-fail if shape is partial or has a number of elements that would overflow the size of an 'int'. The 'PartialTensorShape' constructor instead does not cause a 'CHECK'-abort if the shape is partial, which is exactly what this function needs to be able to return '-1'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4j82-5ccr-4r8v"
1605,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21726,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21726: The implementation of 'Dequantize' does not fully validate the value of 'axis' and can result in heap OOB accesses. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72"
1606,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23583,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1607,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23573,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1608,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23574,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. There is a typo in TensorFlow's `SpecializeType` which results in heap OOB read/write. Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
1609,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23569,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23569: Multiple operations in TensorFlow can be used to trigger a denial of service via 'CHECK'-fails (i.e., assertion failures). This is similar to CVE-2021-41197 and has a similar fix. It is possible that other similar instances exist.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qj5r-f9mv-rffh"
1610,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23559,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23559: An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both 'embedding_size' and 'lookup_size' are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98p5-x8x4-c9m5"
1611,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21729,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21729: The implementation of 'UnravelIndex' is vulnerable to a division by zero caused by an integer overflow bug.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j"
1612,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23578,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. If a graph node is invalid, TensorFlow can leak memory in the implementation of `ImmutableExecutorState::Initialize`. Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1613,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23589,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place). First, during constant folding, the `GraphDef` might not have the required nodes for the binary operation. If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect. We have a similar issue during `IsIdentityConsumingSwitch`. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1614,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23581,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23581: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'IsSimplifiableReshape' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq86-3f29-px2c"
1615,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21737,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21737: The implementation of '*Bincount' operations allows malicious users to cause denial of service by passing in arguments which would trigger a 'CHECK'-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in 'CHECK' failures later when the output tensors get allocated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2vv-v9cg-qhh7"
1616,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23575,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1617,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23558,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23558: An attacker can craft a TFLite model that would cause an integer overflow in 'TfLiteIntArrayCreate'. The 'TfLiteIntArrayGetSizeInBytes' returns an 'int' instead of a 'size_t'. An attacker can control model inputs such that 'computed_size' overflows the size of 'int' datatype.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9gwq-6cwj-47h3"
1618,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23567,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23567: The implementations of 'Sparse*Cwise*' ops are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or 'CHECK'-fails when building new 'TensorShape' objects (so, assert failures based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43"
1619,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21739,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21739: The implementation of 'QuantizedMaxPool' has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5"
1620,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23586,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1621,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21727,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21727: The implementation of shape inference for 'Dequantize' is vulnerable to an integer overflow weakness. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes 'axis + 1', an attacker can trigger an integer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw"
1622,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23571,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1623,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23564,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23564: When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a 'CHECK' assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3"
1624,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21733,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21733: The implementation of 'StringNGrams' can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. There is missing a validation on 'pad_witdh' and that result in computing a negative value for 'ngram_width' which is later used to allocate parts of the output.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g"
1625,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23560,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23560: An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4hvf-hxvg-f67v"
1626,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23587,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1627,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21725,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21725: The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f"
1628,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21732,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21732: The implementation of 'ThreadPoolHandle' can be used to trigger a denial of service attack by allocating too much memory. This is because the 'num_threads' argument is only checked to not be negative, but there is no upper bound on its value.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq"
1629,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21740,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21740: The implementation of 'SparseCountSparseOutput' is vulnerable to a heap overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-44qp-9wwf-734r"
1630,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23566,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. TensorFlow is vulnerable to a heap OOB write in `Grappler`. The `set_output` function writes to an array at the specified index. Hence, this gives a malicious user a write primitive. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1631,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23584,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1632,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23561,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23561: An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c78-vcq7-7vxq"
1633,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21731,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21731: The implementation of shape inference for 'ConcatV2' can be used to trigger a denial of service attack via a segfault caused by a type confusion. The 'axis' argument is translated into 'concat_dim' in the 'ConcatShapeHelper' helper function. Then, a value for 'min_rank' is computed based on 'concat_dim'. This is then used to validate that the 'values' tensor has at least the required rank. However, 'WithRankAtLeast' receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented. Due to the fact that 'min_rank' is a 32-bits value and the value of 'axis', the 'rank' argument is a negative value, so the error check is bypassed.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
1634,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23568,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23568: The implementation of 'AddManySparseToTensorsMap' is vulnerable to an integer overflow which results in a 'CHECK'-fail when building new 'TensorShape' objects (so, an assert failure based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2"
1635,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21728,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
1636,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23563,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23563: In multiple places, TensorFlow uses 'tempfile.mktemp' to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in 'mktemp' and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the 'mktemp' function usage. It was replaced 'mktemp' with the safer 'mkstemp'/'mkdtemp' functions, according to the usage pattern.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wc4g-r73w-x8mm"
1637,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21736,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21736: The implementation of 'SparseTensorSliceDataset' has an undefined behavior: under certain conditions, it can be made to dereference a 'nullptr' value. The 3 input arguments to 'SparseTensorSliceDataset' represent a sparse tensor. However, there are some preconditions that these arguments must satisfy, but these are not validated in the implementation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9"
1638,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23595,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23595: When building an XLA compilation cache, if default settings are used, TensorFlow triggers a null pointer dereference. In the default scenario, all devices are allowed, so 'flr->config_proto' is 'nullptr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fpcp-9h7m-ffpx"
1639,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21730,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21730: The implementation of 'FractionalAvgPoolGrad' does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4"
1640,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23570,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
1641,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21741,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21741: An attacker can craft a TFLite model that would trigger a division by zero in the implementation of depthwise convolutions. The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is strictly positive.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-428x-9xc2-m8mj"
1642,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-21734,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21734: The implementation of 'MapStage' is vulnerable to a 'CHECK'-fail if the key tensor is not a scalar.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm"
1643,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23585,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. When decoding PNG images TensorFlow can produce a memory leak if the image is invalid. After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
1644,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41206,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow-gpu versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41206: In affected versions, several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or 'CHECK'-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. These issues were discovered internally via tooling while working on improving/testing GPU op determinism. As such, there aren't reproducers and there will be multiple fixes for these issues.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pgcq-h79j-2f69
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x"
1645,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41208,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow-gpu versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41208: In affected versions, the code for boosted trees in TensorFlow is still missing validation. As a result, attackers can trigger denial of service (via dereferencing 'nullptr's or via 'CHECK'-failures) as well as abuse undefined behavior (binding references to 'nullptr's). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call. Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs. TensorFlow's boosted trees APIs will be deprecated in subsequent releases.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-57wx-m983-2f88
https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6gw-r52c-724r"
1646,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29200,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29200: Missing validation which causes denial of service via 'LSTMBlockCell'."
1647,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29198,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29198:  Missing validation which causes denial of service via 'SparseTensorToCSRSparseMatrix'."
1648,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29196,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29196: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
1649,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-30115,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-30115."
1650,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-25032,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'zlib' to v1.2.12 to handle CVE-2018-25032."
1651,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29203,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29203: Integer overflow in 'SpaceToBatchND'."
1652,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-22576,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-22576."
1653,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27776,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27776."
1654,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27775,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27775."
1655,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29216,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29216: Code injection in 'saved_model_cli'."
1656,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29193,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29193: missing validation which causes 'TensorSummaryV2' to crash."
1657,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29207,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29207: Issues arising from undefined behavior stemming from users supplying invalid resource handles."
1658,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29197: Missing validation which causes denial of service via 'UnsortedSegmentJoin'."
1659,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29208,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29208: Segfault and OOB write due to incomplete validation in 'EditDistance'."
1660,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29195,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29195: Missing validation which causes denial of service via 'StagePeek'."
1661,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29194,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29194: Missing validation which causes denial of service via 'DeleteSessionTensor'."
1662,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2021-41197: Affected versions allow tensors to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an 'int64_t'. If an overflow occurs, 'MultiplyWithoutOverflow' would return a negative result. In the majority of TensorFlow codebase this then results in a 'CHECK'-failure. Newer constructs exist which return a 'Status' instead of crashing the binary. This is similar to CVE-2021-29584.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-vrvr-3rx2
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mw6j-hh29-h379"
1663,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27774,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27774."
1664,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27778,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27778."
1665,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27779,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27779."
1666,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27781,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27781."
1667,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29202,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29202: Denial of service in 'tf.ragged.constant' due to lack of validation."
1668,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29201,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29201: Missing validation which results in undefined behavior in 'QuantizedConv2D'."
1669,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29206,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29206: Missing validation which results in undefined behavior in 'SparseTensorDenseAdd'."
1670,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29204,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29204: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
1671,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29211,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29211: Segfault when 'tf.histogram_fixed_width' is called with NaN values."
1672,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29192,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29192: missing validation which crashes 'QuantizeAndDequantizeV4Grad'."
1673,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27780,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27780."
1674,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29205,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29205: Segfault due to missing support for quantized types."
1675,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29199,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29199: Missing validation which causes denial of service via 'LoadAndRemapMatrix'."
1676,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29213,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29213: Crashes stemming from incomplete validation in signal ops."
1677,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29209,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29209: Type confusion leading to 'CHECK'-failure based denial of service."
1678,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-27782,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27782."
1679,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29191,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29191: Missing validation which causes denial of service via 'GetSessionTensor'."
1680,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29212,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow-gpu versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29212: Core dump when loading TFLite models with quantization."
1681,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35988,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35988: 'CHECK' fail in 'tf.linalg.matrix_rank'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c"
1682,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36003,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36003: 'CHECK' fail in 'RandomPoissonV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq"
1683,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35985,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35985: 'CHECK' fail in 'LRNGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp"
1684,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35937,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35937: OOB read in 'Gather_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h"
1685,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35939,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35939: OOB write in 'scatter_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf"
1686,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35952,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35952: 'CHECK' failures in 'UnbatchGradOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47"
1687,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35960,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35960: 'CHECK' failure in 'TensorListReserve' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4"
1688,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35979,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35979: Segfault in 'QuantizedRelu' and 'QuantizedRelu6'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x"
1689,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36015,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36015: Integer overflow in math ops. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rh87-q4vg-m45j"
1690,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36017,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36017: Segfault in 'Requantize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc"
1691,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35969,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35969: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx"
1692,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35934,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35934: 'CHECK' failure in tf.reshape via overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45"
1693,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36002,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36002: 'CHECK' fail in 'Unbatch'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg"
1694,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36012,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36012: Assertion fail on MLIR empty edge names.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jvhc-5hhr-w3v5"
1695,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35983,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35983: 'CHECK' fail in 'Save' and 'SaveSlices'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4"
1696,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35984,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35984: 'CHECK' fail in 'ParameterizedTruncatedNormal'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5"
1697,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35996,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35996: Floating point exception in 'Conv2D'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37"
1698,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35990,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35990: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannelGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh"
1699,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35959,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35959: 'CHECK' failures in 'AvgPool3DGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq"
1700,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35964,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35964: Segfault in 'BlockLSTMGradV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668"
1701,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35997,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35997: 'CHECK' fail in 'tf.sparse.cross'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf"
1702,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35998,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35998: 'CHECK' fail in 'EmptyTensorList'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5"
1703,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36013,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36013: Null-dereference in 'mlir::tfg::GraphDefImporter::ConvertNodeDef'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828c-5j5q-vrjq"
1704,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35981,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35981: 'CHECK' fail in 'FractionalMaxPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw"
1705,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36000,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36000: 'CHECK' fail in 'Eig'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v"
1706,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35992,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35992: 'CHECK' fail in 'TensorListFromTensor'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp"
1707,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35986,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35986: Segfault in 'RaggedBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v"
1708,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35974,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35974: Segfault in 'QuantizeDownAndShrinkRange'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x"
1709,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35973,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35973: Segfault in 'QuantizedMatMul'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v"
1710,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35987,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35987: 'CHECK' fail in 'DenseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49"
1711,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36026,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36026: 'CHECK' fail in 'QuantizeAndDequantizeV3'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq"
1712,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35966,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35966: Segfault in 'QuantizedAvgPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9"
1713,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36011,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36011: Null dereference on MLIR on empty function attributes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv43-93gv-vm8f"
1714,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36027,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36027: Segfault TFLite converter on per-channel quantized transposed convolutions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr"
1715,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35982,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35982: Segfault in 'SparseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv"
1716,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35972,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35972: Segfault in 'QuantizedBiasAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9"
1717,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35993,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35993: 'CHECK' fail in 'SetSize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9"
1718,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36014,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36014: Null-dereference in 'mlir::tfg::TFOp::nameAttr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7j3m-8g3c-9qqq"
1719,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35941,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35941: 'CHECK' failure in 'AvgPoolOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5"
1720,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36016,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36016: 'CHECK'-fail in 'tensorflow::full_type::SubstituteFromAttrs'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g468-qj8g-vcjc"
1721,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35965,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35965: Segfault in 'LowerBound' and 'UpperBound'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36"
1722,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36019,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36019: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannel'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7"
1723,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35967,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35967: Segfault in 'QuantizedAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x"
1724,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35968,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35968: 'CHECK' fail in 'AvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25"
1725,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35970,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35970: Segfault in 'QuantizedInstanceNorm'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp"
1726,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35994,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35994: 'CHECK' fail in 'CollectiveGather'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f"
1727,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35940,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35940: Int overflow in 'RaggedRangeOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x"
1728,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36001,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36001: 'CHECK' fail in 'DrawBoundingBoxes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5"
1729,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35963,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35963: 'CHECK' failures in 'FractionalAvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm"
1730,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35999,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35999: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw"
1731,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35995,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35995: 'CHECK' fail in 'AudioSummaryV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4"
1732,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36004,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36004: 'CHECK' fail in 'tf.random.gamma'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q"
1733,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35971,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35971: 'CHECK' fail in 'FakeQuantWithMinMaxVars'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7"
1734,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36018,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36018: 'CHECK' fail in 'RaggedTensorToVariant'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf"
1735,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35989,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35989: 'CHECK' fail in 'MaxPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq"
1736,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-36005,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","Tensorflow-gpu 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36005: 'CHECK' fail in 'FakeQuantWithMinMaxVarsGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm"
1737,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41889,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41889: If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a 'nullptr', which is not caught. An example can be seen in 'tf.compat.v1.extract_volume_patches' by passing in quantized tensors as input 'ksizes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xxcj-rhqg-m46g"
1738,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41902,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."
1739,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41901,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41901: An input 'sparse_matrix' that is not a matrix with a shape with rank 0 will trigger a 'CHECK' fail in 'tf.raw_ops.SparseMatrixNNZ'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9fm-r5mm-rf9f"
1740,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41895,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41895: If 'MirrorPadGrad' is given outsize input 'paddings', TensorFlow will give a heap OOB error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gq2j-cr96-gvqx"
1741,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41891,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41891: If 'tf.raw_ops.TensorListConcat' is given 'element_shape=[]', it results segmentation fault which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-66vq-54fq-6jvv"
1742,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41911,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41911: When printing a tensor, we get it's data as a 'const char*' array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from 'char' to 'bool' are undefined if the 'char' is not '0' or '1', so sanitizers/fuzzers will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pf36-r9c6-h97j"
1743,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41885,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41885: When 'tf.raw_ops.FusedResizeAndPadConv2D' is given a large tensor shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-762h-vpvw-3rcx"
1744,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41899,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41899: TensorFlow is an open source platform for machine learning. Inputs 'dense_features' or 'example_state_data' not of rank 2 will trigger a 'CHECK' fail in 'SdcaOptimizer'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27rc-728f-x5w2"
1745,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41893,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41893: If 'tf.raw_ops.TensorListResize' is given a nonscalar value for input 'size', it results 'CHECK' fail which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-67pf-62xr-q35m"
1746,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41909,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41909: An input 'encoded' that is not a valid 'CompositeTensorVariant' tensor will trigger a segfault in 'tf.raw_ops.CompositeTensorVariantToComponents'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjx6-v474-2ch9"
1747,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41908,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41908: TensorFlow is an open source platform for machine learning. An input 'token' that is not a UTF-8 bytestring will trigger a 'CHECK' fail in 'tf.raw_ops.PyFunc'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv77-9g28-cwg3"
1748,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41900,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41900: The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472"
1749,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41890,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41890: If 'BCast::ToShape' is given input larger than an 'int32', it will crash, despite being supposed to handle up to an 'int64'. An example can be seen in 'tf.experimental.numpy.outer' by passing in large input to the input 'b'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h246-cgh4-7475"
1750,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41880,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41880: When the 'BaseCandidateSamplerOp' function receives a value in 'true_classes' larger than 'range_max', a heap oob read occurs.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j"
1751,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41907,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41907: When 'tf.raw_ops.ResizeNearestNeighborGrad' is given a large 'size' input, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-368v-7v32-52fx"
1752,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41896,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41896: If 'ThreadUnsafeUnigramCandidateSampler' is given input 'filterbank_channel_count' greater than the allowed max size, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35"
1753,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41884,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41884: If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jq6x-99hj-q636"
1754,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41897,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41897: If 'FractionMaxPoolGrad' is given outsize inputs 'row_pooling_sequence' and 'col_pooling_sequence', TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2w8-jw48-fr7j"
1755,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41886,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41886: When 'tf.raw_ops.ImageProjectiveTransformV2' is given a large output shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-54pp-c6pp-7fpx"
1756,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41910,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41910: The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-frqp-wp83-qggv"
1757,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41888,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41888: When running on GPU, 'tf.image.generate_bounding_box_proposals' receives a 'scores' input that must be of rank 4 but is not checked.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6x99-gv2v-q76v"
1758,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41898,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41898: If 'SparseFillEmptyRowsGrad' is given empty inputs, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hq7g-wwwp-q46h"
1759,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41894,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41894: The reference kernel of the 'CONV_3D_TRANSPOSE' TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. Instead of 'data_ptr += num_channels;' it should be 'data_ptr += output_num_channels;' as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels > output_num_channels. An attacker can craft a model with a specific number of input channels. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6q3-vv32-2cq5"
1760,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35935,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","Tensorflow-gpu 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35935: 'CHECK' failure in 'SobolSample' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqvq-fvhr-v6hc"
1761,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-35991,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","Tensorflow-gpu 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35991: 'CHECK' fail in 'TensorListScatter' and 'TensorListScatterV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xf83-q765-xm6m"
1762,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41887,"<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.9.3 and 2.10.1 include a fix for CVE-2022-41887: 'tf.keras.losses.poisson' receives a 'y_pred' and 'y_true' that are passed through 'functor::mul' in 'BinaryOp'. If the resulting dimensions overflow an 'int32', TensorFlow will crash due to a size mismatch during broadcast assignment.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fvv-46hw-vpg3"
1763,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2018-8825,<=1.7,Google TensorFlow 1.7 and below is affected by: Buffer Overflow. The impact is: execute arbitrary code (local). See CVE-2018-8825.
1764,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15358,">=1.15.0rc0,<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 updates its dependency ""SQLite"" to handle CVE-2020-15358."
1765,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow-gpu versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
1766,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-5482,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow-gpu versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5482."
1767,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-19646,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow-gpu versions 1.15.2 and 2.0.1 update its dependency ""SQLite"" to handle CVE-2019-19646."
1768,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-5215,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow-gpu versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(""hello"", tf.float16), if eager execution is enabled."
1769,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow-gpu versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
1770,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2019-16168,">=2.0.0a0,<2.0.1,<1.15.2",Tensorflow-gpu versions 1.15.2 and 2.0.1 updates 'sqlite3' to handle CVE-2019-16168.
1771,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29567,">=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.5.0rc0,<2.5.0","Tensorflow-gpu versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers."
1772,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-41883,">=2.10.0rc0,<2.10.1","Tensorflow-gpu 2.10.1 includes a fix for CVE-2022-41883: When ops that have specified input sizes receive a differing number of inputs, the executor will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w58w-79xv-6vcj"
1773,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15213,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15213: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimension of the output tensor, attackers can use a very large value to trigger a large allocation. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps. However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87"
1774,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15212,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15212: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to ""segment_ids_data"" can alter ""output_index"" and then write to outside of ""output_data"" buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
1775,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15214,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15214: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimension of output tensor. This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array. This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
1776,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15192,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15192: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes a list of strings to 'dlpack.to_dlpack' there is a memory leak following an expected validation failure. The issue occurs because the 'status' argument during validation failures is not properly checked. Since each of the above methods can return an error status, the 'status' value must be checked before continuing.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv"
1777,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15193,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of ""dlpack.to_dlpack"" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a ""reinterpret_cast"". Since the ""PyObject"" is a Python object, not a Tensorflow tensor, the cast to ""EagerTensor"" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v"
1778,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15191,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow-gpu versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15191: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to 'dlpack.to_dlpack' the expected validations will cause variables to bind to 'nullptr' while setting a 'status' variable to the error condition. However, this 'status' argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with '-fsanitize=null'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr"
1779,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15197,">=2.3.0rc0,<2.3.1","Tensorflow-gpu version 2.3.1 includes a fix for CVE-2020-15197: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix. However, malicious users can pass in tensors of different rank, resulting in a ""CHECK"" assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02."
1780,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15196,">=2.3.0rc0,<2.3.1","Tensorflow-gpu version 2.3.1 includes a fix for CVE-2020-15196: In Tensorflow version 2.3.0, the ""SparseCountSparseOutput"" and ""RaggedCountSparseOutput"" implementations don't validate that the ""weights"" tensor has the same shape as the data. The check exists for ""DenseCountSparseOutput"", where both tensors are fully specified. In the sparse and ragged count weights are still accessed in parallel with the data. But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph"
1781,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15200,">=2.3.0rc0,<2.3.1","Tensorflow-gpu 2.3.1 includes a fix for CVE-2020-15200: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A ""BatchedMap"" is equivalent to a vector where each element is a hashmap. However, if the first element of ""splits_values"" is not 0, ""batch_idx"" will never be 1, hence there will be no hashmap at index 0 in ""per_batch_counts"". Trying to access that in the user code results in a segmentation fault. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3"
1782,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15198,">=2.3.0rc0,<2.3.1","Tensorflow-gpu 2.3.1 includes a fix for CVE-2020-15198: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has the same shape as the ""values"" one. The values in these tensors are always accessed in parallel. Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3"
1783,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15199,">=2.3.0rc0,<2.3.1","Tensorflow-gpu 2.3.1 includes a fix for CVE-2020-15199: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the ""splits"" tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure. Since ""BatchedMap"" is equivalent to a vector, it needs to have at least one element to not be ""nullptr"". If user passes a ""splits"" tensor that is empty or has exactly one element, we get a ""SIGABRT"" signal raised by the operating system. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h"
1784,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-15201,">=2.3.0rc0,<2.3.1","Tensorflow-gpu 2.3.1 includes a fix for CVE-2020-15201: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Hence, the code is prone to heap buffer overflow. If ""split_values"" does not end with a value at least ""num_values"" then the ""while"" loop condition will trigger a read outside of the bounds of ""split_values"" once ""batch_idx"" grows too large. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4"
1785,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37689,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37689: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. This is caused by the MLIR optimization of 'L2NormalizeReduceAxis' operator. The implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements. The Tensorflow team has patched the issue in GitHub commit d6b57f461b39fd1aa8c1b870f1b974aac3554955."
1786,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37671,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37671: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.Map*' and 'tf.raw_ops.OrderedMap*' operations. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that 'indices' is in ascending order, but does not check that 'indices' is not empty. The Tensorflow team has patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac."
1787,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37648,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37648: In affected versions the code for 'tf.raw_ops.SaveV2' does not properly validate the inputs and an attacker can trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses 'ValidateInputs' to check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer above. However, the validation uses 'OP_REQUIRES' which translates to setting the 'Status' object of the current 'OpKernelContext' to an error status, followed by an empty 'return' statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the nQext line in 'Compute' that follows the call to 'ValidateInputs'. This is equivalent to lacking the validation. The Tensorflow team has patched the issue in GitHub commit 9728c60e136912a12d99ca56e106b7cce7af5986."
1788,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37635,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37635: In affected versions the implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data. The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor. The Tensorflow team has patched the issue in GitHub commit 87158f43f05f2720a374f3e6d22a7aaa3a33f750."
1789,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37667,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37667: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.UnicodeEncode'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the 'input_splits' tensor before validating that this tensor is not empty. The Tensorflow team has patched the issue in GitHub commit 2e0ee46f1a47675152d3d865797a18358881d7a6."
1790,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37637,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37637: It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. The Tensorflow team has patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5."
1791,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37680,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37680: In affected versions the implementation of fully connected layers in TFLite is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226). The Tensorflow team has patched the issue in GitHub commit 718721986aa137691ee23f03638867151f74935f."
1792,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37683,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37683: In affected versions the implementation of division in TFLite is vulnerable to a division by 0 error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. The Tensorflow team has patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28."
1793,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37636,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37636: In affected versions the implementation of 'tf.raw_ops.SparseDenseCwiseDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit d9204be9f49520cdaaeb2541d1dc5187b23f31d9."
1794,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37642,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37642: In affected versions the implementation of 'tf.raw_ops.ResourceScatterDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76."
1795,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37656,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37656: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToSparse'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order. The Tensorflow team has patched the issue in GitHub commit 1071f554dbd09f7e101324d366eec5f4fe5a3ece."
1796,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37638,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37638: Sending invalid argument for 'row_partition_types' of 'tf.raw_ops.RaggedTensorToTensor' API results in a null pointer dereference and undefined behavior. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty. The Tensorflow team has patched the issue in GitHub commit 301ae88b331d37a2a16159b65b255f4f9eb39314."
1797,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37652,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37652: In affected versions the implementation for 'tf.raw_ops.BoostedTreesCreateEnsemble' can result in a use after free error if an attacker supplies specially crafted arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent 'free'-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed. The Tensorflow team has patched the issue in GitHub commit 5ecec9c6fbdbc6be03295685190a45e7eee726ab."
1798,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37654,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37654: In affected versions an attacker can trigger a crash via a 'CHECK'-fail in debug builds of TensorFlow using 'tf.raw_ops.ResourceGather' or a read from outside the bounds of heap allocated data in the same API in a release build. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the 'batch_dims' value that the user supplies is less than the rank of the input tensor. Since the implementation uses several for loops over the dimensions of 'tensor', this results in reading data from outside the bounds of heap allocated buffer backing the tensor. The Tensorflow team has patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d."
1799,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37651,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37651: In affected versions the implementation for 'tf.raw_ops.FractionalAvgPoolGrad' can be tricked into accessing data outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty 'EigenDoubleMatrixMap' and then accesses this buffer with indices that are outside of the empty area. The Tensorflow team has patched the issue in GitHub commit 0f931751fb20f565c4e94aa6df58d54a003cdb30."
1800,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37639,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37639: When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer. Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the 'tensor_name' user controlled input and immediately retrieves the tensor at the restoration index (controlled via 'preferred_shard' argument). This occurs without validating that the provided list has enough values. If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements and if the restoration index is outside the bounds, this results in heap OOB read. The Tensorflow team has patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622."
1801,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37658,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37658: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixSetDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit ff8894044dfae5568ecbf2ed514c1a37dc394f1b."
1802,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37649,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37649: The code for 'tf.raw_ops.UncompressElement' can be made to trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a 'CompressedElement' from a 'Variant' tensor and then proceeds to dereference it for decompressing. There is no check that the 'Variant' tensor contained a 'CompressedElement', so the pointer is actually 'nullptr'. The Tensorflow team has patched the issue in GitHub commit 7bdf50bb4f5c54a4997c379092888546c97c3ebd."
1803,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37659,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37659: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations). The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr. We have patched the issue in GitHub commit 93f428fd1768df147171ed674fee1fc5ab8309ec."
1804,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37664,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37664: In affected versions an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range. The Tensorflow team has patched the issue in GitHub commit e84c975313e8e8e38bb2ea118196369c45c51378."
1805,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37647,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37647: When a user does not supply arguments that determine a valid sparse tensor, 'tf.raw_ops.SparseTensorSliceDataset' implementation can be made to dereference a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either 'indices' or 'values' are provided for an empty sparse tensor when the other is not. If 'indices' is empty, then code that performs validation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference. If 'indices' as provided by the user is empty, then 'indices' in the C++ code above is backed by an empty 'std::vector', hence calling 'indices->dim_size(0)' results in null pointer dereferencing (same as calling 'std::vector::at()' on an empty vector). The Tensorflow team has patched the issue in GitHub commit 02cc160e29d20631de3859c6653184e3f876b9d7."
1806,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37686,">=2.3.0rc0,<2.3.4rc0,>=2.4.0rc0,<2.4.3rc0,>=2.5.0rc0,<=2.5.0,>=2.6.0rc0,<2.6.0","Several versions of TensorFlow are affected by CVE-2021-37686: In affected versions, the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for ellipsis in axis definition (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that 'ellipsis_end_idx' is smaller than 'i' (e.g., always negative). In this case, the inner loop does not increase 'i' and the 'continue' statement causes execution to skip over the preincrement at the end of the outer loop. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695."
1807,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-26269,">=2.4.0rc0,<2.4.0","Tensorflow-gpu 2.4.0 includes a fix for CVE-2020-26269: In TensorFlow release candidate versions 2.4.0rc*, the general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of the array holding the directories. There are multiple invariants and preconditions that are assumed by the parallel implementation of GetMatchingPaths but are not verified by the PRs introducing it (#40861 and #44310). Thus, we are completely rewriting the implementation to fully specify and validate these. This is patched in version 2.4.0. This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched."
1808,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29614,">=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.5.0rc0,<2.5.0","Tensorflow-gpu 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory."
1809,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29530,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by invalid validation in 'SparseMatrixSparseCholesky'. See CVE-2021-29530."
1810,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29525,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropInput'. See CVE-2021-29525."
1811,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29519,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'SparseCross' caused by type confusion. See CVE-2021-29519."
1812,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29522,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv3DBackprop*'. See CVE-2021-29522."
1813,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29524,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropFilter'. See CVE-2021-29524."
1814,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29532,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29532: An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads."
1815,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29518,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix vulnerabilities where session operations in eager mode lead to null pointer dereferences. See CVE-2021-29518."
1816,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29523,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'AddManySparseToTensorsMap'. See CVE-2021-29523."
1817,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29552,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29552: An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar. Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination."
1818,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29548,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization)."
1819,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29533,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 includes a fix for CVE-2021-29533: An attacker can trigger a denial of service via a 'CHECK' failure by passing an empty image to 'tf.raw_ops.DrawBoundingBoxes'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses 'CHECK_*' assertions instead of 'OP_REQUIRES' to validate user controlled inputs. Whereas 'OP_REQUIRES' allows returning an error condition back to the user, the 'CHECK_*' macros result in a crash if the condition is false, similar to 'assert'. In this case, 'height' is 0 from the 'images' input. This results in 'max_box_row_clamp' being negative and the assertion being falsified, followed by aborting program execution."
1820,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29520,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a heap buffer overflow in 'Conv3DBackprop*'. See CVE-2021-29520."
1821,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29534,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29534: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.SparseConcat'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in 'shapes[0]' as dimensions for the output shape. The 'TensorShape' constructor (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a 'CHECK' operation which triggers when 'InitDims' (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use 'BuildTensorShapeBase' or 'AddDimWithStatus' to prevent 'CHECK'-failures in the presence of overflows."
1822,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29513,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion."
1823,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29531,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.EncodePng'. See CVE-2021-29531."
1824,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29521,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a segfault in 'SparseCountSparseOutput'. See CVE-2021-29521."
1825,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29538,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29538: An attacker can cause a division by zero to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments). If all shapes are empty then 'work_unit_size' is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service."
1826,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29549,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29549: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero. Since `vector_num_elements` is determined based on input shapes (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0."
1827,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29537,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29537: An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly."
1828,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29615,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow in 'ParseAttrValue' with nested tensors. See CVE-2021-29615."
1829,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29539,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument."
1830,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29529,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap buffer overflow caused by rounding. See CVE-2021-29529."
1831,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29535,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29535: An attacker can cause a heap buffer overflow in 'QuantizedMul' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
1832,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29541,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'StringNGrams'. See CVE-2021-29541."
1833,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29542,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'StringNGrams'. See CVE-2021-29542."
1834,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29536,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29536: An attacker can cause a heap buffer overflow in 'QuantizedReshape' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
1835,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29544,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29544: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.QuantizeAndDequantizeV4Grad'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the 'input_*' tensors. In turn, this results in the tensors being passes as they are to 'QuantizeAndDequantizePerChannelGradientImpl' (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306). However, the 'vec<T>' method, requires the rank to 1 and triggers a 'CHECK' failure otherwise."
1836,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29543,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29543: An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks."
1837,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29540,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29540: TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in 'filter_sizes'. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor."
1838,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8169,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency 'curl' to version 7.76.0 to handle CVE-2020-8169."
1839,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29515,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a reference binding to null pointer in 'MatrixDiag*' ops. See CVE-2021-29515."
1840,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29516,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix fixes a null pointer dereference via invalid Ragged Tensors. See CVE-2021-29516."
1841,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29517,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in 'Conv3D'. See CVE-2021-29517."
1842,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29594,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's convolution code. See CVE-2021-29594."
1843,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29596,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'EmbeddingLookup'. See CVE-2021-29596."
1844,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29558,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29558: An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset."
1845,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29551,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29551: The implementation of 'MatrixTriangularSolve' (https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails."
1846,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29545,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29545: An attacker can trigger a denial of service via a 'CHECK'-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at 'indices(i, 0)' is such that 'indices(i, 0) + 1' is outside the bounds of 'csr_row_ptr', this results in writing outside of bounds of heap allocated data."
1847,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29592,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in TFLite's 'Reshape' operator. See CVE-2021-29592."
1848,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29581,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'CTCBeamSearchDecoder'. See CVE-2021-29581."
1849,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29617,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29617: An attacker can cause a denial of service via `CHECK`-fail in `tf.strings.substr` with invalid arguments."
1850,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29512,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds."
1851,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29574,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior in 'MaxPool3DGradGrad'. See CVE-2021-29574."
1852,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29556,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29556: An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument."
1853,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29613,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'tf.raw_ops.CTCLoss'. See CVE-2021-29613."
1854,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29526,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'Conv2D'. See CVE-2021-29526."
1855,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29561,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'LoadAndRemapMatrix'. See CVE-2021-29561."
1856,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29527,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedConv2D'. See CVE-2021-29527."
1857,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29595,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29595: The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0."
1858,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29585,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29585: The TFLite computation for size of output after padding, `ComputeOutSize`(https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division. Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0."
1859,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29570,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'MaxPoolGradWithArgmax'. See CVE-2021-29570."
1860,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29589,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29589: The reference implementation of the `GatherNd` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966). An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension."
1861,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29559,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB access in unicode ops. See CVE-2021-29559."
1862,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29555,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'FusedBatchNorm'. See CVE-2021-29555."
1863,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29514,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor."
1864,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29588,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'TransposeConv'. See CVE-2021-29588."
1865,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29557,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'SparseMatMul'. See CVE-2021-29557."
1866,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29612,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'BandedTriangularSolve'. See CVE-2021-29612."
1867,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29584,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail due to integer overflow. See CVE-2021-29584."
1868,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29591,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow due to looping TFLite subgraph. See CVE-2021-29591."
1869,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29575,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an overflow and a denial of service in 'tf.raw_ops.ReverseSequence'. See CVE-2021-29575."
1870,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29582,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in 'tf.raw_ops.Dequantize'. See CVE-2021-29582."
1871,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29606,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap OOB read in TFLite. See CVE-2021-29606."
1872,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29562,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.IRFFT'. See CVE-2021-29562."
1873,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29597,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SpaceToBatchNd'. See CVE-2021-29597."
1874,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29599,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'Split'. See CVE-2021-29599."
1875,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29607,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseSparseMinimum'. See CVE-2021-29607."
1876,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29565,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'SparseFillEmptyRows'. See CVE-2021-29565."
1877,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29583,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29583: The implementation of 'tf.raw_ops.FusedBatchNorm' is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that 'scale', 'offset', 'mean' and 'variance' (the last two only when required) all have the same number of elements as the number of channels of 'x'. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior."
1878,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29608,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29608: TensorFlow is an end-to-end open source platform for machine learning. Due to lack of validation in 'tf.raw_ops.RaggedTensorToTensor', an attacker can exploit an undefined behavior if input arguments are empty. The implementation (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones. There are multiple 'DCHECK' validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything."
1879,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29609,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseAdd'. See CVE-2021-29609."
1880,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29619,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'tf.raw_ops.SparseCountSparseOutput'. See CVE-2021-29619."
1881,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29578,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'FractionalAvgPoolGrad'. See CVE-2021-29578."
1882,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29602,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'DepthwiseConv'. See CVE-2021-29602."
1883,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8231,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency ""curl"" to v7.76.0 to include security fixes."
1884,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8177,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update 'curl' to '7.76.0' to handle CVE-2020-8177."
1885,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8286,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 updates 'curl' to '7.76.0' to handle CVE-2020-8286: curl 7.41.0 through 7.73.0 is vulnerable to an improper check for certificate revocation due to insufficient verification of the OCSP response."
1886,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29593,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'BatchToSpaceNd'. See CVE-2021-29593."
1887,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29554,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'DenseCountSparseOutput'. See CVE-2021-29554."
1888,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29577,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'AvgPool3DGrad'. See CVE-2021-29577."
1889,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8284,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 update its dependency ""curl"" to handle CVE-2020-8284."
1890,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29579,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPoolGrad'. See CVE-2021-29579."
1891,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29605,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite memory allocation. See CVE-2021-29605."
1892,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29576,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPool3DGradGrad'. See CVE-2021-29576."
1893,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29600,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'OneHot'. See CVE-2021-29600."
1894,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29564,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'EditDistance'. See CVE-2021-29564."
1895,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29547,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29547: An attacker can cause a segfault and denial of service via accessing data outside of bounds in 'tf.raw_ops.QuantizedBatchNormWithGlobalNormalization'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, '.flat<T>()' is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds."
1896,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29603,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB write in TFLite. See CVE-2021-29603."
1897,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29604,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of hashtable lookup. See CVE-2021-29604."
1898,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29566,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29566: An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to 'tf.raw_ops.Dilation2DBackpropInput'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array. The values for 'h_out' and 'w_out' are guaranteed to be in range for 'out_backprop' (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating 'h_in_max'/'w_in_max' and 'in_backprop'."
1899,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29587,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29587: TensorFlow is an end-to-end open source platform for machine learning. The `Prepare` step of the `SpaceToDepth` TFLite operator does not check for 0 before division (https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67). An attacker can craft a model such that `params->block_size` would be zero."
1900,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29571,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices."
1901,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29572,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer)."
1902,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2020-8285,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu versions 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 updates its dependency ""curl"" to a secure version (7.76.0)."
1903,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29601,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite concatentation. See CVE-2021-29601."
1904,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29573,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'MaxPoolGradWithArgmax'. See CVE-2021-29573."
1905,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29586,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in optimized pooling implementations in TFLite. See CVE-2021-29586."
1906,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29590,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in TFLite's implementation of 'Minimum' or 'Maximum'. See CVE-2021-29590."
1907,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29563,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29563: An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`. Eigen code operating on an empty matrix can trigger on an assertion and will cause program termination."
1908,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29528,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedMul'. See CVE-2021-29528."
1909,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29553,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB in 'QuantizeAndDequantizeV3'. See CVE-2021-29553."
1910,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29611,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseReshape'. See CVE-2021-29611."
1911,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29580,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior and a 'CHECK'-fail in 'FractionalMaxPoolGrad'. See CVE-2021-29580."
1912,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29616,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29616: The implementation of TrySimplify (https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs."
1913,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29569,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'RequantizationRange'. See CVE-2021-29569."
1914,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29598,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SVDF'. See CVE-2021-29598."
1915,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29618,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29618: Passing a complex argument to `tf.transpose` at the same time as passing 'conjugate=True' argument results in a crash."
1916,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29550,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29550: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values. The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger. Later, these computed values are used as arguments (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to `GeneratePoolingSequence`(https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation. Since `output_length` can be 0, this results in runtime crashing."
1917,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29546,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29546: TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero."
1918,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29560,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29560: An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel. Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when 'parent_output_index' is shorter than 'row_split'."
1919,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29610,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow-gpu 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29610: The validation in 'tf.raw_ops.QuantizeAndDequantizeV2' allows invalid values for 'axis' argument:. The validation (https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses '||' to mix two different conditions. If 'axis_ < -1' the condition in 'OP_REQUIRES' will still be true, but this value of 'axis_' results in heap underflow. This allows attackers to read/write to other data on the heap."
1920,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-29568,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in 'tf.raw_ops.ParameterizedTruncatedNormal'. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of 'shape'. If 'shape' argument is empty, then 'shape_tensor.flat<T>()' is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."
1921,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37688,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37688: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer. The Tensorflow team has patched the issue in GitHub commit 15691e456c7dc9bd6be203b09765b063bf4a380c."
1922,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37645,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37645: In affected versions the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit 96f364a1ca3009f98980021c4b32be5fdcca33a1."
1923,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37691,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37691: In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). The Tensorflow team has patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9."
1924,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37692,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu versions 2.5.1 and 2.6.0 include a fix for CVE-2021-37692:
In affected versions under certain conditions, Go code can trigger a segfault in string deallocation. For string tensors, ""C.TF_TString_Dealloc"" is called during garbage collection within a finalizer function. However, tensor structure isn't checked until encoding to avoid a performance penalty. The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions). To fix this, the call to set the finalizer function is deferred until ""NewTensor"" returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written. The Tensorflow team has patched the issue in GitHub commit:
https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22
https://github.com/tensorflow/tensorflow/pull/50508
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cmgw-8vpc-rc59"
1925,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37640,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow-gpu 2.5.1 and 2.6.0 include a fix for CVE-2021-37640: In affected versions the implementation of 'tf.raw_ops.SparseReshape' can be made to trigger an integral division by 0 exception. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements. The reshape functor (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0. The Tensorflow team has patched the issue in GitHub commit 4923de56ec94fff7770df259ab7f2288a74feb41."
1926,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22898,">=2.6.0a1,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu versions 2.3.4, 2.4.3, 2.5.1, and 2.6.0 update its dependency ""curl"" to include a fix for CVE-2021-22898"
1927,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37657,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37657: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. The Tensorflow team has checked that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit f2a673bd34f0d64b8e40a551ac78989d16daad09."
1928,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37668,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37668:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.UnravelIndex"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by ""dims"" is not empty. Hence, if one element of ""dims"" is 0, the implementation does a division by 0. The Tensorflow team has patched the issue in GitHub commit a776040a5e7ebf76eeb7eb923bf1ae417dd4d233.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5
https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233"
1929,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37663,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37663:
In affected versions, due to incomplete validation in ""tf.raw_ops.QuantizeV2"", an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that ""min_range"" and ""max_range"" both have the same non-zero number of elements. If ""axis"" is provided (i.e., not ""-1""), then validation should check that it is a value in range for the rank of ""input"" tensor and then the lengths of ""min_range"" and ""max_range"" inputs match the ""axis"" dimension of the ""input"" tensor. The Tensorflow team has patched the issue in GitHub commit 6da6620efad397c85493b8f8667b821403516708. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j
https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708"
1930,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37685,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37685: In affected versions TFLite's 'expand_dims.cc' (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data. If 'axis' is a large negative value (e.g., '-100000'), then after the first 'if' it would still be negative. The check following the 'if' statement will pass and the 'for' loop would read one element before the start of 'input_dims.data' (when 'i = 0'). The Tensorflow team has patched the issue in GitHub commit d94ffe08a65400f898241c0374e9edc6fa8ed257."
1931,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37661,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37661: In affected versions an attacker can cause a denial of service in 'boosted_trees_create_quantile_stream_resource' by using negative arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that 'num_streams' only contains non-negative numbers. In turn, this results in using this value to allocate memory (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40). However, 'reserve' receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library. The Tensorflow team has patched the issue in GitHub commit 8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992."
1932,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37665,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37665:
In affected versions, due to incomplete validation in MKL implementation of requantization, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the ""input"" tensor. A similar issue occurs in ""MklRequantizePerChannelOp"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments. The Tensorflow team has patched the issue in GitHub commit 9e62869465573cb2d9b5053f1fa02a81fce21d69 and in the Github commit 203214568f5bc237603dbab6e1fd389f1572f5c9.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp
https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9
https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69"
1933,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37675,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37675: In affected versions most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations. The Tensorflow team has patched the issue in GitHub commit 8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4."
1934,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37687,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37687: In affected versions TFLite's 'GatherNd' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in 'indices'. Similar issue exists in 'Gather' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). The Tensorflow team has patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d."
1935,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37676,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37676: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.SparseFillEmptyRows'. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors. The Tensorflow team has patched the issue in GitHub commit 578e634b4f1c1c684d4b4294f9e5281b2133b3ed."
1936,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37653,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37653: In affected versions an attacker can trigger a crash via a floating point exception in 'tf.raw_ops.ResourceGather'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, 'batch_size', and then divides by it without checking that this value is not 0. The Tensorflow team has patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11."
1937,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37660,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37660: In affected versions an attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if 'x' and 'v' are empty but the code uses '||' instead of '&&'. The Tensorflow team has patched the issue in GitHub commit e86605c0a336c088b638da02135ea6f9f6753618."
1938,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37684,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37684: In affected versions the implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 (https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695)."
1939,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37662,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37662: In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in 'BoostedTreesCalculateBestGainsPerFeature' and similar attack can occur in 'BoostedTreesCalculateBestFeatureSplitV2'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. The Tensorflow team has patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7."
1940,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37643,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37643: If a user does not provide a valid padding value to 'tf.raw_ops.MatrixDiagPartOp', then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from. The Tensorflow team has patched the issue in GitHub commit 482da92095c4d48f8784b1f00dda4f81c28d2988."
1941,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37641,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37641: In affected versions if the arguments to 'tf.raw_ops.RaggedGather' don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by 'params_nested_splits' is not an empty list of tensors. The Tensorflow team has patched the issue in GitHub commit a2b743f6017d7b97af1fe49087ae15f0ac634373."
1942,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37681,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37681: In affected versions the implementation of SVDF in TFLite is vulnerable to a null pointer error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313). The 'GetVariableInput' function (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but 'GetTensorData' assumes that the argument is always a valid tensor. Furthermore, because 'GetVariableInput' calls 'GetMutableInput' (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return 'nullptr', the 'tensor->is_variable' expression can also trigger a null pointer exception. The Tensorflow team has patched the issue in GitHub commit 5b048e87e4e55990dae6b547add4dae59f4e1c76."
1943,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37646,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37646: In affected versions the implementation of 'tf.raw_ops.StringNGrams' is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls 'reserve' on a 'tstring' with a value that sometimes can be negative if user supplies negative 'ngram_widths'. The 'reserve' method calls 'TF_TString_Reserve' which has an 'unsigned long' argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit c283e542a3f422420cfdb332414543b62fc4e4a5."
1944,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37666,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37666: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToVariant'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. The Tensorflow team has patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612."
1945,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37644,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37644: In affected versions providing a negative element to 'num_elements' list argument of 'tf.raw_ops.TensorListReserve' causes the runtime to abort the process due to reallocating a 'std::vector' to have a negative number of elements. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls 'std::vector.resize()' with the new size controlled by input given by the user, without checking that this input is valid. The Tensorflow team has patched the issue in GitHub commit 8a6e874437670045e6c7dc6154c7412b4a2135e2."
1946,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37690,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37690:
In affected versions when running shape functions, some functions (such as 'MutableHashTableShape') produce extra output information in the form of a 'ShapeAndType' struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault. 'ShapeRefiner' is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but the Tensorflow team was not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types. The Tensorflow team has patched the issue in GitHub commit ee119d4a498979525046fba1c3dd3f13a039fbb1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3hxh-8cp2-g4hg
https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1"
1947,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37682,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37682:
In affected versions all TFLite operations that use quantization can be made to use unitialized values. (For example, https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200). The issue stems from the fact that ""quantization.params"" is only valid if ""quantization.type"" is different that ""kTfLiteNoQuantization"". However, these checks are missing in large parts of the code. The Tensorflow team has patched the issue in GitHub commits 537bc7c723439b9194a358f64d871dd326c18887, 4a91f2069f7145aab6ba2d8cfe41be8a110c18a5 and 8933b8a21280696ab119b63263babdb54c298538.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4c4g-crqm-xrxw
https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5
https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887
https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538"
1948,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37655,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37655: TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to 'tf.raw_ops.ResourceScatterUpdate'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of 'indices' and 'updates': instead of checking that the shape of 'indices' is a prefix of the shape of 'updates' (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship. The Tensorflow team has patched the issue in GitHub commit 01cff3f986259d661103412a20745928c727326f."
1949,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37672,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37672:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.SdcaOptimizerV2"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of ""example_labels"" is the same as the number of examples. The Tensorflow team has patched the issue in GitHub commit a4e138660270e7599793fa438cd7b2fc2ce215a6.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7
https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6"
1950,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37670,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37670:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.UpperBound"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of ""sorted_input"" argument. A similar issue occurs in ""tf.raw_ops.LowerBound"". The Tensorflow team has patched the issue in GitHub commit 42459e4273c2e47a3232cc16c4f4fff3b3a35c38.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7
https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38"
1951,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37679,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37679:
In affected versions it is possible to nest a ""tf.map_fn"" within another ""tf.map_fn"" call. However, if the input tensor is a ""RaggedTensor"" and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The ""t"" and ""z"" outputs should be identical, however this is not the case. The last row of ""t"" contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a ""Variant"" tensor to a ""RaggedTensor"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. The Tensorflow team has patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp
https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
1952,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22901,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
1953,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22897,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
1954,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-22876,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
1955,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37673,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37673:
In affected versions, an attacker can trigger a denial of service via a ""CHECK""-fail in ""tf.raw_ops.MapStage"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the ""key"" input is a valid non-empty tensor. The Tensorflow team has patched the issue in GitHub commit d7de67733925de196ec8863a33445b73f9562d1d.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg
https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d"
1956,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37650,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37650: In affected versions the implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types. The Tensorflow team has patched the issue in GitHub commit e0b6e58c328059829c3eb968136f17aa72b6c876."
1957,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37669,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37669:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.NonMaxSuppressionV5"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a ""std::vector"". However, as ""std::vector::resize"" takes the size argument as a ""size_t"" and ""output_size"" is an ""int"", there is an implicit conversion to unsigned. If the attacker supplies a negative value, this conversion results in a crash. A similar issue occurs in ""CombinedNonMaxSuppression"". The Tensorflow team has patched the issue in GitHub commit 3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d and commit b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c
https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d
https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58"
1958,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37677,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for 'tf.raw_ops.Dequantize' has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses 'axis' to select between two different values for 'minmax_rank' which is then used to retrieve tensor dimensions. However, code assumes that 'axis' can be either '-1' or a value greater than '-1', with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
1959,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37674,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in 'tf.raw_ops.MaxPoolGrad' caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the 'orig_input' and 'orig_output' tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
1960,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-37678,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.7.0rc0,<2.7.0","Tensorflow-gpu version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:
In affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses ""yaml.unsafe_load"" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r
https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012"
1961,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41220,">=2.6.0rc0,<2.6.1","Tensorflow-gpu version 2.6.1 includes a fix for CVE-2021-41220: In affected versions, the async implementation of 'CollectiveReduceV2' suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been 'std::move()'d are still accessed. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5
https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
1962,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2021-41211,">=2.6.0rc0,<2.6.1","Tensorflow-gpu version 2.6.1 includes a fix for CVE-2021-41211: In affected versions, the shape inference code for 'QuantizeV2' can trigger a read outside of bounds of heap allocated array. This occurs whenever 'axis' is a negative value less than '-1'. In this case, we are accessing data before the start of a heap buffer. The code allows 'axis' to be an optional argument ('s' would contain an 'error::NOT_FOUND' error code). Otherwise, it assumes that 'axis' is a valid index into the dimensions of the 'input' tensor. If 'axis' is less than '-1' then this results in a heap OOB read. The fix is included in TensorFlow 2.7.0. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c
https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244"
1963,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23590,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu versions 2.7.1 and 2.8.0 include a fix for CVE-2022-23590: A 'GraphDef' from a TensorFlow 'SavedModel' can be maliciously altered to cause a TensorFlow process to crash due to encountering a 'StatusOr' value that is an error and forcibly extracting the value from it.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278"
1964,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23594,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow-gpu is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered."
1965,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23592,">=2.8.0a0,<2.8.0","Tensorflow-gpu version 2.8.0 includes a fix for CVE-2022-23592: TensorFlow's type inference can cause a heap out of bounds read as the bounds checking is done in a 'DCHECK' (which is a no-op during production). An attacker can control the 'input_idx' variable such that 'ix' would be larger than the number of values in 'node_t.args'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq36-27g6-p492"
1966,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-23593,">=2.8.0a0,<2.8.0","Tensorflow-gpu 2.8.0 includes a fix for CVE-2022-23593: The 'simplifyBroadcast' function in the MLIR-TFRT infrastructure in TensorFlow is vulnerable to a segfault (hence, denial of service), if called with scalar shapes. If all shapes are scalar, then 'maxRank' is 0, so we build an empty 'SmallVector'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gwcx-jrx4-92w2"
1967,tensorflow-gpu,>=1.0.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-29210,">=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","TensorFlow is an open source platform for machine learning. In version 2.8.0, the 'TensorKey' hash function used total estimated 'AllocatedBytes()', which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. 'int32_t'). It also tried to access individual tensor bytes through 'tensor.data()' of size 'AllocatedBytes()'. This led to ASAN failures because the 'AllocatedBytes()' is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the '.data()' buffer. The discoverers could not use this byte vector anyway because types such as 'tstring' include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."
1968,torch,>=1.1.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,CVE-2022-45907,">=0,<1.13.1","Torch 1.13.1 includes a fix for CVE-2022-45907: In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.
https://github.com/pytorch/pytorch/issues/88868"
1969,torchvision,==0.3.0,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/setup.py,False,no one,no one,no one
1970,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,PVE-2021-36375,<1.10.0,tensorflow before 1.10.0 uses an insecure grpc dependency.
1971,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-9635,<1.12.2,NULL pointer dereference in Google TensorFlow before 1.12.2 could cause a denial of service via an invalid GIF file. See CVE-2019-9635.
1972,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-16778,<1.15,"Tensorflow 1.15 includes a fix for CVE-2019-16778: In TensorFlow before 1.15, a heap buffer overflow in UnsortedSegmentSum can be produced when the Index template argument is int32. In this case data_size and num_segments fields are truncated from int64 to int32 and can produce negative numbers, resulting in accessing out of bounds heap memory. This is unlikely to be exploitable and was detected and fixed internally in TensorFlow 1.15 and 2.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-844w-j86r-4x2j
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2019-002.md
https://github.com/tensorflow/tensorflow/commit/db4f9717c41bccc3ce10099ab61996b246099892"
1973,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,PVE-2021-37524,<1.15.0,"The original changelog reads: ""Tensorflow 2.0 fixes a potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access."" However, it was later confirmed that the fix was already included in 1.15 and later. See: <https://github.com/tensorflow/tensorflow/issues/37701>."
1974,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-19244,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite3"" to handle CVE-2019-19244."
1975,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-19880,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""SQLite3"" to handle CVE-2019-19880."
1976,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-10099,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2019-10099."
1977,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-19664,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-19664."
1978,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-13960,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2019-13960."
1979,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-11770,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""Apache Spark"" to handle CVE-2018-11770."
1980,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-20330,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-20330."
1981,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-19645,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite"" to handle CVE-2019-19645."
1982,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-17190,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2018-17190."
1983,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15208,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15208: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a ""DCHECK"" which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue was patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d"
1984,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15202,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15202: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'Shard' API in TensorFlow expects the last argument to be a function taking two 'int64' (i.e., 'long long') arguments. However, there are several places in TensorFlow where a lambda taking 'int' or 'int32' arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4"
1985,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15190,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15190: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the ""tf.raw_ops.Switch"" operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor. However, the eager runtime traverses all tensors in the output. Since only one of the tensors is defined, the other one is ""nullptr"", hence we are binding a reference to ""nullptr"". This is undefined behavior and reported as an error if compiling with ""-fsanitize=null"". In this case, this results in a segmentation fault The issue was patched in commit da8558533d925694483d2c136a9220d6d49d843c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4g9f-63rx-5cw4"
1986,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15209,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15209: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a ""nullptr"" buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with ""nullptr"". However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue was patched in commit 0b5662bc."
1987,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15207,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34"
1988,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15205,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15205: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'data_splits' argument of 'tf.raw_ops.StringNGrams' lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory In the linked code snippet, all the binary strings after 'ee ff' are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46"
1989,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15195,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15195: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of 'SparseFillEmptyRowsGrad' uses a double indexing pattern. It is possible for 'reverse_index_map(i)' to be an index outside of bounds of 'grad_values', thus resulting in a heap buffer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr"
1990,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15204,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15204: In eager mode, TensorFlow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 does not set the session state. Hence, calling ""tf.raw_ops.GetSessionHandle"" or ""tf.raw_ops.GetSessionHandleV2"" results in a null pointer dereference In linked snippet, in eager mode, ""ctx->session_state()"" returns ""nullptr"". Since code immediately dereferences this, we get a segmentation fault. The issue was patched in commit 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1"
1991,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15203,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15203: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the 'fill' argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a 'printf' call is constructed. This may result in segmentation fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
1992,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15206,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15206: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's ""SavedModel"" protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using ""tensorflow-serving"" or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d. However, this was not enough, as #41097 reported a different failure mode. The issue was finally patched in commit df095206f25471e864a8e63a0f1caef53a0e3a6"
1993,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15211,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15211: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative ""-1"" value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the ""-1"" index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue was patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). A potential workaround would be to add a custom ""Verifier"" to the model loading code to ensure that only operators which accept optional inputs use the ""-1"" special value and only for the tensors that they expect to be optional. Since this allow-list type approach is error-prone, it's advised upgrading to the patched code."
1994,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-13631,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13631."
1995,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-13435,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13435."
1996,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-13630,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13630."
1997,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-13871,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13871."
1998,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-13434,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13434."
1999,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-9327,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-9327."
2000,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-11655,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11655."
2001,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-11656,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11656."
2002,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15210,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15210: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2"
2003,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15194,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow 2.4.0 includes a fix for CVE-2020-15194: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments. Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."""
2004,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-14155,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2 and 2.3.2 update its dependency ""PCRE"" to handle CVE-2020-14155."
2005,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15250,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency 'Junit4' to v4.13.1 to include a security fix."
2006,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-20838,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency ""PCRE"" to fix CVE-2019-20838."
2007,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-13790,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 updates its dependency ""Libjpeg-turbo"" to handle CVE-2020-13790."
2008,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-26270,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26270: In affected versions, running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a CHECK failure when using the CUDA backend. This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer."
2009,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-26266,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","TensorFlow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0 includes a fix for CVE-2020-26266: In affected versions and under certain cases a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers filled with the default value of the type but forgetting to default initialize the quantized floating point types in Eigen."
2010,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-26271,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26271: In affected versions, under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library."
2011,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-26267,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26267: In affected versions, the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes."
2012,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-26268,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden."
2013,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-7576,<1.6.0a1,Google TensorFlow 1.6.x and earlier is affected by: Null Pointer Dereference. The type of exploitation is: context-dependent. See CVE-2018-7576.
2014,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-21233,<1.7.0,"TensorFlow before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in core/kernels/decode_bmp_op.cc. See CVE-2018-21233."
2015,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-7575,<1.7.0a1,Google TensorFlow 1.7.x and earlier is affected by a Buffer Overflow vulnerability. The type of exploitation is context-dependent. See CVE-2018-7575.
2016,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-7577,<1.7.1,"Memcpy parameter overlap in Google Snappy library 1.1.4, as used in Google TensorFlow before 1.7.1, could result in a crash or read from other parts of process memory. See CVE-2018-7577."
2017,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-10055,<1.7.1,Invalid memory access and/or a heap buffer overflow in the TensorFlow XLA compiler in Google TensorFlow before 1.7.1 could cause a crash or read from other parts of process memory via a crafted configuration file. See CVE-2018-10055.
2018,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25661,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25661: In versions prior to 2.11.1 a malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. A proof of concept can be constructed with the 'Convolution3DTranspose' function. This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services. An attacker must have privilege to provide input to a 'Convolution3DTranspose' call.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq"
2019,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25665,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25665: Prior to versions 2.12.0 and 2.11.1, when 'SparseSparseMaximum' is given invalid sparse tensors as inputs, it can give a null pointer error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-558h-mq8x-7q9g"
2020,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25671,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25671: There is out-of-bounds access due to mismatched integer type sizes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j5w9-hmfh-4cr6"
2021,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25658,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25658: Prior to versions 2.12.0 and 2.11.1, an out of bounds read is in GRUBlockCellGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-68v3-g9cm-rmm6"
2022,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25801,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25801: Prior to versions 2.12.0 and 2.11.1, 'nn_ops.fractional_avg_pool_v2' and 'nn_ops.fractional_max_pool_v2' require the first and fourth elements of their parameter 'pooling_ratio' to be equal to 1.0, as pooling on batch and channel dimensions is not supported.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f49c-87jh-g47q"
2023,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-27579,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-27579: Constructing a tflite model with a paramater 'filter_input_channel' of less than 1 gives a FPE.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5w96-866f-6rm8"
2024,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25672,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25672: The function 'tf.raw_ops.LookupTableImportV2' cannot handle scalars in the 'values' parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
2025,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25676,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25676: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.ParallelConcat' segfaults with a nullptr dereference when given a parameter 'shape' with rank that is not greater than zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6wfh-89q8-44jq"
2026,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25666,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25666: Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f637-vh3r-vfh2"
2027,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25667,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25667: Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when '2^31 <= num_frames * height * width * channels < 2^32', for example Full HD screencast of at least 346 frames.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68"
2028,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25673,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25673: Versions prior to 2.12.0 and 2.11.1 have a Floating Point Exception in TensorListSplit with XLA. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
2029,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25674,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25674: Versions prior to 2.12.0 and 2.11.1 have a null pointer error in RandomShuffle with XLA enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf97-q72m-7579"
2030,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25670,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25670: Versions prior to 2.12.0 and 2.11.1 have a null point error in QuantizedMatMulWithBiasAndDequantize with MKL enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rq-hwc3-x77w"
2031,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25668,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25668: Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96"
2032,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25664,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25664: Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hg6-5c2q-7rcr"
2033,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25663,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25663: Prior to versions 2.12.0 and 2.11.1, when 'ctx->step_containter()' is a null ptr, the Lookup function will be executed with a null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-64jg-wjww-7c5w"
2034,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25660,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25660: Prior to versions 2.12.0 and 2.11.1, when the parameter 'summarize' of 'tf.raw_ops.Print' is zero, the new method 'SummarizeArray<bool>' will reference to a nullptr, leading to a seg fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj"
2035,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25675,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25675: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.Bincount' segfaults when given a parameter 'weights' that is neither the same shape as parameter 'arr' nor a length-0 tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7x4v-9gxg-9hwj"
2036,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25669,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25669: Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for 'tf.raw_ops.AvgPoolGrad', it can give a floating point exception.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rcf8-g8jv-vg6p"
2037,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25662,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25662: Versions prior to 2.12.0 and 2.11.1 are vulnerable to integer overflow in EditDistance.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7jvm-xxmr-v5cw"
2038,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2023-25659,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25659: Prior to versions 2.12.0 and 2.11.1, if the parameter 'indices' for 'DynamicStitch' does not match the shape of the parameter 'data', it can trigger an stack OOB read.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p"
2039,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15266,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15266: In Tensorflow before version 2.4.0, when the 'boxes' argument of 'tf.image.crop_and_resize' has a very large value, the CPU kernel implementation receives it as a C++ 'nan' floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.
https://github.com/tensorflow/tensorflow/issues/42129
https://github.com/tensorflow/tensorflow/pull/42143/commits/3ade2efec2e90c6237de32a19680caaa3ebc2845
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xwhf-g6j5-j5gc"
2040,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15265,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
2041,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41210,"<2.4.4,>=2.5.0rc0,<2.5.2, >=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41210: In affected versions, the shape inference functions for 'SparseCountSparseOutput' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc
https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2"
2042,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41196,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41196: In affected versions, the Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative. This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8"
2043,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41195,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41195: In affected versions, the implementation of 'tf.math.segment_*' operations results in a 'CHECK'-fail related abort (and denial of service) if a segment id in 'segment_ids' is large. This is similar to CVE-2021-29584 (and similar to other reported vulnerabilities in TensorFlow localized to specific APIs): the implementation (both on CPU and GPU) computes the output shape using 'AddDim'. However, if the number of elements in the tensor overflows an 'int64_t' value, 'AddDim' results in a 'CHECK' failure which provokes a 'std::abort'. Instead, code should use 'AddDimWithStatus'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh"
2044,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22925,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22925."
2045,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41217,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41217: In affected versions, the process of building the control flow graph for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not. This occurs because the code assumes that the first node in the pairing (e.g., an 'Enter' node) always exists when encountering the second node (e.g., an 'Exit' node). When this is not the case, 'parent' is 'nullptr' so dereferencing it causes a crash. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5crj-c72x-m7gq
https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff"
2046,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41228,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41228: In affected versions, TensorFlow's 'saved_model_cli' tool is vulnerable to a code injection as it calls 'eval' on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. The issue has been patched by adding a 'safe' flag which defaults to 'True' and an explicit warning for users.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v
https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7"
2047,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41215,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41215: In affected versions, the shape inference code for 'DeserializeSparse' can trigger a null pointer dereference. This is because the shape inference function assumes that the 'serialize_sparse' tensor is a tensor with positive rank (and having '3' as the last dimension). The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r
https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850"
2048,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41216,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41216: In affected versions, the shape inference function for 'Transpose' is vulnerable to a heap buffer overflow. This occurs whenever 'perm' contains negative elements. The shape inference function does not validate that the indices in 'perm' are all valid. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9
https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14"
2049,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22924,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22924."
2050,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22923,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22923."
2051,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41226,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41226: In affected versions, the implementation of 'SparseBinCount' is vulnerable to a heap OOB access. This is because of missing validation between the elements of the 'values' argument and the shape of the sparse output. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-374m-jm66-3vj8
https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba"
2052,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41200,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41200: In affected versions, if 'tf.summary.create_file_writer' is called with non-scalar arguments, code crashes due to a 'CHECK'-fail. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f"
2053,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41218,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41218: In affected versions, the shape inference code for 'AllToAll' can be made to execute a division by 0. This occurs whenever the 'split_count' argument is 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273
https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc"
2054,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41223,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41223: In affected versions, the implementation of 'FusedBatchNorm' kernels is vulnerable to a heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr
https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda"
2055,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41224,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41224: In affected versions, the implementation of 'SparseFillEmptyRows' can be made to trigger a heap OOB access. This occurs whenever the size of 'indices' does not match the size of 'values'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v
https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b"
2056,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41219,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41219: In affected versions, the code for sparse matrix multiplication is vulnerable to undefined behavior via binding a reference to 'nullptr'. This occurs whenever the dimensions of 'a' or 'b' are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, it should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x
https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae"
2057,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41202,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41202: In affected versions, while calculating the size of the output within the 'tf.range' kernel, there is a conditional statement of type 'int64 = condition ? int64 : double'. Due to C++ implicit conversion rules, both branches of the condition will be cast to 'double' and the result would be truncated before the assignment. This result in overflows. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx"
2058,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41221,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41221: In affected versions, the shape inference code for the 'Cudnn*' operations can be tricked into accessing invalid memory via a heap buffer overflow. This occurs because the ranks of the 'input', 'input_h' and 'input_c' parameters are not validated, but code assumes they have certain values. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx
https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6"
2059,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41203,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41203: In affected versions, an attacker can trigger undefined behavior, integer overflows, segfaults and 'CHECK'-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7pxj-m4jf-r6h2"
2060,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41222,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41222: In affected versions, the implementation of 'SplitV' can trigger a segfault if an attacker supplies negative arguments. This occurs whenever 'size_splits' contains more than one value and at least one value is negative. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6
https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6"
2061,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22922,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22922."
2062,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41227,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41227: In affected versions, the 'ImmutableConst' operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the 'tstring' TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7
https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b
https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585"
2063,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41201,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41201: In affected versions, during execution, 'EinsumHelper::ParseEquation()' is supposed to set the flags in 'input_has_ellipsis' vector and '*output_has_ellipsis' boolean to indicate whether there is ellipsis in the corresponding inputs and output. However, the code only changes these flags to 'true' and never assigns 'false'. This results in unitialized variable access if callers assume that 'EinsumHelper::ParseEquation()' always sets these flags. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j86v-p27c-73fm
https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6"
2064,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22926,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22926."
2065,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41205,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41205: In affected versions, the shape inference functions for the 'QuantizeAndDequantizeV*' operations can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f
https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d"
2066,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41214,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41214: In affected versions, the shape inference code for 'tf.ragged.cross' has an undefined behavior due to binding a reference to 'nullptr'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
2067,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41207,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41207: In affected versions, the implementation of 'ParallelConcat' misses some input validation and can produce a division by 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
2068,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41204,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41204: In affected versions, during TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-786j-5qwq-r36x
https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659"
2069,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41213,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf
https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7"
2070,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41212,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41212: In affected versions, the shape inference code for 'tf.ragged.cross' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
2071,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41225,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41225: In affected versions, TensorFlow's Grappler optimizer has a use of unitialized variable. If the 'train_nodes' vector (obtained from the saved model that gets optimized) does not contain a 'Dequeue' node, then 'dequeue_node' is left unitialized. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw
https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"
2072,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41198,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41198: In affected versions, if 'tf.tile' is called with a large input argument, then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q"
2073,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41209,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41209: In affected versions, the implementations for convolution operators trigger a division by 0 if passed empty filter tensor arguments. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hpv-v2rx-c5g6
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
2074,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41199,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41199: In affected versions, if 'tf.image.resize' is called with a large input argument then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm"
2075,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-10531,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 update its dependency 'icu' to v69.1 to include a security fix."
2076,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23591,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The 'GraphDef' format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a 'GraphDef' containing a fragment such as the following can be consumed when loading a 'SavedModel'. This would result in a stack overflow during execution as resolving each 'NodeDef' means resolving the function itself and its nodes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2077,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23576,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2078,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23585,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding PNG images TensorFlow can produce a memory leak if the image is invalid. After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2079,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23578,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. If a graph node is invalid, TensorFlow can leak memory in the implementation of `ImmutableExecutorState::Initialize`. Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2080,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23583,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2081,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23567,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23567: The implementations of 'Sparse*Cwise*' ops are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or 'CHECK'-fails when building new 'TensorShape' objects (so, assert failures based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43"
2082,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23574,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. There is a typo in TensorFlow's `SpecializeType` which results in heap OOB read/write. Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
2083,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23571,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2084,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23589,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place). First, during constant folding, the `GraphDef` might not have the required nodes for the binary operation. If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect. We have a similar issue during `IsIdentityConsumingSwitch`. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2085,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23586,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2086,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21733,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21733: The implementation of 'StringNGrams' can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. There is missing a validation on 'pad_witdh' and that result in computing a negative value for 'ngram_width' which is later used to allocate parts of the output.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g"
2087,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23587,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2088,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21735,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21735: The implementation of 'FractionalMaxPool' can be made to crash a TensorFlow process via a division by 0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj"
2089,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23577,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `GetInitOp` is vulnerable to a crash caused by dereferencing a null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2090,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23566,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. TensorFlow is vulnerable to a heap OOB write in `Grappler`. The `set_output` function writes to an array at the specified index. Hence, this gives a malicious user a write primitive. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2091,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23562,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23562: The implementation of 'Range' suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr"
2092,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23572,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
2093,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23588,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2094,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23579,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23579: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'SafeToRemoveIdentity' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5f2r-qp73-37mr"
2095,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23569,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23569: Multiple operations in TensorFlow can be used to trigger a denial of service via 'CHECK'-fails (i.e., assertion failures). This is similar to CVE-2021-41197 and has a similar fix. It is possible that other similar instances exist.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qj5r-f9mv-rffh"
2096,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23575,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2097,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23580,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23580: During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-627q-g293-49q7"
2098,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21732,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21732: The implementation of 'ThreadPoolHandle' can be used to trigger a denial of service attack by allocating too much memory. This is because the 'num_threads' argument is only checked to not be negative, but there is no upper bound on its value.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq"
2099,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21740,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21740: The implementation of 'SparseCountSparseOutput' is vulnerable to a heap overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-44qp-9wwf-734r"
2100,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23595,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23595: When building an XLA compilation cache, if default settings are used, TensorFlow triggers a null pointer dereference. In the default scenario, all devices are allowed, so 'flr->config_proto' is 'nullptr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fpcp-9h7m-ffpx"
2101,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23581,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23581: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'IsSimplifiableReshape' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq86-3f29-px2c"
2102,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21739,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21739: The implementation of 'QuantizedMaxPool' has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5"
2103,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23564,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23564: When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a 'CHECK' assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3"
2104,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23565,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23565: An attacker can trigger denial of service via assertion failure by altering a 'SavedModel' on disk such that 'AttrDef's of some operation are duplicated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4v5p-v5h9-6xjx"
2105,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21741,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21741: An attacker can craft a TFLite model that would trigger a division by zero in the implementation of depthwise convolutions. The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is strictly positive.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-428x-9xc2-m8mj"
2106,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21726,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21726: The implementation of 'Dequantize' does not fully validate the value of 'axis' and can result in heap OOB accesses. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72"
2107,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23557,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23557: An attacker can craft a TFLite model that would trigger a division by zero in 'BiasAndClamp' implementation. There is no check that the 'bias_size' is non zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf2j-f278-xh4v"
2108,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21728,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
2109,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23568,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23568: The implementation of 'AddManySparseToTensorsMap' is vulnerable to an integer overflow which results in a 'CHECK'-fail when building new 'TensorShape' objects (so, an assert failure based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2"
2110,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23563,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23563: In multiple places, TensorFlow uses 'tempfile.mktemp' to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in 'mktemp' and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the 'mktemp' function usage. It was replaced 'mktemp' with the safer 'mkstemp'/'mkdtemp' functions, according to the usage pattern.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wc4g-r73w-x8mm"
2111,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21730,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21730: The implementation of 'FractionalAvgPoolGrad' does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4"
2112,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21736,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21736: The implementation of 'SparseTensorSliceDataset' has an undefined behavior: under certain conditions, it can be made to dereference a 'nullptr' value. The 3 input arguments to 'SparseTensorSliceDataset' represent a sparse tensor. However, there are some preconditions that these arguments must satisfy, but these are not validated in the implementation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9"
2113,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23570,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
2114,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23558,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23558: An attacker can craft a TFLite model that would cause an integer overflow in 'TfLiteIntArrayCreate'. The 'TfLiteIntArrayGetSizeInBytes' returns an 'int' instead of a 'size_t'. An attacker can control model inputs such that 'computed_size' overflows the size of 'int' datatype.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9gwq-6cwj-47h3"
2115,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23559,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23559: An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both 'embedding_size' and 'lookup_size' are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98p5-x8x4-c9m5"
2116,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21727,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21727: The implementation of shape inference for 'Dequantize' is vulnerable to an integer overflow weakness. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes 'axis + 1', an attacker can trigger an integer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw"
2117,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21725,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21725: The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f"
2118,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21738,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21738: The implementation of 'SparseCountSparseOutput' can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6"
2119,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23584,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2120,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23582,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23582: A malicious user can cause a denial of service by altering a 'SavedModel' such that 'TensorByteSize' would trigger 'CHECK' failures. 'TensorShape' constructor throws a 'CHECK'-fail if shape is partial or has a number of elements that would overflow the size of an 'int'. The 'PartialTensorShape' constructor instead does not cause a 'CHECK'-abort if the shape is partial, which is exactly what this function needs to be able to return '-1'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4j82-5ccr-4r8v"
2121,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23561,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23561: An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c78-vcq7-7vxq"
2122,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21731,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21731: The implementation of shape inference for 'ConcatV2' can be used to trigger a denial of service attack via a segfault caused by a type confusion. The 'axis' argument is translated into 'concat_dim' in the 'ConcatShapeHelper' helper function. Then, a value for 'min_rank' is computed based on 'concat_dim'. This is then used to validate that the 'values' tensor has at least the required rank. However, 'WithRankAtLeast' receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented. Due to the fact that 'min_rank' is a 32-bits value and the value of 'axis', the 'rank' argument is a negative value, so the error check is bypassed.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
2123,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21734,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21734: The implementation of 'MapStage' is vulnerable to a 'CHECK'-fail if the key tensor is not a scalar.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm"
2124,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23573,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2125,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21737,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21737: The implementation of '*Bincount' operations allows malicious users to cause denial of service by passing in arguments which would trigger a 'CHECK'-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in 'CHECK' failures later when the output tensors get allocated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2vv-v9cg-qhh7"
2126,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-21729,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21729: The implementation of 'UnravelIndex' is vulnerable to a division by zero caused by an integer overflow bug.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j"
2127,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23560,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23560: An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4hvf-hxvg-f67v"
2128,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41208,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41208: In affected versions, the code for boosted trees in TensorFlow is still missing validation. As a result, attackers can trigger denial of service (via dereferencing 'nullptr's or via 'CHECK'-failures) as well as abuse undefined behavior (binding references to 'nullptr's). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call. Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs. TensorFlow's boosted trees APIs will be deprecated in subsequent releases.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-57wx-m983-2f88
https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6gw-r52c-724r"
2129,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41206,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41206: In affected versions, several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or 'CHECK'-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. These issues were discovered internally via tooling while working on improving/testing GPU op determinism. As such, there aren't reproducers and there will be multiple fixes for these issues.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pgcq-h79j-2f69
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x"
2130,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27775,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27775."
2131,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29193,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29193: missing validation which causes 'TensorSummaryV2' to crash."
2132,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27776,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27776."
2133,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29196,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29196: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
2134,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29197: Missing validation which causes denial of service via 'UnsortedSegmentJoin'."
2135,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27779,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27779."
2136,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29202,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29202: Denial of service in 'tf.ragged.constant' due to lack of validation."
2137,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29201,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29201: Missing validation which results in undefined behavior in 'QuantizedConv2D'."
2138,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29206,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29206: Missing validation which results in undefined behavior in 'SparseTensorDenseAdd'."
2139,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27778,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27778."
2140,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29204,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29204: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
2141,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29199,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29199: Missing validation which causes denial of service via 'LoadAndRemapMatrix'."
2142,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29213,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29213: Crashes stemming from incomplete validation in signal ops."
2143,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29211,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29211: Segfault when 'tf.histogram_fixed_width' is called with NaN values."
2144,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27780,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27780."
2145,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29205,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29205: Segfault due to missing support for quantized types."
2146,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-22576,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-22576."
2147,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29209,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29209: Type confusion leading to 'CHECK'-failure based denial of service."
2148,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27782,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27782."
2149,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29195,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29195: Missing validation which causes denial of service via 'StagePeek'."
2150,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29216,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29216: Code injection in 'saved_model_cli'."
2151,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29200,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29200: Missing validation which causes denial of service via 'LSTMBlockCell'."
2152,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29198,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29198:  Missing validation which causes denial of service via 'SparseTensorToCSRSparseMatrix'."
2153,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29207,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29207: Issues arising from undefined behavior stemming from users supplying invalid resource handles."
2154,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29208,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29208: Segfault and OOB write due to incomplete validation in 'EditDistance'."
2155,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29194,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29194: Missing validation which causes denial of service via 'DeleteSessionTensor'."
2156,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27781,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27781."
2157,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-30115,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-30115."
2158,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2021-41197: Affected versions allow tensors to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an 'int64_t'. If an overflow occurs, 'MultiplyWithoutOverflow' would return a negative result. In the majority of TensorFlow codebase this then results in a 'CHECK'-failure. Newer constructs exist which return a 'Status' instead of crashing the binary. This is similar to CVE-2021-29584.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-vrvr-3rx2
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mw6j-hh29-h379"
2159,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-25032,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'zlib' to v1.2.12 to handle CVE-2018-25032."
2160,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-27774,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27774."
2161,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29192,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29192: missing validation which crashes 'QuantizeAndDequantizeV4Grad'."
2162,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29191,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29191: Missing validation which causes denial of service via 'GetSessionTensor'."
2163,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29212,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29212: Core dump when loading TFLite models with quantization."
2164,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29203,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29203: Integer overflow in 'SpaceToBatchND'."
2165,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35985,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35985: 'CHECK' fail in 'LRNGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp"
2166,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35971,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35971: 'CHECK' fail in 'FakeQuantWithMinMaxVars'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7"
2167,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35952,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35952: 'CHECK' failures in 'UnbatchGradOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47"
2168,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35979,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35979: Segfault in 'QuantizedRelu' and 'QuantizedRelu6'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x"
2169,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36002,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36002: 'CHECK' fail in 'Unbatch'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg"
2170,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35996,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35996: Floating point exception in 'Conv2D'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37"
2171,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35959,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35959: 'CHECK' failures in 'AvgPool3DGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq"
2172,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35990,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35990: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannelGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh"
2173,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35983,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35983: 'CHECK' fail in 'Save' and 'SaveSlices'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4"
2174,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35974,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35974: Segfault in 'QuantizeDownAndShrinkRange'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x"
2175,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36019,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36019: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannel'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7"
2176,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35994,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35994: 'CHECK' fail in 'CollectiveGather'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f"
2177,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36014,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36014: Null-dereference in 'mlir::tfg::TFOp::nameAttr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7j3m-8g3c-9qqq"
2178,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35964,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35964: Segfault in 'BlockLSTMGradV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668"
2179,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35987,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35987: 'CHECK' fail in 'DenseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49"
2180,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36011,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36011: Null dereference on MLIR on empty function attributes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv43-93gv-vm8f"
2181,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36027,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36027: Segfault TFLite converter on per-channel quantized transposed convolutions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr"
2182,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35972,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35972: Segfault in 'QuantizedBiasAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9"
2183,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35968,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35968: 'CHECK' fail in 'AvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25"
2184,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35941,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35941: 'CHECK' failure in 'AvgPoolOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5"
2185,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35940,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35940: Int overflow in 'RaggedRangeOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x"
2186,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35939,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35939: OOB write in 'scatter_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf"
2187,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35997,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35997: 'CHECK' fail in 'tf.sparse.cross'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf"
2188,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36016,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36016: 'CHECK'-fail in 'tensorflow::full_type::SubstituteFromAttrs'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g468-qj8g-vcjc"
2189,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35937,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35937: OOB read in 'Gather_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h"
2190,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35963,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35963: 'CHECK' failures in 'FractionalAvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm"
2191,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36015,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36015: Integer overflow in math ops. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rh87-q4vg-m45j"
2192,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35984,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35984: 'CHECK' fail in 'ParameterizedTruncatedNormal'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5"
2193,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36013,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36013: Null-dereference in 'mlir::tfg::GraphDefImporter::ConvertNodeDef'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828c-5j5q-vrjq"
2194,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35981,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35981: 'CHECK' fail in 'FractionalMaxPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw"
2195,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35960,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35960: 'CHECK' failure in 'TensorListReserve' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4"
2196,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36017,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36017: Segfault in 'Requantize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc"
2197,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35969,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35969: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx"
2198,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36012,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36012: Assertion fail on MLIR empty edge names.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jvhc-5hhr-w3v5"
2199,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36000,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36000: 'CHECK' fail in 'Eig'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v"
2200,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35986,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35986: Segfault in 'RaggedBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v"
2201,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35973,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35973: Segfault in 'QuantizedMatMul'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v"
2202,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36026,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36026: 'CHECK' fail in 'QuantizeAndDequantizeV3'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq"
2203,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35966,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35966: Segfault in 'QuantizedAvgPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9"
2204,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35993,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35993: 'CHECK' fail in 'SetSize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9"
2205,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35988,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35988: 'CHECK' fail in 'tf.linalg.matrix_rank'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c"
2206,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35965,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35965: Segfault in 'LowerBound' and 'UpperBound'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36"
2207,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35967,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35967: Segfault in 'QuantizedAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x"
2208,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35970,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35970: Segfault in 'QuantizedInstanceNorm'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp"
2209,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35995,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35995: 'CHECK' fail in 'AudioSummaryV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4"
2210,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36004,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36004: 'CHECK' fail in 'tf.random.gamma'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q"
2211,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36018,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36018: 'CHECK' fail in 'RaggedTensorToVariant'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf"
2212,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36003,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36003: 'CHECK' fail in 'RandomPoissonV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq"
2213,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35934,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35934: 'CHECK' failure in tf.reshape via overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45"
2214,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35998,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35998: 'CHECK' fail in 'EmptyTensorList'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5"
2215,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35992,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35992: 'CHECK' fail in 'TensorListFromTensor'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp"
2216,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35982,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35982: Segfault in 'SparseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv"
2217,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36001,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36001: 'CHECK' fail in 'DrawBoundingBoxes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5"
2218,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35999,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35999: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw"
2219,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35989,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35989: 'CHECK' fail in 'MaxPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq"
2220,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-36005,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36005: 'CHECK' fail in 'FakeQuantWithMinMaxVarsGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm"
2221,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41893,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41893: If 'tf.raw_ops.TensorListResize' is given a nonscalar value for input 'size', it results 'CHECK' fail which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-67pf-62xr-q35m"
2222,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41894,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41894: The reference kernel of the 'CONV_3D_TRANSPOSE' TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. Instead of 'data_ptr += num_channels;' it should be 'data_ptr += output_num_channels;' as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels > output_num_channels. An attacker can craft a model with a specific number of input channels. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6q3-vv32-2cq5"
2223,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41880,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41880: When the 'BaseCandidateSamplerOp' function receives a value in 'true_classes' larger than 'range_max', a heap oob read occurs.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j"
2224,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41897,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41897: If 'FractionMaxPoolGrad' is given outsize inputs 'row_pooling_sequence' and 'col_pooling_sequence', TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2w8-jw48-fr7j"
2225,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41898,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41898: If 'SparseFillEmptyRowsGrad' is given empty inputs, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hq7g-wwwp-q46h"
2226,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41884,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41884: If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jq6x-99hj-q636"
2227,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41888,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41888: When running on GPU, 'tf.image.generate_bounding_box_proposals' receives a 'scores' input that must be of rank 4 but is not checked.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6x99-gv2v-q76v"
2228,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41910,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41910: The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-frqp-wp83-qggv"
2229,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41901,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41901: An input 'sparse_matrix' that is not a matrix with a shape with rank 0 will trigger a 'CHECK' fail in 'tf.raw_ops.SparseMatrixNNZ'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9fm-r5mm-rf9f"
2230,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41900,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41900: The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472"
2231,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41911,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41911: When printing a tensor, we get it's data as a 'const char*' array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from 'char' to 'bool' are undefined if the 'char' is not '0' or '1', so sanitizers/fuzzers will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pf36-r9c6-h97j"
2232,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41896,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41896: If 'ThreadUnsafeUnigramCandidateSampler' is given input 'filterbank_channel_count' greater than the allowed max size, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35"
2233,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41902,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."
2234,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41895,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41895: If 'MirrorPadGrad' is given outsize input 'paddings', TensorFlow will give a heap OOB error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gq2j-cr96-gvqx"
2235,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41891,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41891: If 'tf.raw_ops.TensorListConcat' is given 'element_shape=[]', it results segmentation fault which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-66vq-54fq-6jvv"
2236,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41889,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41889: If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a 'nullptr', which is not caught. An example can be seen in 'tf.compat.v1.extract_volume_patches' by passing in quantized tensors as input 'ksizes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xxcj-rhqg-m46g"
2237,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41885,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41885: When 'tf.raw_ops.FusedResizeAndPadConv2D' is given a large tensor shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-762h-vpvw-3rcx"
2238,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41908,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41908: TensorFlow is an open source platform for machine learning. An input 'token' that is not a UTF-8 bytestring will trigger a 'CHECK' fail in 'tf.raw_ops.PyFunc'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv77-9g28-cwg3"
2239,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41890,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41890: If 'BCast::ToShape' is given input larger than an 'int32', it will crash, despite being supposed to handle up to an 'int64'. An example can be seen in 'tf.experimental.numpy.outer' by passing in large input to the input 'b'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h246-cgh4-7475"
2240,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41907,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41907: When 'tf.raw_ops.ResizeNearestNeighborGrad' is given a large 'size' input, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-368v-7v32-52fx"
2241,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41886,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41886: When 'tf.raw_ops.ImageProjectiveTransformV2' is given a large output shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-54pp-c6pp-7fpx"
2242,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41899,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41899: TensorFlow is an open source platform for machine learning. Inputs 'dense_features' or 'example_state_data' not of rank 2 will trigger a 'CHECK' fail in 'SdcaOptimizer'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27rc-728f-x5w2"
2243,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41909,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41909: An input 'encoded' that is not a valid 'CompositeTensorVariant' tensor will trigger a segfault in 'tf.raw_ops.CompositeTensorVariantToComponents'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjx6-v474-2ch9"
2244,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35935,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35935: 'CHECK' failure in 'SobolSample' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqvq-fvhr-v6hc"
2245,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-35991,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35991: 'CHECK' fail in 'TensorListScatter' and 'TensorListScatterV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xf83-q765-xm6m"
2246,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41887,"<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.9.3 and 2.10.1 include a fix for CVE-2022-41887: 'tf.keras.losses.poisson' receives a 'y_pred' and 'y_true' that are passed through 'functor::mul' in 'BinaryOp'. If the resulting dimensions overflow an 'int32', TensorFlow will crash due to a size mismatch during broadcast assignment.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fvv-46hw-vpg3"
2247,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2018-8825,<=1.7,Google TensorFlow 1.7 and below is affected by: Buffer Overflow. The impact is: execute arbitrary code (local). See CVE-2018-8825.
2248,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15358,">=1.15.0rc0,<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 updates its dependency ""SQLite"" to handle CVE-2020-15358."
2249,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-16168,">=2.0.0a0,<2.0.1,<1.15.2",Tensorflow versions 1.15.2 and 2.0.1 updates 'sqlite3' to handle CVE-2019-16168.
2250,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-5482,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5482."
2251,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-19646,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 update its dependency ""SQLite"" to handle CVE-2019-19646."
2252,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-5215,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(""hello"", tf.float16), if eager execution is enabled."
2253,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
2254,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29567,">=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.5.0rc0,<2.5.0","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers."
2255,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-41883,">=2.10.0rc0,<2.10.1","Tensorflow 2.10.1 includes a fix for CVE-2022-41883: When ops that have specified input sizes receive a differing number of inputs, the executor will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w58w-79xv-6vcj"
2256,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15212,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15212: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to ""segment_ids_data"" can alter ""output_index"" and then write to outside of ""output_data"" buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
2257,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15214,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15214: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimension of output tensor. This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array. This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
2258,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15192,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15192: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes a list of strings to 'dlpack.to_dlpack' there is a memory leak following an expected validation failure. The issue occurs because the 'status' argument during validation failures is not properly checked. Since each of the above methods can return an error status, the 'status' value must be checked before continuing.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv"
2259,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15193,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of ""dlpack.to_dlpack"" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a ""reinterpret_cast"". Since the ""PyObject"" is a Python object, not a Tensorflow tensor, the cast to ""EagerTensor"" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v"
2260,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15191,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15191: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to 'dlpack.to_dlpack' the expected validations will cause variables to bind to 'nullptr' while setting a 'status' variable to the error condition. However, this 'status' argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with '-fsanitize=null'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr"
2261,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15213,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15213: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimension of the output tensor, attackers can use a very large value to trigger a large allocation. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps. However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87"
2262,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15197,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15197: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix. However, malicious users can pass in tensors of different rank, resulting in a ""CHECK"" assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02."
2263,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15200,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15200: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A ""BatchedMap"" is equivalent to a vector where each element is a hashmap. However, if the first element of ""splits_values"" is not 0, ""batch_idx"" will never be 1, hence there will be no hashmap at index 0 in ""per_batch_counts"". Trying to access that in the user code results in a segmentation fault. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3"
2264,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15199,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15199: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the ""splits"" tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure. Since ""BatchedMap"" is equivalent to a vector, it needs to have at least one element to not be ""nullptr"". If user passes a ""splits"" tensor that is empty or has exactly one element, we get a ""SIGABRT"" signal raised by the operating system. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h"
2265,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15201,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15201: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Hence, the code is prone to heap buffer overflow. If ""split_values"" does not end with a value at least ""num_values"" then the ""while"" loop condition will trigger a read outside of the bounds of ""split_values"" once ""batch_idx"" grows too large. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4"
2266,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15198,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15198: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has the same shape as the ""values"" one. The values in these tensors are always accessed in parallel. Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3"
2267,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-15196,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15196: In Tensorflow version 2.3.0, the ""SparseCountSparseOutput"" and ""RaggedCountSparseOutput"" implementations don't validate that the ""weights"" tensor has the same shape as the data. The check exists for ""DenseCountSparseOutput"", where both tensors are fully specified. In the sparse and ragged count weights are still accessed in parallel with the data. But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph"
2268,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37635,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37635: In affected versions the implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data. The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor. The Tensorflow team has patched the issue in GitHub commit 87158f43f05f2720a374f3e6d22a7aaa3a33f750."
2269,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37637,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37637: It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. The Tensorflow team has patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5."
2270,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37683,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37683: In affected versions the implementation of division in TFLite is vulnerable to a division by 0 error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. The Tensorflow team has patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28."
2271,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37667,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37667: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.UnicodeEncode'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the 'input_splits' tensor before validating that this tensor is not empty. The Tensorflow team has patched the issue in GitHub commit 2e0ee46f1a47675152d3d865797a18358881d7a6."
2272,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37671,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37671: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.Map*' and 'tf.raw_ops.OrderedMap*' operations. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that 'indices' is in ascending order, but does not check that 'indices' is not empty. The Tensorflow team has patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac."
2273,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37689,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37689: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. This is caused by the MLIR optimization of 'L2NormalizeReduceAxis' operator. The implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements. The Tensorflow team has patched the issue in GitHub commit d6b57f461b39fd1aa8c1b870f1b974aac3554955."
2274,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37648,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37648: In affected versions the code for 'tf.raw_ops.SaveV2' does not properly validate the inputs and an attacker can trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses 'ValidateInputs' to check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer above. However, the validation uses 'OP_REQUIRES' which translates to setting the 'Status' object of the current 'OpKernelContext' to an error status, followed by an empty 'return' statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the nQext line in 'Compute' that follows the call to 'ValidateInputs'. This is equivalent to lacking the validation. The Tensorflow team has patched the issue in GitHub commit 9728c60e136912a12d99ca56e106b7cce7af5986."
2275,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37680,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37680: In affected versions the implementation of fully connected layers in TFLite is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226). The Tensorflow team has patched the issue in GitHub commit 718721986aa137691ee23f03638867151f74935f."
2276,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37636,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37636: In affected versions the implementation of 'tf.raw_ops.SparseDenseCwiseDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit d9204be9f49520cdaaeb2541d1dc5187b23f31d9."
2277,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37642,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37642: In affected versions the implementation of 'tf.raw_ops.ResourceScatterDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76."
2278,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37652,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37652: In affected versions the implementation for 'tf.raw_ops.BoostedTreesCreateEnsemble' can result in a use after free error if an attacker supplies specially crafted arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent 'free'-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed. The Tensorflow team has patched the issue in GitHub commit 5ecec9c6fbdbc6be03295685190a45e7eee726ab."
2279,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37649,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37649: The code for 'tf.raw_ops.UncompressElement' can be made to trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a 'CompressedElement' from a 'Variant' tensor and then proceeds to dereference it for decompressing. There is no check that the 'Variant' tensor contained a 'CompressedElement', so the pointer is actually 'nullptr'. The Tensorflow team has patched the issue in GitHub commit 7bdf50bb4f5c54a4997c379092888546c97c3ebd."
2280,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37659,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37659: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations). The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr. We have patched the issue in GitHub commit 93f428fd1768df147171ed674fee1fc5ab8309ec."
2281,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37647,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37647: When a user does not supply arguments that determine a valid sparse tensor, 'tf.raw_ops.SparseTensorSliceDataset' implementation can be made to dereference a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either 'indices' or 'values' are provided for an empty sparse tensor when the other is not. If 'indices' is empty, then code that performs validation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference. If 'indices' as provided by the user is empty, then 'indices' in the C++ code above is backed by an empty 'std::vector', hence calling 'indices->dim_size(0)' results in null pointer dereferencing (same as calling 'std::vector::at()' on an empty vector). The Tensorflow team has patched the issue in GitHub commit 02cc160e29d20631de3859c6653184e3f876b9d7."
2282,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37658,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37658: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixSetDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit ff8894044dfae5568ecbf2ed514c1a37dc394f1b."
2283,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37656,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37656: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToSparse'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order. The Tensorflow team has patched the issue in GitHub commit 1071f554dbd09f7e101324d366eec5f4fe5a3ece."
2284,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37638,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37638: Sending invalid argument for 'row_partition_types' of 'tf.raw_ops.RaggedTensorToTensor' API results in a null pointer dereference and undefined behavior. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty. The Tensorflow team has patched the issue in GitHub commit 301ae88b331d37a2a16159b65b255f4f9eb39314."
2285,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37654,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37654: In affected versions an attacker can trigger a crash via a 'CHECK'-fail in debug builds of TensorFlow using 'tf.raw_ops.ResourceGather' or a read from outside the bounds of heap allocated data in the same API in a release build. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the 'batch_dims' value that the user supplies is less than the rank of the input tensor. Since the implementation uses several for loops over the dimensions of 'tensor', this results in reading data from outside the bounds of heap allocated buffer backing the tensor. The Tensorflow team has patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d."
2286,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37651,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37651: In affected versions the implementation for 'tf.raw_ops.FractionalAvgPoolGrad' can be tricked into accessing data outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty 'EigenDoubleMatrixMap' and then accesses this buffer with indices that are outside of the empty area. The Tensorflow team has patched the issue in GitHub commit 0f931751fb20f565c4e94aa6df58d54a003cdb30."
2287,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37639,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37639: When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer. Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the 'tensor_name' user controlled input and immediately retrieves the tensor at the restoration index (controlled via 'preferred_shard' argument). This occurs without validating that the provided list has enough values. If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements and if the restoration index is outside the bounds, this results in heap OOB read. The Tensorflow team has patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622."
2288,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37664,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37664: In affected versions an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range. The Tensorflow team has patched the issue in GitHub commit e84c975313e8e8e38bb2ea118196369c45c51378."
2289,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37686,">=2.3.0rc0,<2.3.4rc0,>=2.4.0rc0,<2.4.3rc0,>=2.5.0rc0,<=2.5.0,>=2.6.0rc0,<2.6.0","Several versions of TensorFlow are affected by CVE-2021-37686: In affected versions, the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for ellipsis in axis definition (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that 'ellipsis_end_idx' is smaller than 'i' (e.g., always negative). In this case, the inner loop does not increase 'i' and the 'continue' statement causes execution to skip over the preincrement at the end of the outer loop. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695."
2290,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-26269,">=2.4.0rc0,<2.4.0","TensorFlow 2.4.0 includes a fix for CVE-2020-26269: In TensorFlow release candidate versions 2.4.0rc*, the general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of the array holding the directories. There are multiple invariants and preconditions that are assumed by the parallel implementation of GetMatchingPaths but are not verified by the PRs introducing it (#40861 and #44310). Thus, we are completely rewriting the implementation to fully specify and validate these. This is patched in version 2.4.0. This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched."
2291,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29614,">=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.5.0rc0,<2.5.0","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory."
2292,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29530,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by invalid validation in 'SparseMatrixSparseCholesky'. See CVE-2021-29530."
2293,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29519,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'SparseCross' caused by type confusion. See CVE-2021-29519."
2294,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29522,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv3DBackprop*'. See CVE-2021-29522."
2295,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29529,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap buffer overflow caused by rounding. See CVE-2021-29529."
2296,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29518,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix vulnerabilities where session operations in eager mode lead to null pointer dereferences. See CVE-2021-29518."
2297,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29538,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29538: An attacker can cause a division by zero to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments). If all shapes are empty then 'work_unit_size' is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service."
2298,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29533,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 includes a fix for CVE-2021-29533: An attacker can trigger a denial of service via a 'CHECK' failure by passing an empty image to 'tf.raw_ops.DrawBoundingBoxes'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses 'CHECK_*' assertions instead of 'OP_REQUIRES' to validate user controlled inputs. Whereas 'OP_REQUIRES' allows returning an error condition back to the user, the 'CHECK_*' macros result in a crash if the condition is false, similar to 'assert'. In this case, 'height' is 0 from the 'images' input. This results in 'max_box_row_clamp' being negative and the assertion being falsified, followed by aborting program execution."
2299,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29520,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a heap buffer overflow in 'Conv3DBackprop*'. See CVE-2021-29520."
2300,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29531,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.EncodePng'. See CVE-2021-29531."
2301,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29521,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a segfault in 'SparseCountSparseOutput'. See CVE-2021-29521."
2302,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29549,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29549: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero. Since `vector_num_elements` is determined based on input shapes (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0."
2303,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29537,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29537: An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly."
2304,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29532,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29532: An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads."
2305,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29615,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow in 'ParseAttrValue' with nested tensors. See CVE-2021-29615."
2306,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29548,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization)."
2307,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29534,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29534: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.SparseConcat'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in 'shapes[0]' as dimensions for the output shape. The 'TensorShape' constructor (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a 'CHECK' operation which triggers when 'InitDims' (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use 'BuildTensorShapeBase' or 'AddDimWithStatus' to prevent 'CHECK'-failures in the presence of overflows."
2308,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29513,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion."
2309,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29525,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropInput'. See CVE-2021-29525."
2310,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29524,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropFilter'. See CVE-2021-29524."
2311,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29523,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'AddManySparseToTensorsMap'. See CVE-2021-29523."
2312,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29552,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29552: An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar. Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination."
2313,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29539,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument."
2314,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29541,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'StringNGrams'. See CVE-2021-29541."
2315,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29535,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29535: An attacker can cause a heap buffer overflow in 'QuantizedMul' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
2316,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29542,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'StringNGrams'. See CVE-2021-29542."
2317,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29536,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29536: An attacker can cause a heap buffer overflow in 'QuantizedReshape' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
2318,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29544,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29544: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.QuantizeAndDequantizeV4Grad'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the 'input_*' tensors. In turn, this results in the tensors being passes as they are to 'QuantizeAndDequantizePerChannelGradientImpl' (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306). However, the 'vec<T>' method, requires the rank to 1 and triggers a 'CHECK' failure otherwise."
2319,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29543,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29543: An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks."
2320,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29540,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29540: TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in 'filter_sizes'. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor."
2321,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-8169,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency 'curl' to version 7.76.0 to handle CVE-2020-8169."
2322,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29516,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix fixes a null pointer dereference via invalid Ragged Tensors. See CVE-2021-29516."
2323,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29517,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in 'Conv3D'. See CVE-2021-29517."
2324,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29515,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a reference binding to null pointer in 'MatrixDiag*' ops. See CVE-2021-29515."
2325,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29594,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's convolution code. See CVE-2021-29594."
2326,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29596,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'EmbeddingLookup'. See CVE-2021-29596."
2327,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29558,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29558: An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset."
2328,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29545,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29545: An attacker can trigger a denial of service via a 'CHECK'-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at 'indices(i, 0)' is such that 'indices(i, 0) + 1' is outside the bounds of 'csr_row_ptr', this results in writing outside of bounds of heap allocated data."
2329,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29551,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29551: The implementation of 'MatrixTriangularSolve' (https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails."
2330,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29592,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in TFLite's 'Reshape' operator. See CVE-2021-29592."
2331,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29581,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'CTCBeamSearchDecoder'. See CVE-2021-29581."
2332,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29617,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29617: An attacker can cause a denial of service via `CHECK`-fail in `tf.strings.substr` with invalid arguments."
2333,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29574,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior in 'MaxPool3DGradGrad'. See CVE-2021-29574."
2334,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29512,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds."
2335,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29556,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29556: An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument."
2336,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29613,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'tf.raw_ops.CTCLoss'. See CVE-2021-29613."
2337,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29526,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'Conv2D'. See CVE-2021-29526."
2338,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29527,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedConv2D'. See CVE-2021-29527."
2339,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29595,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29595: The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0."
2340,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29561,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'LoadAndRemapMatrix'. See CVE-2021-29561."
2341,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29585,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29585: The TFLite computation for size of output after padding, `ComputeOutSize`(https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division. Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0."
2342,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29589,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29589: The reference implementation of the `GatherNd` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966). An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension."
2343,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29570,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'MaxPoolGradWithArgmax'. See CVE-2021-29570."
2344,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29559,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB access in unicode ops. See CVE-2021-29559."
2345,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29555,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'FusedBatchNorm'. See CVE-2021-29555."
2346,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29588,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'TransposeConv'. See CVE-2021-29588."
2347,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29557,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'SparseMatMul'. See CVE-2021-29557."
2348,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29612,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'BandedTriangularSolve'. See CVE-2021-29612."
2349,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29514,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor."
2350,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29584,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail due to integer overflow. See CVE-2021-29584."
2351,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29582,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in 'tf.raw_ops.Dequantize'. See CVE-2021-29582."
2352,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29562,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.IRFFT'. See CVE-2021-29562."
2353,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29597,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SpaceToBatchNd'. See CVE-2021-29597."
2354,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29565,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'SparseFillEmptyRows'. See CVE-2021-29565."
2355,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29619,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'tf.raw_ops.SparseCountSparseOutput'. See CVE-2021-29619."
2356,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29602,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'DepthwiseConv'. See CVE-2021-29602."
2357,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29577,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'AvgPool3DGrad'. See CVE-2021-29577."
2358,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29566,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29566: An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to 'tf.raw_ops.Dilation2DBackpropInput'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array. The values for 'h_out' and 'w_out' are guaranteed to be in range for 'out_backprop' (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating 'h_in_max'/'w_in_max' and 'in_backprop'."
2359,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29576,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPool3DGradGrad'. See CVE-2021-29576."
2360,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29600,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'OneHot'. See CVE-2021-29600."
2361,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29599,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'Split'. See CVE-2021-29599."
2362,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29608,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29608: TensorFlow is an end-to-end open source platform for machine learning. Due to lack of validation in 'tf.raw_ops.RaggedTensorToTensor', an attacker can exploit an undefined behavior if input arguments are empty. The implementation (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones. There are multiple 'DCHECK' validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything."
2363,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29554,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'DenseCountSparseOutput'. See CVE-2021-29554."
2364,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29578,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'FractionalAvgPoolGrad'. See CVE-2021-29578."
2365,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29547,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29547: An attacker can cause a segfault and denial of service via accessing data outside of bounds in 'tf.raw_ops.QuantizedBatchNormWithGlobalNormalization'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, '.flat<T>()' is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds."
2366,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29603,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB write in TFLite. See CVE-2021-29603."
2367,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29604,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of hashtable lookup. See CVE-2021-29604."
2368,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29572,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer)."
2369,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29587,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29587: TensorFlow is an end-to-end open source platform for machine learning. The `Prepare` step of the `SpaceToDepth` TFLite operator does not check for 0 before division (https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67). An attacker can craft a model such that `params->block_size` would be zero."
2370,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29569,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'RequantizationRange'. See CVE-2021-29569."
2371,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-8285,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 updates its dependency ""curl"" to a secure version (7.76.0)."
2372,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29601,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite concatentation. See CVE-2021-29601."
2373,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29573,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'MaxPoolGradWithArgmax'. See CVE-2021-29573."
2374,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29586,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in optimized pooling implementations in TFLite. See CVE-2021-29586."
2375,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29590,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in TFLite's implementation of 'Minimum' or 'Maximum'. See CVE-2021-29590."
2376,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29598,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SVDF'. See CVE-2021-29598."
2377,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29528,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedMul'. See CVE-2021-29528."
2378,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29611,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseReshape'. See CVE-2021-29611."
2379,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29580,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior and a 'CHECK'-fail in 'FractionalMaxPoolGrad'. See CVE-2021-29580."
2380,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29618,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29618: Passing a complex argument to `tf.transpose` at the same time as passing 'conjugate=True' argument results in a crash."
2381,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29575,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an overflow and a denial of service in 'tf.raw_ops.ReverseSequence'. See CVE-2021-29575."
2382,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29616,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29616: The implementation of TrySimplify (https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs."
2383,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29591,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow due to looping TFLite subgraph. See CVE-2021-29591."
2384,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29606,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap OOB read in TFLite. See CVE-2021-29606."
2385,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29607,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseSparseMinimum'. See CVE-2021-29607."
2386,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29609,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseAdd'. See CVE-2021-29609."
2387,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29583,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29583: The implementation of 'tf.raw_ops.FusedBatchNorm' is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that 'scale', 'offset', 'mean' and 'variance' (the last two only when required) all have the same number of elements as the number of channels of 'x'. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior."
2388,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-8231,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency ""curl"" to v7.76.0 to include security fixes."
2389,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-8286,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 updates 'curl' to '7.76.0' to handle CVE-2020-8286: curl 7.41.0 through 7.73.0 is vulnerable to an improper check for certificate revocation due to insufficient verification of the OCSP response."
2390,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-8177,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update 'curl' to '7.76.0' to handle CVE-2020-8177."
2391,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29593,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'BatchToSpaceNd'. See CVE-2021-29593."
2392,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2020-8284,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 update its dependency ""curl"" to handle CVE-2020-8284."
2393,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29579,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPoolGrad'. See CVE-2021-29579."
2394,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29605,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite memory allocation. See CVE-2021-29605."
2395,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29564,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'EditDistance'. See CVE-2021-29564."
2396,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29553,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB in 'QuantizeAndDequantizeV3'. See CVE-2021-29553."
2397,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29563,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29563: An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`. Eigen code operating on an empty matrix can trigger on an assertion and will cause program termination."
2398,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29550,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29550: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values. The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger. Later, these computed values are used as arguments (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to `GeneratePoolingSequence`(https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation. Since `output_length` can be 0, this results in runtime crashing."
2399,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29546,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29546: TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero."
2400,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29610,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29610: The validation in 'tf.raw_ops.QuantizeAndDequantizeV2' allows invalid values for 'axis' argument:. The validation (https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses '||' to mix two different conditions. If 'axis_ < -1' the condition in 'OP_REQUIRES' will still be true, but this value of 'axis_' results in heap underflow. This allows attackers to read/write to other data on the heap."
2401,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29571,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices."
2402,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29560,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29560: An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel. Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when 'parent_output_index' is shorter than 'row_split'."
2403,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-29568,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in 'tf.raw_ops.ParameterizedTruncatedNormal'. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of 'shape'. If 'shape' argument is empty, then 'shape_tensor.flat<T>()' is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."
2404,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37645,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37645: In affected versions the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit 96f364a1ca3009f98980021c4b32be5fdcca33a1."
2405,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37691,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37691: In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). The Tensorflow team has patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9."
2406,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37688,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37688: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer. The Tensorflow team has patched the issue in GitHub commit 15691e456c7dc9bd6be203b09765b063bf4a380c."
2407,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37692,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow versions 2.5.1 and 2.6.0 include a fix for CVE-2021-37692:
In affected versions under certain conditions, Go code can trigger a segfault in string deallocation. For string tensors, ""C.TF_TString_Dealloc"" is called during garbage collection within a finalizer function. However, tensor structure isn't checked until encoding to avoid a performance penalty. The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions). To fix this, the call to set the finalizer function is deferred until ""NewTensor"" returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written. The Tensorflow team has patched the issue in GitHub commit:
https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22
https://github.com/tensorflow/tensorflow/pull/50508
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cmgw-8vpc-rc59"
2408,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37640,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.5.1 and 2.6.0 include a fix for CVE-2021-37640: In affected versions the implementation of 'tf.raw_ops.SparseReshape' can be made to trigger an integral division by 0 exception. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements. The reshape functor (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0. The Tensorflow team has patched the issue in GitHub commit 4923de56ec94fff7770df259ab7f2288a74feb41."
2409,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22898,">=2.6.0a1,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow versions 2.3.4, 2.4.3, 2.5.1, and 2.6.0 update its dependency ""curl"" to include a fix for CVE-2021-22898"
2410,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37685,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37685: In affected versions TFLite's 'expand_dims.cc' (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data. If 'axis' is a large negative value (e.g., '-100000'), then after the first 'if' it would still be negative. The check following the 'if' statement will pass and the 'for' loop would read one element before the start of 'input_dims.data' (when 'i = 0'). The Tensorflow team has patched the issue in GitHub commit d94ffe08a65400f898241c0374e9edc6fa8ed257."
2411,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37657,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37657: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. The Tensorflow team has checked that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit f2a673bd34f0d64b8e40a551ac78989d16daad09."
2412,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37663,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37663:
In affected versions, due to incomplete validation in ""tf.raw_ops.QuantizeV2"", an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that ""min_range"" and ""max_range"" both have the same non-zero number of elements. If ""axis"" is provided (i.e., not ""-1""), then validation should check that it is a value in range for the rank of ""input"" tensor and then the lengths of ""min_range"" and ""max_range"" inputs match the ""axis"" dimension of the ""input"" tensor. The Tensorflow team has patched the issue in GitHub commit 6da6620efad397c85493b8f8667b821403516708. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j
https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708"
2413,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37661,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37661: In affected versions an attacker can cause a denial of service in 'boosted_trees_create_quantile_stream_resource' by using negative arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that 'num_streams' only contains non-negative numbers. In turn, this results in using this value to allocate memory (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40). However, 'reserve' receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library. The Tensorflow team has patched the issue in GitHub commit 8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992."
2414,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37665,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37665:
In affected versions, due to incomplete validation in MKL implementation of requantization, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the ""input"" tensor. A similar issue occurs in ""MklRequantizePerChannelOp"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments. The Tensorflow team has patched the issue in GitHub commit 9e62869465573cb2d9b5053f1fa02a81fce21d69 and in the Github commit 203214568f5bc237603dbab6e1fd389f1572f5c9.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp
https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9
https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69"
2415,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37676,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37676: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.SparseFillEmptyRows'. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors. The Tensorflow team has patched the issue in GitHub commit 578e634b4f1c1c684d4b4294f9e5281b2133b3ed."
2416,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37675,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37675: In affected versions most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations. The Tensorflow team has patched the issue in GitHub commit 8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4."
2417,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37687,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37687: In affected versions TFLite's 'GatherNd' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in 'indices'. Similar issue exists in 'Gather' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). The Tensorflow team has patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d."
2418,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37668,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37668:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.UnravelIndex"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by ""dims"" is not empty. Hence, if one element of ""dims"" is 0, the implementation does a division by 0. The Tensorflow team has patched the issue in GitHub commit a776040a5e7ebf76eeb7eb923bf1ae417dd4d233.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5
https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233"
2419,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37653,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37653: In affected versions an attacker can trigger a crash via a floating point exception in 'tf.raw_ops.ResourceGather'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, 'batch_size', and then divides by it without checking that this value is not 0. The Tensorflow team has patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11."
2420,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37660,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37660: In affected versions an attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if 'x' and 'v' are empty but the code uses '||' instead of '&&'. The Tensorflow team has patched the issue in GitHub commit e86605c0a336c088b638da02135ea6f9f6753618."
2421,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37684,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37684: In affected versions the implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 (https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695)."
2422,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37643,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37643: If a user does not provide a valid padding value to 'tf.raw_ops.MatrixDiagPartOp', then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from. The Tensorflow team has patched the issue in GitHub commit 482da92095c4d48f8784b1f00dda4f81c28d2988."
2423,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37644,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37644: In affected versions providing a negative element to 'num_elements' list argument of 'tf.raw_ops.TensorListReserve' causes the runtime to abort the process due to reallocating a 'std::vector' to have a negative number of elements. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls 'std::vector.resize()' with the new size controlled by input given by the user, without checking that this input is valid. The Tensorflow team has patched the issue in GitHub commit 8a6e874437670045e6c7dc6154c7412b4a2135e2."
2424,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37646,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37646: In affected versions the implementation of 'tf.raw_ops.StringNGrams' is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls 'reserve' on a 'tstring' with a value that sometimes can be negative if user supplies negative 'ngram_widths'. The 'reserve' method calls 'TF_TString_Reserve' which has an 'unsigned long' argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit c283e542a3f422420cfdb332414543b62fc4e4a5."
2425,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37681,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37681: In affected versions the implementation of SVDF in TFLite is vulnerable to a null pointer error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313). The 'GetVariableInput' function (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but 'GetTensorData' assumes that the argument is always a valid tensor. Furthermore, because 'GetVariableInput' calls 'GetMutableInput' (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return 'nullptr', the 'tensor->is_variable' expression can also trigger a null pointer exception. The Tensorflow team has patched the issue in GitHub commit 5b048e87e4e55990dae6b547add4dae59f4e1c76."
2426,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37641,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37641: In affected versions if the arguments to 'tf.raw_ops.RaggedGather' don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by 'params_nested_splits' is not an empty list of tensors. The Tensorflow team has patched the issue in GitHub commit a2b743f6017d7b97af1fe49087ae15f0ac634373."
2427,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37666,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37666: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToVariant'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. The Tensorflow team has patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612."
2428,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37662,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37662: In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in 'BoostedTreesCalculateBestGainsPerFeature' and similar attack can occur in 'BoostedTreesCalculateBestFeatureSplitV2'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. The Tensorflow team has patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7."
2429,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37690,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37690:
In affected versions when running shape functions, some functions (such as 'MutableHashTableShape') produce extra output information in the form of a 'ShapeAndType' struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault. 'ShapeRefiner' is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but the Tensorflow team was not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types. The Tensorflow team has patched the issue in GitHub commit ee119d4a498979525046fba1c3dd3f13a039fbb1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3hxh-8cp2-g4hg
https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1"
2430,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37682,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37682:
In affected versions all TFLite operations that use quantization can be made to use unitialized values. (For example, https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200). The issue stems from the fact that ""quantization.params"" is only valid if ""quantization.type"" is different that ""kTfLiteNoQuantization"". However, these checks are missing in large parts of the code. The Tensorflow team has patched the issue in GitHub commits 537bc7c723439b9194a358f64d871dd326c18887, 4a91f2069f7145aab6ba2d8cfe41be8a110c18a5 and 8933b8a21280696ab119b63263babdb54c298538.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4c4g-crqm-xrxw
https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5
https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887
https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538"
2431,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37650,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37650: In affected versions the implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types. The Tensorflow team has patched the issue in GitHub commit e0b6e58c328059829c3eb968136f17aa72b6c876."
2432,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37669,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37669:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.NonMaxSuppressionV5"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a ""std::vector"". However, as ""std::vector::resize"" takes the size argument as a ""size_t"" and ""output_size"" is an ""int"", there is an implicit conversion to unsigned. If the attacker supplies a negative value, this conversion results in a crash. A similar issue occurs in ""CombinedNonMaxSuppression"". The Tensorflow team has patched the issue in GitHub commit 3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d and commit b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c
https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d
https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58"
2433,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37677,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for 'tf.raw_ops.Dequantize' has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses 'axis' to select between two different values for 'minmax_rank' which is then used to retrieve tensor dimensions. However, code assumes that 'axis' can be either '-1' or a value greater than '-1', with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
2434,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22901,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
2435,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37655,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37655: TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to 'tf.raw_ops.ResourceScatterUpdate'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of 'indices' and 'updates': instead of checking that the shape of 'indices' is a prefix of the shape of 'updates' (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship. The Tensorflow team has patched the issue in GitHub commit 01cff3f986259d661103412a20745928c727326f."
2436,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37672,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37672:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.SdcaOptimizerV2"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of ""example_labels"" is the same as the number of examples. The Tensorflow team has patched the issue in GitHub commit a4e138660270e7599793fa438cd7b2fc2ce215a6.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7
https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6"
2437,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37670,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37670:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.UpperBound"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of ""sorted_input"" argument. A similar issue occurs in ""tf.raw_ops.LowerBound"". The Tensorflow team has patched the issue in GitHub commit 42459e4273c2e47a3232cc16c4f4fff3b3a35c38.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7
https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38"
2438,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37679,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37679:
In affected versions it is possible to nest a ""tf.map_fn"" within another ""tf.map_fn"" call. However, if the input tensor is a ""RaggedTensor"" and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The ""t"" and ""z"" outputs should be identical, however this is not the case. The last row of ""t"" contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a ""Variant"" tensor to a ""RaggedTensor"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. The Tensorflow team has patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp
https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
2439,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22897,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
2440,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-22876,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
2441,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37673,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37673:
In affected versions, an attacker can trigger a denial of service via a ""CHECK""-fail in ""tf.raw_ops.MapStage"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the ""key"" input is a valid non-empty tensor. The Tensorflow team has patched the issue in GitHub commit d7de67733925de196ec8863a33445b73f9562d1d.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg
https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d"
2442,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37674,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in 'tf.raw_ops.MaxPoolGrad' caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the 'orig_input' and 'orig_output' tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
2443,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-37678,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.7.0rc0,<2.7.0","Tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:
In affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses ""yaml.unsafe_load"" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r
https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012"
2444,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41211,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41211: In affected versions, the shape inference code for 'QuantizeV2' can trigger a read outside of bounds of heap allocated array. This occurs whenever 'axis' is a negative value less than '-1'. In this case, we are accessing data before the start of a heap buffer. The code allows 'axis' to be an optional argument ('s' would contain an 'error::NOT_FOUND' error code). Otherwise, it assumes that 'axis' is a valid index into the dimensions of the 'input' tensor. If 'axis' is less than '-1' then this results in a heap OOB read. The fix is included in TensorFlow 2.7.0. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c
https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244"
2445,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2021-41220,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41220: In affected versions, the async implementation of 'CollectiveReduceV2' suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been 'std::move()'d are still accessed. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5
https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
2446,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23594,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered."
2447,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23590,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.7.1 and 2.8.0 include a fix for CVE-2022-23590: A 'GraphDef' from a TensorFlow 'SavedModel' can be maliciously altered to cause a TensorFlow process to crash due to encountering a 'StatusOr' value that is an error and forcibly extracting the value from it.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278"
2448,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23592,">=2.8.0a0,<2.8.0","Tensorflow version 2.8.0 includes a fix for CVE-2022-23592: TensorFlow's type inference can cause a heap out of bounds read as the bounds checking is done in a 'DCHECK' (which is a no-op during production). An attacker can control the 'input_idx' variable such that 'ix' would be larger than the number of values in 'node_t.args'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq36-27g6-p492"
2449,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-23593,">=2.8.0a0,<2.8.0","Tensorflow 2.8.0 includes a fix for CVE-2022-23593: The 'simplifyBroadcast' function in the MLIR-TFRT infrastructure in TensorFlow is vulnerable to a segfault (hence, denial of service), if called with scalar shapes. If all shapes are scalar, then 'maxRank' is 0, so we build an empty 'SmallVector'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gwcx-jrx4-92w2"
2450,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/docsource/docs_requirements.txt,False,CVE-2022-29210,">=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","TensorFlow is an open source platform for machine learning. In version 2.8.0, the 'TensorKey' hash function used total estimated 'AllocatedBytes()', which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. 'int32_t'). It also tried to access individual tensor bytes through 'tensor.data()' of size 'AllocatedBytes()'. This led to ASAN failures because the 'AllocatedBytes()' is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the '.data()' buffer. The discoverers could not use this byte vector anyway because types such as 'tstring' include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."
2451,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2017-12852,<1.13.2,"Numpy 1.13.2 includes a fix for CVE-2017-12852: The numpy.pad function in Numpy 1.13.1 and older versions is missing input validation. An empty list or ndarray will stick into an infinite loop, which can allow attackers to cause a DoS attack.
https://github.com/numpy/numpy/issues/9560#issuecomment-322395292"
2452,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-6446,<1.16.3,"Numpy 1.16.3 includes a fix for CVE-2019-6446: It uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, as demonstrated by a numpy.load call.
https://github.com/numpy/numpy/commit/89b688732b37616c9d26623f81aaee1703c30ffb"
2453,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-33430,<1.21.0rc1,"Numpy 1.21.0rc1 includes a fix for CVE-2021-33430: A Buffer Overflow vulnerability in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service. 
NOTE: The vendor does not agree this is a vulnerability. In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.
https://github.com/numpy/numpy/issues/18939"
2454,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-34141,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-34141: An incomplete string comparison in the numpy.core component in NumPy before 1.22.0 allows attackers to trigger slightly incorrect copying by constructing specific string objects. 
NOTE: the vendor states that this reported code behavior is ""completely harmless.""
https://github.com/numpy/numpy/issues/18993"
2455,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41496,<1.22.0,"Numpy 1.22.0 includes a fix for CVE-2021-41496: Buffer overflow in the array_from_pyobj function of fortranobject.c, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values. 
NOTE: The vendor does not agree this is a vulnerability; the negative dimensions can only be created by an already privileged user (or internally).
https://github.com/numpy/numpy/issues/19000"
2456,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41495,<1.22.2,"Numpy 1.22.2  includes a fix for CVE-2021-41495: Null Pointer Dereference vulnerability exists in numpy.sort in NumPy in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays. 
NOTE: While correct that validation is missing, an error can only occur due to an exhaustion of memory. If the user can exhaust memory, they are already privileged. Further, it should be practically impossible to construct an attack which can target the memory exhaustion to occur at exactly this place.
https://github.com/numpy/numpy/issues/19038"
2457,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2014-1859,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1859: (1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/pull/4262"
2458,numpy,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2014-1858,<1.8.1,"Numpy 1.8.1 includes a fix for CVE-2014-1858: __init__.py in f2py in NumPy before 1.8.1 allows local users to write to arbitrary files via a symlink attack on a temporary file.
https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15"
2459,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,PVE-2021-36375,<1.10.0,tensorflow before 1.10.0 uses an insecure grpc dependency.
2460,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-9635,<1.12.2,NULL pointer dereference in Google TensorFlow before 1.12.2 could cause a denial of service via an invalid GIF file. See CVE-2019-9635.
2461,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-16778,<1.15,"Tensorflow 1.15 includes a fix for CVE-2019-16778: In TensorFlow before 1.15, a heap buffer overflow in UnsortedSegmentSum can be produced when the Index template argument is int32. In this case data_size and num_segments fields are truncated from int64 to int32 and can produce negative numbers, resulting in accessing out of bounds heap memory. This is unlikely to be exploitable and was detected and fixed internally in TensorFlow 1.15 and 2.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-844w-j86r-4x2j
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2019-002.md
https://github.com/tensorflow/tensorflow/commit/db4f9717c41bccc3ce10099ab61996b246099892"
2462,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,PVE-2021-37524,<1.15.0,"The original changelog reads: ""Tensorflow 2.0 fixes a potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access."" However, it was later confirmed that the fix was already included in 1.15 and later. See: <https://github.com/tensorflow/tensorflow/issues/37701>."
2463,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-19244,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite3"" to handle CVE-2019-19244."
2464,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-19880,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""SQLite3"" to handle CVE-2019-19880."
2465,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-10099,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2019-10099."
2466,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-19664,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-19664."
2467,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-13960,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2019-13960."
2468,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-11770,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""Apache Spark"" to handle CVE-2018-11770."
2469,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-20330,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-20330."
2470,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-19645,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite"" to handle CVE-2019-19645."
2471,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-17190,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2018-17190."
2472,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15208,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15208: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a ""DCHECK"" which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue was patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d"
2473,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15202,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15202: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'Shard' API in TensorFlow expects the last argument to be a function taking two 'int64' (i.e., 'long long') arguments. However, there are several places in TensorFlow where a lambda taking 'int' or 'int32' arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4"
2474,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15190,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15190: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the ""tf.raw_ops.Switch"" operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor. However, the eager runtime traverses all tensors in the output. Since only one of the tensors is defined, the other one is ""nullptr"", hence we are binding a reference to ""nullptr"". This is undefined behavior and reported as an error if compiling with ""-fsanitize=null"". In this case, this results in a segmentation fault The issue was patched in commit da8558533d925694483d2c136a9220d6d49d843c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4g9f-63rx-5cw4"
2475,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15209,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15209: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a ""nullptr"" buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with ""nullptr"". However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue was patched in commit 0b5662bc."
2476,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15207,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34"
2477,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15205,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15205: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'data_splits' argument of 'tf.raw_ops.StringNGrams' lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory In the linked code snippet, all the binary strings after 'ee ff' are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46"
2478,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15195,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15195: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of 'SparseFillEmptyRowsGrad' uses a double indexing pattern. It is possible for 'reverse_index_map(i)' to be an index outside of bounds of 'grad_values', thus resulting in a heap buffer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr"
2479,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15204,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15204: In eager mode, TensorFlow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 does not set the session state. Hence, calling ""tf.raw_ops.GetSessionHandle"" or ""tf.raw_ops.GetSessionHandleV2"" results in a null pointer dereference In linked snippet, in eager mode, ""ctx->session_state()"" returns ""nullptr"". Since code immediately dereferences this, we get a segmentation fault. The issue was patched in commit 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1"
2480,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15203,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15203: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the 'fill' argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a 'printf' call is constructed. This may result in segmentation fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
2481,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15206,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15206: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's ""SavedModel"" protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using ""tensorflow-serving"" or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d. However, this was not enough, as #41097 reported a different failure mode. The issue was finally patched in commit df095206f25471e864a8e63a0f1caef53a0e3a6"
2482,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15211,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15211: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative ""-1"" value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the ""-1"" index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue was patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). A potential workaround would be to add a custom ""Verifier"" to the model loading code to ensure that only operators which accept optional inputs use the ""-1"" special value and only for the tensors that they expect to be optional. Since this allow-list type approach is error-prone, it's advised upgrading to the patched code."
2483,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-13631,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13631."
2484,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-13435,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13435."
2485,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-13630,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13630."
2486,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-13871,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13871."
2487,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-13434,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13434."
2488,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-9327,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-9327."
2489,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-11655,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11655."
2490,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-11656,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11656."
2491,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15210,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15210: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2"
2492,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15194,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow 2.4.0 includes a fix for CVE-2020-15194: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments. Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."""
2493,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-14155,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2 and 2.3.2 update its dependency ""PCRE"" to handle CVE-2020-14155."
2494,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15250,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency 'Junit4' to v4.13.1 to include a security fix."
2495,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-20838,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency ""PCRE"" to fix CVE-2019-20838."
2496,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-13790,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 updates its dependency ""Libjpeg-turbo"" to handle CVE-2020-13790."
2497,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-26270,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26270: In affected versions, running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a CHECK failure when using the CUDA backend. This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer."
2498,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-26266,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","TensorFlow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0 includes a fix for CVE-2020-26266: In affected versions and under certain cases a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers filled with the default value of the type but forgetting to default initialize the quantized floating point types in Eigen."
2499,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-26271,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26271: In affected versions, under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library."
2500,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-26267,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26267: In affected versions, the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes."
2501,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-26268,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden."
2502,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-7576,<1.6.0a1,Google TensorFlow 1.6.x and earlier is affected by: Null Pointer Dereference. The type of exploitation is: context-dependent. See CVE-2018-7576.
2503,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-21233,<1.7.0,"TensorFlow before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in core/kernels/decode_bmp_op.cc. See CVE-2018-21233."
2504,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-7575,<1.7.0a1,Google TensorFlow 1.7.x and earlier is affected by a Buffer Overflow vulnerability. The type of exploitation is context-dependent. See CVE-2018-7575.
2505,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-7577,<1.7.1,"Memcpy parameter overlap in Google Snappy library 1.1.4, as used in Google TensorFlow before 1.7.1, could result in a crash or read from other parts of process memory. See CVE-2018-7577."
2506,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-10055,<1.7.1,Invalid memory access and/or a heap buffer overflow in the TensorFlow XLA compiler in Google TensorFlow before 1.7.1 could cause a crash or read from other parts of process memory via a crafted configuration file. See CVE-2018-10055.
2507,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25661,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25661: In versions prior to 2.11.1 a malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. A proof of concept can be constructed with the 'Convolution3DTranspose' function. This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services. An attacker must have privilege to provide input to a 'Convolution3DTranspose' call.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq"
2508,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25665,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25665: Prior to versions 2.12.0 and 2.11.1, when 'SparseSparseMaximum' is given invalid sparse tensors as inputs, it can give a null pointer error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-558h-mq8x-7q9g"
2509,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25671,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25671: There is out-of-bounds access due to mismatched integer type sizes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j5w9-hmfh-4cr6"
2510,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25658,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25658: Prior to versions 2.12.0 and 2.11.1, an out of bounds read is in GRUBlockCellGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-68v3-g9cm-rmm6"
2511,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25801,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25801: Prior to versions 2.12.0 and 2.11.1, 'nn_ops.fractional_avg_pool_v2' and 'nn_ops.fractional_max_pool_v2' require the first and fourth elements of their parameter 'pooling_ratio' to be equal to 1.0, as pooling on batch and channel dimensions is not supported.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f49c-87jh-g47q"
2512,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-27579,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-27579: Constructing a tflite model with a paramater 'filter_input_channel' of less than 1 gives a FPE.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5w96-866f-6rm8"
2513,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25672,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25672: The function 'tf.raw_ops.LookupTableImportV2' cannot handle scalars in the 'values' parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
2514,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25676,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25676: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.ParallelConcat' segfaults with a nullptr dereference when given a parameter 'shape' with rank that is not greater than zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6wfh-89q8-44jq"
2515,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25666,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25666: Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f637-vh3r-vfh2"
2516,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25667,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25667: Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when '2^31 <= num_frames * height * width * channels < 2^32', for example Full HD screencast of at least 346 frames.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68"
2517,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25673,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25673: Versions prior to 2.12.0 and 2.11.1 have a Floating Point Exception in TensorListSplit with XLA. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
2518,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25674,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25674: Versions prior to 2.12.0 and 2.11.1 have a null pointer error in RandomShuffle with XLA enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf97-q72m-7579"
2519,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25670,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25670: Versions prior to 2.12.0 and 2.11.1 have a null point error in QuantizedMatMulWithBiasAndDequantize with MKL enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rq-hwc3-x77w"
2520,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25668,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25668: Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96"
2521,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25664,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25664: Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hg6-5c2q-7rcr"
2522,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25663,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25663: Prior to versions 2.12.0 and 2.11.1, when 'ctx->step_containter()' is a null ptr, the Lookup function will be executed with a null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-64jg-wjww-7c5w"
2523,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25660,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25660: Prior to versions 2.12.0 and 2.11.1, when the parameter 'summarize' of 'tf.raw_ops.Print' is zero, the new method 'SummarizeArray<bool>' will reference to a nullptr, leading to a seg fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj"
2524,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25675,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25675: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.Bincount' segfaults when given a parameter 'weights' that is neither the same shape as parameter 'arr' nor a length-0 tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7x4v-9gxg-9hwj"
2525,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25669,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25669: Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for 'tf.raw_ops.AvgPoolGrad', it can give a floating point exception.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rcf8-g8jv-vg6p"
2526,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25662,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25662: Versions prior to 2.12.0 and 2.11.1 are vulnerable to integer overflow in EditDistance.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7jvm-xxmr-v5cw"
2527,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2023-25659,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25659: Prior to versions 2.12.0 and 2.11.1, if the parameter 'indices' for 'DynamicStitch' does not match the shape of the parameter 'data', it can trigger an stack OOB read.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p"
2528,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15266,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15266: In Tensorflow before version 2.4.0, when the 'boxes' argument of 'tf.image.crop_and_resize' has a very large value, the CPU kernel implementation receives it as a C++ 'nan' floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.
https://github.com/tensorflow/tensorflow/issues/42129
https://github.com/tensorflow/tensorflow/pull/42143/commits/3ade2efec2e90c6237de32a19680caaa3ebc2845
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xwhf-g6j5-j5gc"
2529,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15265,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
2530,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41210,"<2.4.4,>=2.5.0rc0,<2.5.2, >=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41210: In affected versions, the shape inference functions for 'SparseCountSparseOutput' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc
https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2"
2531,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41196,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41196: In affected versions, the Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative. This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8"
2532,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41195,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41195: In affected versions, the implementation of 'tf.math.segment_*' operations results in a 'CHECK'-fail related abort (and denial of service) if a segment id in 'segment_ids' is large. This is similar to CVE-2021-29584 (and similar to other reported vulnerabilities in TensorFlow localized to specific APIs): the implementation (both on CPU and GPU) computes the output shape using 'AddDim'. However, if the number of elements in the tensor overflows an 'int64_t' value, 'AddDim' results in a 'CHECK' failure which provokes a 'std::abort'. Instead, code should use 'AddDimWithStatus'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh"
2533,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22925,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22925."
2534,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41217,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41217: In affected versions, the process of building the control flow graph for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not. This occurs because the code assumes that the first node in the pairing (e.g., an 'Enter' node) always exists when encountering the second node (e.g., an 'Exit' node). When this is not the case, 'parent' is 'nullptr' so dereferencing it causes a crash. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5crj-c72x-m7gq
https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff"
2535,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41228,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41228: In affected versions, TensorFlow's 'saved_model_cli' tool is vulnerable to a code injection as it calls 'eval' on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. The issue has been patched by adding a 'safe' flag which defaults to 'True' and an explicit warning for users.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v
https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7"
2536,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41215,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41215: In affected versions, the shape inference code for 'DeserializeSparse' can trigger a null pointer dereference. This is because the shape inference function assumes that the 'serialize_sparse' tensor is a tensor with positive rank (and having '3' as the last dimension). The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r
https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850"
2537,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41216,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41216: In affected versions, the shape inference function for 'Transpose' is vulnerable to a heap buffer overflow. This occurs whenever 'perm' contains negative elements. The shape inference function does not validate that the indices in 'perm' are all valid. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9
https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14"
2538,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22924,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22924."
2539,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22923,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22923."
2540,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41226,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41226: In affected versions, the implementation of 'SparseBinCount' is vulnerable to a heap OOB access. This is because of missing validation between the elements of the 'values' argument and the shape of the sparse output. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-374m-jm66-3vj8
https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba"
2541,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41200,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41200: In affected versions, if 'tf.summary.create_file_writer' is called with non-scalar arguments, code crashes due to a 'CHECK'-fail. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f"
2542,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41218,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41218: In affected versions, the shape inference code for 'AllToAll' can be made to execute a division by 0. This occurs whenever the 'split_count' argument is 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273
https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc"
2543,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41223,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41223: In affected versions, the implementation of 'FusedBatchNorm' kernels is vulnerable to a heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr
https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda"
2544,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41224,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41224: In affected versions, the implementation of 'SparseFillEmptyRows' can be made to trigger a heap OOB access. This occurs whenever the size of 'indices' does not match the size of 'values'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v
https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b"
2545,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41219,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41219: In affected versions, the code for sparse matrix multiplication is vulnerable to undefined behavior via binding a reference to 'nullptr'. This occurs whenever the dimensions of 'a' or 'b' are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, it should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x
https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae"
2546,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41202,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41202: In affected versions, while calculating the size of the output within the 'tf.range' kernel, there is a conditional statement of type 'int64 = condition ? int64 : double'. Due to C++ implicit conversion rules, both branches of the condition will be cast to 'double' and the result would be truncated before the assignment. This result in overflows. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx"
2547,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41221,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41221: In affected versions, the shape inference code for the 'Cudnn*' operations can be tricked into accessing invalid memory via a heap buffer overflow. This occurs because the ranks of the 'input', 'input_h' and 'input_c' parameters are not validated, but code assumes they have certain values. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx
https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6"
2548,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41203,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41203: In affected versions, an attacker can trigger undefined behavior, integer overflows, segfaults and 'CHECK'-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7pxj-m4jf-r6h2"
2549,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41222,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41222: In affected versions, the implementation of 'SplitV' can trigger a segfault if an attacker supplies negative arguments. This occurs whenever 'size_splits' contains more than one value and at least one value is negative. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6
https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6"
2550,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22922,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22922."
2551,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41227,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41227: In affected versions, the 'ImmutableConst' operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the 'tstring' TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7
https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b
https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585"
2552,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41201,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41201: In affected versions, during execution, 'EinsumHelper::ParseEquation()' is supposed to set the flags in 'input_has_ellipsis' vector and '*output_has_ellipsis' boolean to indicate whether there is ellipsis in the corresponding inputs and output. However, the code only changes these flags to 'true' and never assigns 'false'. This results in unitialized variable access if callers assume that 'EinsumHelper::ParseEquation()' always sets these flags. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j86v-p27c-73fm
https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6"
2553,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22926,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22926."
2554,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41205,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41205: In affected versions, the shape inference functions for the 'QuantizeAndDequantizeV*' operations can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f
https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d"
2555,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41214,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41214: In affected versions, the shape inference code for 'tf.ragged.cross' has an undefined behavior due to binding a reference to 'nullptr'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
2556,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41207,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41207: In affected versions, the implementation of 'ParallelConcat' misses some input validation and can produce a division by 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
2557,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41204,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41204: In affected versions, during TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-786j-5qwq-r36x
https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659"
2558,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41213,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf
https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7"
2559,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41212,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41212: In affected versions, the shape inference code for 'tf.ragged.cross' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
2560,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41225,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41225: In affected versions, TensorFlow's Grappler optimizer has a use of unitialized variable. If the 'train_nodes' vector (obtained from the saved model that gets optimized) does not contain a 'Dequeue' node, then 'dequeue_node' is left unitialized. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw
https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"
2561,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41198,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41198: In affected versions, if 'tf.tile' is called with a large input argument, then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q"
2562,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41209,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41209: In affected versions, the implementations for convolution operators trigger a division by 0 if passed empty filter tensor arguments. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hpv-v2rx-c5g6
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
2563,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41199,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41199: In affected versions, if 'tf.image.resize' is called with a large input argument then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm"
2564,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-10531,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 update its dependency 'icu' to v69.1 to include a security fix."
2565,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23591,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The 'GraphDef' format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a 'GraphDef' containing a fragment such as the following can be consumed when loading a 'SavedModel'. This would result in a stack overflow during execution as resolving each 'NodeDef' means resolving the function itself and its nodes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2566,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23576,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2567,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23585,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding PNG images TensorFlow can produce a memory leak if the image is invalid. After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2568,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23578,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. If a graph node is invalid, TensorFlow can leak memory in the implementation of `ImmutableExecutorState::Initialize`. Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2569,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23583,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2570,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23567,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23567: The implementations of 'Sparse*Cwise*' ops are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or 'CHECK'-fails when building new 'TensorShape' objects (so, assert failures based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43"
2571,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23574,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. There is a typo in TensorFlow's `SpecializeType` which results in heap OOB read/write. Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
2572,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23571,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2573,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23589,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place). First, during constant folding, the `GraphDef` might not have the required nodes for the binary operation. If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect. We have a similar issue during `IsIdentityConsumingSwitch`. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2574,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23586,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2575,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21733,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21733: The implementation of 'StringNGrams' can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. There is missing a validation on 'pad_witdh' and that result in computing a negative value for 'ngram_width' which is later used to allocate parts of the output.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g"
2576,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23587,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2577,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21735,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21735: The implementation of 'FractionalMaxPool' can be made to crash a TensorFlow process via a division by 0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj"
2578,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23577,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `GetInitOp` is vulnerable to a crash caused by dereferencing a null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2579,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23566,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. TensorFlow is vulnerable to a heap OOB write in `Grappler`. The `set_output` function writes to an array at the specified index. Hence, this gives a malicious user a write primitive. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2580,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23562,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23562: The implementation of 'Range' suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr"
2581,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23572,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
2582,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23588,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2583,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23579,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23579: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'SafeToRemoveIdentity' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5f2r-qp73-37mr"
2584,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23569,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23569: Multiple operations in TensorFlow can be used to trigger a denial of service via 'CHECK'-fails (i.e., assertion failures). This is similar to CVE-2021-41197 and has a similar fix. It is possible that other similar instances exist.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qj5r-f9mv-rffh"
2585,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23575,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2586,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23580,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23580: During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-627q-g293-49q7"
2587,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21732,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21732: The implementation of 'ThreadPoolHandle' can be used to trigger a denial of service attack by allocating too much memory. This is because the 'num_threads' argument is only checked to not be negative, but there is no upper bound on its value.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq"
2588,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21740,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21740: The implementation of 'SparseCountSparseOutput' is vulnerable to a heap overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-44qp-9wwf-734r"
2589,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23595,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23595: When building an XLA compilation cache, if default settings are used, TensorFlow triggers a null pointer dereference. In the default scenario, all devices are allowed, so 'flr->config_proto' is 'nullptr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fpcp-9h7m-ffpx"
2590,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23581,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23581: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'IsSimplifiableReshape' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq86-3f29-px2c"
2591,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21739,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21739: The implementation of 'QuantizedMaxPool' has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5"
2592,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23564,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23564: When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a 'CHECK' assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3"
2593,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23565,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23565: An attacker can trigger denial of service via assertion failure by altering a 'SavedModel' on disk such that 'AttrDef's of some operation are duplicated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4v5p-v5h9-6xjx"
2594,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21741,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21741: An attacker can craft a TFLite model that would trigger a division by zero in the implementation of depthwise convolutions. The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is strictly positive.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-428x-9xc2-m8mj"
2595,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21726,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21726: The implementation of 'Dequantize' does not fully validate the value of 'axis' and can result in heap OOB accesses. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72"
2596,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23557,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23557: An attacker can craft a TFLite model that would trigger a division by zero in 'BiasAndClamp' implementation. There is no check that the 'bias_size' is non zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf2j-f278-xh4v"
2597,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21728,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
2598,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23568,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23568: The implementation of 'AddManySparseToTensorsMap' is vulnerable to an integer overflow which results in a 'CHECK'-fail when building new 'TensorShape' objects (so, an assert failure based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2"
2599,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23563,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23563: In multiple places, TensorFlow uses 'tempfile.mktemp' to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in 'mktemp' and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the 'mktemp' function usage. It was replaced 'mktemp' with the safer 'mkstemp'/'mkdtemp' functions, according to the usage pattern.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wc4g-r73w-x8mm"
2600,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21730,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21730: The implementation of 'FractionalAvgPoolGrad' does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4"
2601,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21736,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21736: The implementation of 'SparseTensorSliceDataset' has an undefined behavior: under certain conditions, it can be made to dereference a 'nullptr' value. The 3 input arguments to 'SparseTensorSliceDataset' represent a sparse tensor. However, there are some preconditions that these arguments must satisfy, but these are not validated in the implementation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9"
2602,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23570,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
2603,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23558,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23558: An attacker can craft a TFLite model that would cause an integer overflow in 'TfLiteIntArrayCreate'. The 'TfLiteIntArrayGetSizeInBytes' returns an 'int' instead of a 'size_t'. An attacker can control model inputs such that 'computed_size' overflows the size of 'int' datatype.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9gwq-6cwj-47h3"
2604,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23559,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23559: An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both 'embedding_size' and 'lookup_size' are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98p5-x8x4-c9m5"
2605,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21727,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21727: The implementation of shape inference for 'Dequantize' is vulnerable to an integer overflow weakness. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes 'axis + 1', an attacker can trigger an integer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw"
2606,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21725,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21725: The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f"
2607,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21738,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21738: The implementation of 'SparseCountSparseOutput' can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6"
2608,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23584,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2609,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23582,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23582: A malicious user can cause a denial of service by altering a 'SavedModel' such that 'TensorByteSize' would trigger 'CHECK' failures. 'TensorShape' constructor throws a 'CHECK'-fail if shape is partial or has a number of elements that would overflow the size of an 'int'. The 'PartialTensorShape' constructor instead does not cause a 'CHECK'-abort if the shape is partial, which is exactly what this function needs to be able to return '-1'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4j82-5ccr-4r8v"
2610,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23561,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23561: An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c78-vcq7-7vxq"
2611,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21731,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21731: The implementation of shape inference for 'ConcatV2' can be used to trigger a denial of service attack via a segfault caused by a type confusion. The 'axis' argument is translated into 'concat_dim' in the 'ConcatShapeHelper' helper function. Then, a value for 'min_rank' is computed based on 'concat_dim'. This is then used to validate that the 'values' tensor has at least the required rank. However, 'WithRankAtLeast' receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented. Due to the fact that 'min_rank' is a 32-bits value and the value of 'axis', the 'rank' argument is a negative value, so the error check is bypassed.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
2612,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21734,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21734: The implementation of 'MapStage' is vulnerable to a 'CHECK'-fail if the key tensor is not a scalar.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm"
2613,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23573,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
2614,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21737,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21737: The implementation of '*Bincount' operations allows malicious users to cause denial of service by passing in arguments which would trigger a 'CHECK'-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in 'CHECK' failures later when the output tensors get allocated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2vv-v9cg-qhh7"
2615,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-21729,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21729: The implementation of 'UnravelIndex' is vulnerable to a division by zero caused by an integer overflow bug.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j"
2616,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23560,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23560: An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4hvf-hxvg-f67v"
2617,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41208,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41208: In affected versions, the code for boosted trees in TensorFlow is still missing validation. As a result, attackers can trigger denial of service (via dereferencing 'nullptr's or via 'CHECK'-failures) as well as abuse undefined behavior (binding references to 'nullptr's). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call. Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs. TensorFlow's boosted trees APIs will be deprecated in subsequent releases.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-57wx-m983-2f88
https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6gw-r52c-724r"
2618,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41206,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41206: In affected versions, several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or 'CHECK'-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. These issues were discovered internally via tooling while working on improving/testing GPU op determinism. As such, there aren't reproducers and there will be multiple fixes for these issues.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pgcq-h79j-2f69
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x"
2619,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27775,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27775."
2620,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29193,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29193: missing validation which causes 'TensorSummaryV2' to crash."
2621,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27776,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27776."
2622,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29196,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29196: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
2623,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29197: Missing validation which causes denial of service via 'UnsortedSegmentJoin'."
2624,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27779,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27779."
2625,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29202,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29202: Denial of service in 'tf.ragged.constant' due to lack of validation."
2626,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29201,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29201: Missing validation which results in undefined behavior in 'QuantizedConv2D'."
2627,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29206,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29206: Missing validation which results in undefined behavior in 'SparseTensorDenseAdd'."
2628,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27778,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27778."
2629,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29204,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29204: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
2630,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29199,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29199: Missing validation which causes denial of service via 'LoadAndRemapMatrix'."
2631,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29213,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29213: Crashes stemming from incomplete validation in signal ops."
2632,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29211,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29211: Segfault when 'tf.histogram_fixed_width' is called with NaN values."
2633,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27780,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27780."
2634,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29205,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29205: Segfault due to missing support for quantized types."
2635,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-22576,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-22576."
2636,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29209,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29209: Type confusion leading to 'CHECK'-failure based denial of service."
2637,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27782,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27782."
2638,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29195,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29195: Missing validation which causes denial of service via 'StagePeek'."
2639,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29216,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29216: Code injection in 'saved_model_cli'."
2640,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29200,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29200: Missing validation which causes denial of service via 'LSTMBlockCell'."
2641,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29198,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29198:  Missing validation which causes denial of service via 'SparseTensorToCSRSparseMatrix'."
2642,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29207,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29207: Issues arising from undefined behavior stemming from users supplying invalid resource handles."
2643,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29208,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29208: Segfault and OOB write due to incomplete validation in 'EditDistance'."
2644,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29194,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29194: Missing validation which causes denial of service via 'DeleteSessionTensor'."
2645,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27781,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27781."
2646,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-30115,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-30115."
2647,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2021-41197: Affected versions allow tensors to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an 'int64_t'. If an overflow occurs, 'MultiplyWithoutOverflow' would return a negative result. In the majority of TensorFlow codebase this then results in a 'CHECK'-failure. Newer constructs exist which return a 'Status' instead of crashing the binary. This is similar to CVE-2021-29584.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-vrvr-3rx2
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mw6j-hh29-h379"
2648,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-25032,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'zlib' to v1.2.12 to handle CVE-2018-25032."
2649,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-27774,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27774."
2650,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29192,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29192: missing validation which crashes 'QuantizeAndDequantizeV4Grad'."
2651,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29191,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29191: Missing validation which causes denial of service via 'GetSessionTensor'."
2652,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29212,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29212: Core dump when loading TFLite models with quantization."
2653,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29203,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29203: Integer overflow in 'SpaceToBatchND'."
2654,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35985,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35985: 'CHECK' fail in 'LRNGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp"
2655,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35971,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35971: 'CHECK' fail in 'FakeQuantWithMinMaxVars'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7"
2656,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35952,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35952: 'CHECK' failures in 'UnbatchGradOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47"
2657,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35979,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35979: Segfault in 'QuantizedRelu' and 'QuantizedRelu6'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x"
2658,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36002,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36002: 'CHECK' fail in 'Unbatch'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg"
2659,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35996,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35996: Floating point exception in 'Conv2D'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37"
2660,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35959,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35959: 'CHECK' failures in 'AvgPool3DGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq"
2661,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35990,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35990: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannelGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh"
2662,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35983,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35983: 'CHECK' fail in 'Save' and 'SaveSlices'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4"
2663,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35974,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35974: Segfault in 'QuantizeDownAndShrinkRange'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x"
2664,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36019,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36019: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannel'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7"
2665,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35994,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35994: 'CHECK' fail in 'CollectiveGather'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f"
2666,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36014,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36014: Null-dereference in 'mlir::tfg::TFOp::nameAttr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7j3m-8g3c-9qqq"
2667,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35964,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35964: Segfault in 'BlockLSTMGradV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668"
2668,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35987,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35987: 'CHECK' fail in 'DenseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49"
2669,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36011,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36011: Null dereference on MLIR on empty function attributes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv43-93gv-vm8f"
2670,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36027,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36027: Segfault TFLite converter on per-channel quantized transposed convolutions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr"
2671,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35972,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35972: Segfault in 'QuantizedBiasAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9"
2672,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35968,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35968: 'CHECK' fail in 'AvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25"
2673,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35941,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35941: 'CHECK' failure in 'AvgPoolOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5"
2674,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35940,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35940: Int overflow in 'RaggedRangeOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x"
2675,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35939,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35939: OOB write in 'scatter_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf"
2676,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35997,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35997: 'CHECK' fail in 'tf.sparse.cross'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf"
2677,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36016,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36016: 'CHECK'-fail in 'tensorflow::full_type::SubstituteFromAttrs'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g468-qj8g-vcjc"
2678,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35937,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35937: OOB read in 'Gather_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h"
2679,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35963,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35963: 'CHECK' failures in 'FractionalAvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm"
2680,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36015,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36015: Integer overflow in math ops. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rh87-q4vg-m45j"
2681,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35984,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35984: 'CHECK' fail in 'ParameterizedTruncatedNormal'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5"
2682,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36013,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36013: Null-dereference in 'mlir::tfg::GraphDefImporter::ConvertNodeDef'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828c-5j5q-vrjq"
2683,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35981,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35981: 'CHECK' fail in 'FractionalMaxPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw"
2684,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35960,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35960: 'CHECK' failure in 'TensorListReserve' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4"
2685,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36017,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36017: Segfault in 'Requantize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc"
2686,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35969,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35969: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx"
2687,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36012,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36012: Assertion fail on MLIR empty edge names.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jvhc-5hhr-w3v5"
2688,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36000,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36000: 'CHECK' fail in 'Eig'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v"
2689,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35986,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35986: Segfault in 'RaggedBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v"
2690,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35973,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35973: Segfault in 'QuantizedMatMul'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v"
2691,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36026,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36026: 'CHECK' fail in 'QuantizeAndDequantizeV3'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq"
2692,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35966,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35966: Segfault in 'QuantizedAvgPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9"
2693,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35993,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35993: 'CHECK' fail in 'SetSize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9"
2694,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35988,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35988: 'CHECK' fail in 'tf.linalg.matrix_rank'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c"
2695,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35965,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35965: Segfault in 'LowerBound' and 'UpperBound'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36"
2696,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35967,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35967: Segfault in 'QuantizedAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x"
2697,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35970,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35970: Segfault in 'QuantizedInstanceNorm'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp"
2698,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35995,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35995: 'CHECK' fail in 'AudioSummaryV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4"
2699,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36004,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36004: 'CHECK' fail in 'tf.random.gamma'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q"
2700,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36018,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36018: 'CHECK' fail in 'RaggedTensorToVariant'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf"
2701,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36003,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36003: 'CHECK' fail in 'RandomPoissonV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq"
2702,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35934,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35934: 'CHECK' failure in tf.reshape via overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45"
2703,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35998,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35998: 'CHECK' fail in 'EmptyTensorList'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5"
2704,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35992,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35992: 'CHECK' fail in 'TensorListFromTensor'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp"
2705,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35982,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35982: Segfault in 'SparseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv"
2706,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36001,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36001: 'CHECK' fail in 'DrawBoundingBoxes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5"
2707,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35999,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35999: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw"
2708,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35989,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35989: 'CHECK' fail in 'MaxPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq"
2709,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-36005,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36005: 'CHECK' fail in 'FakeQuantWithMinMaxVarsGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm"
2710,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41893,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41893: If 'tf.raw_ops.TensorListResize' is given a nonscalar value for input 'size', it results 'CHECK' fail which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-67pf-62xr-q35m"
2711,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41894,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41894: The reference kernel of the 'CONV_3D_TRANSPOSE' TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. Instead of 'data_ptr += num_channels;' it should be 'data_ptr += output_num_channels;' as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels > output_num_channels. An attacker can craft a model with a specific number of input channels. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6q3-vv32-2cq5"
2712,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41880,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41880: When the 'BaseCandidateSamplerOp' function receives a value in 'true_classes' larger than 'range_max', a heap oob read occurs.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j"
2713,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41897,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41897: If 'FractionMaxPoolGrad' is given outsize inputs 'row_pooling_sequence' and 'col_pooling_sequence', TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2w8-jw48-fr7j"
2714,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41898,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41898: If 'SparseFillEmptyRowsGrad' is given empty inputs, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hq7g-wwwp-q46h"
2715,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41884,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41884: If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jq6x-99hj-q636"
2716,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41888,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41888: When running on GPU, 'tf.image.generate_bounding_box_proposals' receives a 'scores' input that must be of rank 4 but is not checked.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6x99-gv2v-q76v"
2717,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41910,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41910: The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-frqp-wp83-qggv"
2718,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41901,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41901: An input 'sparse_matrix' that is not a matrix with a shape with rank 0 will trigger a 'CHECK' fail in 'tf.raw_ops.SparseMatrixNNZ'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9fm-r5mm-rf9f"
2719,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41900,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41900: The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472"
2720,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41911,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41911: When printing a tensor, we get it's data as a 'const char*' array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from 'char' to 'bool' are undefined if the 'char' is not '0' or '1', so sanitizers/fuzzers will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pf36-r9c6-h97j"
2721,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41896,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41896: If 'ThreadUnsafeUnigramCandidateSampler' is given input 'filterbank_channel_count' greater than the allowed max size, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35"
2722,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41902,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."
2723,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41895,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41895: If 'MirrorPadGrad' is given outsize input 'paddings', TensorFlow will give a heap OOB error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gq2j-cr96-gvqx"
2724,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41891,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41891: If 'tf.raw_ops.TensorListConcat' is given 'element_shape=[]', it results segmentation fault which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-66vq-54fq-6jvv"
2725,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41889,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41889: If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a 'nullptr', which is not caught. An example can be seen in 'tf.compat.v1.extract_volume_patches' by passing in quantized tensors as input 'ksizes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xxcj-rhqg-m46g"
2726,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41885,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41885: When 'tf.raw_ops.FusedResizeAndPadConv2D' is given a large tensor shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-762h-vpvw-3rcx"
2727,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41908,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41908: TensorFlow is an open source platform for machine learning. An input 'token' that is not a UTF-8 bytestring will trigger a 'CHECK' fail in 'tf.raw_ops.PyFunc'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv77-9g28-cwg3"
2728,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41890,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41890: If 'BCast::ToShape' is given input larger than an 'int32', it will crash, despite being supposed to handle up to an 'int64'. An example can be seen in 'tf.experimental.numpy.outer' by passing in large input to the input 'b'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h246-cgh4-7475"
2729,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41907,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41907: When 'tf.raw_ops.ResizeNearestNeighborGrad' is given a large 'size' input, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-368v-7v32-52fx"
2730,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41886,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41886: When 'tf.raw_ops.ImageProjectiveTransformV2' is given a large output shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-54pp-c6pp-7fpx"
2731,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41899,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41899: TensorFlow is an open source platform for machine learning. Inputs 'dense_features' or 'example_state_data' not of rank 2 will trigger a 'CHECK' fail in 'SdcaOptimizer'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27rc-728f-x5w2"
2732,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41909,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41909: An input 'encoded' that is not a valid 'CompositeTensorVariant' tensor will trigger a segfault in 'tf.raw_ops.CompositeTensorVariantToComponents'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjx6-v474-2ch9"
2733,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35935,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35935: 'CHECK' failure in 'SobolSample' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqvq-fvhr-v6hc"
2734,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-35991,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35991: 'CHECK' fail in 'TensorListScatter' and 'TensorListScatterV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xf83-q765-xm6m"
2735,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41887,"<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.9.3 and 2.10.1 include a fix for CVE-2022-41887: 'tf.keras.losses.poisson' receives a 'y_pred' and 'y_true' that are passed through 'functor::mul' in 'BinaryOp'. If the resulting dimensions overflow an 'int32', TensorFlow will crash due to a size mismatch during broadcast assignment.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fvv-46hw-vpg3"
2736,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2018-8825,<=1.7,Google TensorFlow 1.7 and below is affected by: Buffer Overflow. The impact is: execute arbitrary code (local). See CVE-2018-8825.
2737,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15358,">=1.15.0rc0,<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 updates its dependency ""SQLite"" to handle CVE-2020-15358."
2738,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-16168,">=2.0.0a0,<2.0.1,<1.15.2",Tensorflow versions 1.15.2 and 2.0.1 updates 'sqlite3' to handle CVE-2019-16168.
2739,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-5482,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5482."
2740,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-19646,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 update its dependency ""SQLite"" to handle CVE-2019-19646."
2741,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-5215,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(""hello"", tf.float16), if eager execution is enabled."
2742,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
2743,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29567,">=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.5.0rc0,<2.5.0","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers."
2744,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-41883,">=2.10.0rc0,<2.10.1","Tensorflow 2.10.1 includes a fix for CVE-2022-41883: When ops that have specified input sizes receive a differing number of inputs, the executor will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w58w-79xv-6vcj"
2745,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15212,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15212: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to ""segment_ids_data"" can alter ""output_index"" and then write to outside of ""output_data"" buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
2746,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15214,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15214: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimension of output tensor. This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array. This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
2747,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15192,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15192: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes a list of strings to 'dlpack.to_dlpack' there is a memory leak following an expected validation failure. The issue occurs because the 'status' argument during validation failures is not properly checked. Since each of the above methods can return an error status, the 'status' value must be checked before continuing.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv"
2748,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15193,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of ""dlpack.to_dlpack"" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a ""reinterpret_cast"". Since the ""PyObject"" is a Python object, not a Tensorflow tensor, the cast to ""EagerTensor"" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v"
2749,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15191,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15191: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to 'dlpack.to_dlpack' the expected validations will cause variables to bind to 'nullptr' while setting a 'status' variable to the error condition. However, this 'status' argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with '-fsanitize=null'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr"
2750,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15213,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15213: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimension of the output tensor, attackers can use a very large value to trigger a large allocation. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps. However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87"
2751,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15197,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15197: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix. However, malicious users can pass in tensors of different rank, resulting in a ""CHECK"" assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02."
2752,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15200,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15200: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A ""BatchedMap"" is equivalent to a vector where each element is a hashmap. However, if the first element of ""splits_values"" is not 0, ""batch_idx"" will never be 1, hence there will be no hashmap at index 0 in ""per_batch_counts"". Trying to access that in the user code results in a segmentation fault. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3"
2753,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15199,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15199: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the ""splits"" tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure. Since ""BatchedMap"" is equivalent to a vector, it needs to have at least one element to not be ""nullptr"". If user passes a ""splits"" tensor that is empty or has exactly one element, we get a ""SIGABRT"" signal raised by the operating system. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h"
2754,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15201,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15201: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Hence, the code is prone to heap buffer overflow. If ""split_values"" does not end with a value at least ""num_values"" then the ""while"" loop condition will trigger a read outside of the bounds of ""split_values"" once ""batch_idx"" grows too large. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4"
2755,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15198,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15198: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has the same shape as the ""values"" one. The values in these tensors are always accessed in parallel. Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3"
2756,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-15196,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15196: In Tensorflow version 2.3.0, the ""SparseCountSparseOutput"" and ""RaggedCountSparseOutput"" implementations don't validate that the ""weights"" tensor has the same shape as the data. The check exists for ""DenseCountSparseOutput"", where both tensors are fully specified. In the sparse and ragged count weights are still accessed in parallel with the data. But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph"
2757,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37635,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37635: In affected versions the implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data. The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor. The Tensorflow team has patched the issue in GitHub commit 87158f43f05f2720a374f3e6d22a7aaa3a33f750."
2758,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37637,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37637: It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. The Tensorflow team has patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5."
2759,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37683,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37683: In affected versions the implementation of division in TFLite is vulnerable to a division by 0 error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. The Tensorflow team has patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28."
2760,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37667,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37667: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.UnicodeEncode'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the 'input_splits' tensor before validating that this tensor is not empty. The Tensorflow team has patched the issue in GitHub commit 2e0ee46f1a47675152d3d865797a18358881d7a6."
2761,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37671,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37671: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.Map*' and 'tf.raw_ops.OrderedMap*' operations. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that 'indices' is in ascending order, but does not check that 'indices' is not empty. The Tensorflow team has patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac."
2762,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37689,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37689: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. This is caused by the MLIR optimization of 'L2NormalizeReduceAxis' operator. The implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements. The Tensorflow team has patched the issue in GitHub commit d6b57f461b39fd1aa8c1b870f1b974aac3554955."
2763,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37648,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37648: In affected versions the code for 'tf.raw_ops.SaveV2' does not properly validate the inputs and an attacker can trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses 'ValidateInputs' to check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer above. However, the validation uses 'OP_REQUIRES' which translates to setting the 'Status' object of the current 'OpKernelContext' to an error status, followed by an empty 'return' statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the nQext line in 'Compute' that follows the call to 'ValidateInputs'. This is equivalent to lacking the validation. The Tensorflow team has patched the issue in GitHub commit 9728c60e136912a12d99ca56e106b7cce7af5986."
2764,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37680,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37680: In affected versions the implementation of fully connected layers in TFLite is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226). The Tensorflow team has patched the issue in GitHub commit 718721986aa137691ee23f03638867151f74935f."
2765,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37636,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37636: In affected versions the implementation of 'tf.raw_ops.SparseDenseCwiseDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit d9204be9f49520cdaaeb2541d1dc5187b23f31d9."
2766,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37642,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37642: In affected versions the implementation of 'tf.raw_ops.ResourceScatterDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76."
2767,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37652,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37652: In affected versions the implementation for 'tf.raw_ops.BoostedTreesCreateEnsemble' can result in a use after free error if an attacker supplies specially crafted arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent 'free'-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed. The Tensorflow team has patched the issue in GitHub commit 5ecec9c6fbdbc6be03295685190a45e7eee726ab."
2768,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37649,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37649: The code for 'tf.raw_ops.UncompressElement' can be made to trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a 'CompressedElement' from a 'Variant' tensor and then proceeds to dereference it for decompressing. There is no check that the 'Variant' tensor contained a 'CompressedElement', so the pointer is actually 'nullptr'. The Tensorflow team has patched the issue in GitHub commit 7bdf50bb4f5c54a4997c379092888546c97c3ebd."
2769,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37659,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37659: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations). The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr. We have patched the issue in GitHub commit 93f428fd1768df147171ed674fee1fc5ab8309ec."
2770,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37647,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37647: When a user does not supply arguments that determine a valid sparse tensor, 'tf.raw_ops.SparseTensorSliceDataset' implementation can be made to dereference a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either 'indices' or 'values' are provided for an empty sparse tensor when the other is not. If 'indices' is empty, then code that performs validation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference. If 'indices' as provided by the user is empty, then 'indices' in the C++ code above is backed by an empty 'std::vector', hence calling 'indices->dim_size(0)' results in null pointer dereferencing (same as calling 'std::vector::at()' on an empty vector). The Tensorflow team has patched the issue in GitHub commit 02cc160e29d20631de3859c6653184e3f876b9d7."
2771,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37658,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37658: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixSetDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit ff8894044dfae5568ecbf2ed514c1a37dc394f1b."
2772,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37656,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37656: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToSparse'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order. The Tensorflow team has patched the issue in GitHub commit 1071f554dbd09f7e101324d366eec5f4fe5a3ece."
2773,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37638,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37638: Sending invalid argument for 'row_partition_types' of 'tf.raw_ops.RaggedTensorToTensor' API results in a null pointer dereference and undefined behavior. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty. The Tensorflow team has patched the issue in GitHub commit 301ae88b331d37a2a16159b65b255f4f9eb39314."
2774,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37654,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37654: In affected versions an attacker can trigger a crash via a 'CHECK'-fail in debug builds of TensorFlow using 'tf.raw_ops.ResourceGather' or a read from outside the bounds of heap allocated data in the same API in a release build. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the 'batch_dims' value that the user supplies is less than the rank of the input tensor. Since the implementation uses several for loops over the dimensions of 'tensor', this results in reading data from outside the bounds of heap allocated buffer backing the tensor. The Tensorflow team has patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d."
2775,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37651,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37651: In affected versions the implementation for 'tf.raw_ops.FractionalAvgPoolGrad' can be tricked into accessing data outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty 'EigenDoubleMatrixMap' and then accesses this buffer with indices that are outside of the empty area. The Tensorflow team has patched the issue in GitHub commit 0f931751fb20f565c4e94aa6df58d54a003cdb30."
2776,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37639,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37639: When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer. Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the 'tensor_name' user controlled input and immediately retrieves the tensor at the restoration index (controlled via 'preferred_shard' argument). This occurs without validating that the provided list has enough values. If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements and if the restoration index is outside the bounds, this results in heap OOB read. The Tensorflow team has patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622."
2777,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37664,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37664: In affected versions an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range. The Tensorflow team has patched the issue in GitHub commit e84c975313e8e8e38bb2ea118196369c45c51378."
2778,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37686,">=2.3.0rc0,<2.3.4rc0,>=2.4.0rc0,<2.4.3rc0,>=2.5.0rc0,<=2.5.0,>=2.6.0rc0,<2.6.0","Several versions of TensorFlow are affected by CVE-2021-37686: In affected versions, the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for ellipsis in axis definition (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that 'ellipsis_end_idx' is smaller than 'i' (e.g., always negative). In this case, the inner loop does not increase 'i' and the 'continue' statement causes execution to skip over the preincrement at the end of the outer loop. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695."
2779,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-26269,">=2.4.0rc0,<2.4.0","TensorFlow 2.4.0 includes a fix for CVE-2020-26269: In TensorFlow release candidate versions 2.4.0rc*, the general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of the array holding the directories. There are multiple invariants and preconditions that are assumed by the parallel implementation of GetMatchingPaths but are not verified by the PRs introducing it (#40861 and #44310). Thus, we are completely rewriting the implementation to fully specify and validate these. This is patched in version 2.4.0. This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched."
2780,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29614,">=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.5.0rc0,<2.5.0","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory."
2781,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29530,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by invalid validation in 'SparseMatrixSparseCholesky'. See CVE-2021-29530."
2782,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29519,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'SparseCross' caused by type confusion. See CVE-2021-29519."
2783,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29522,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv3DBackprop*'. See CVE-2021-29522."
2784,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29529,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap buffer overflow caused by rounding. See CVE-2021-29529."
2785,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29518,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix vulnerabilities where session operations in eager mode lead to null pointer dereferences. See CVE-2021-29518."
2786,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29538,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29538: An attacker can cause a division by zero to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments). If all shapes are empty then 'work_unit_size' is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service."
2787,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29533,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 includes a fix for CVE-2021-29533: An attacker can trigger a denial of service via a 'CHECK' failure by passing an empty image to 'tf.raw_ops.DrawBoundingBoxes'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses 'CHECK_*' assertions instead of 'OP_REQUIRES' to validate user controlled inputs. Whereas 'OP_REQUIRES' allows returning an error condition back to the user, the 'CHECK_*' macros result in a crash if the condition is false, similar to 'assert'. In this case, 'height' is 0 from the 'images' input. This results in 'max_box_row_clamp' being negative and the assertion being falsified, followed by aborting program execution."
2788,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29520,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a heap buffer overflow in 'Conv3DBackprop*'. See CVE-2021-29520."
2789,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29531,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.EncodePng'. See CVE-2021-29531."
2790,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29521,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a segfault in 'SparseCountSparseOutput'. See CVE-2021-29521."
2791,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29549,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29549: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero. Since `vector_num_elements` is determined based on input shapes (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0."
2792,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29537,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29537: An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly."
2793,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29532,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29532: An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads."
2794,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29615,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow in 'ParseAttrValue' with nested tensors. See CVE-2021-29615."
2795,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29548,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization)."
2796,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29534,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29534: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.SparseConcat'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in 'shapes[0]' as dimensions for the output shape. The 'TensorShape' constructor (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a 'CHECK' operation which triggers when 'InitDims' (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use 'BuildTensorShapeBase' or 'AddDimWithStatus' to prevent 'CHECK'-failures in the presence of overflows."
2797,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29513,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion."
2798,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29525,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropInput'. See CVE-2021-29525."
2799,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29524,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropFilter'. See CVE-2021-29524."
2800,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29523,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'AddManySparseToTensorsMap'. See CVE-2021-29523."
2801,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29552,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29552: An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar. Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination."
2802,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29539,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument."
2803,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29541,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'StringNGrams'. See CVE-2021-29541."
2804,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29535,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29535: An attacker can cause a heap buffer overflow in 'QuantizedMul' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
2805,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29542,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'StringNGrams'. See CVE-2021-29542."
2806,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29536,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29536: An attacker can cause a heap buffer overflow in 'QuantizedReshape' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
2807,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29544,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29544: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.QuantizeAndDequantizeV4Grad'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the 'input_*' tensors. In turn, this results in the tensors being passes as they are to 'QuantizeAndDequantizePerChannelGradientImpl' (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306). However, the 'vec<T>' method, requires the rank to 1 and triggers a 'CHECK' failure otherwise."
2808,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29543,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29543: An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks."
2809,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29540,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29540: TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in 'filter_sizes'. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor."
2810,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-8169,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency 'curl' to version 7.76.0 to handle CVE-2020-8169."
2811,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29516,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix fixes a null pointer dereference via invalid Ragged Tensors. See CVE-2021-29516."
2812,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29517,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in 'Conv3D'. See CVE-2021-29517."
2813,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29515,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a reference binding to null pointer in 'MatrixDiag*' ops. See CVE-2021-29515."
2814,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29594,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's convolution code. See CVE-2021-29594."
2815,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29596,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'EmbeddingLookup'. See CVE-2021-29596."
2816,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29558,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29558: An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset."
2817,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29545,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29545: An attacker can trigger a denial of service via a 'CHECK'-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at 'indices(i, 0)' is such that 'indices(i, 0) + 1' is outside the bounds of 'csr_row_ptr', this results in writing outside of bounds of heap allocated data."
2818,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29551,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29551: The implementation of 'MatrixTriangularSolve' (https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails."
2819,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29592,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in TFLite's 'Reshape' operator. See CVE-2021-29592."
2820,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29581,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'CTCBeamSearchDecoder'. See CVE-2021-29581."
2821,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29617,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29617: An attacker can cause a denial of service via `CHECK`-fail in `tf.strings.substr` with invalid arguments."
2822,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29574,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior in 'MaxPool3DGradGrad'. See CVE-2021-29574."
2823,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29512,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds."
2824,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29556,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29556: An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument."
2825,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29613,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'tf.raw_ops.CTCLoss'. See CVE-2021-29613."
2826,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29526,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'Conv2D'. See CVE-2021-29526."
2827,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29527,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedConv2D'. See CVE-2021-29527."
2828,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29595,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29595: The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0."
2829,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29561,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'LoadAndRemapMatrix'. See CVE-2021-29561."
2830,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29585,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29585: The TFLite computation for size of output after padding, `ComputeOutSize`(https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division. Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0."
2831,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29589,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29589: The reference implementation of the `GatherNd` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966). An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension."
2832,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29570,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'MaxPoolGradWithArgmax'. See CVE-2021-29570."
2833,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29559,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB access in unicode ops. See CVE-2021-29559."
2834,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29555,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'FusedBatchNorm'. See CVE-2021-29555."
2835,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29588,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'TransposeConv'. See CVE-2021-29588."
2836,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29557,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'SparseMatMul'. See CVE-2021-29557."
2837,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29612,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'BandedTriangularSolve'. See CVE-2021-29612."
2838,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29514,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor."
2839,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29584,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail due to integer overflow. See CVE-2021-29584."
2840,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29582,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in 'tf.raw_ops.Dequantize'. See CVE-2021-29582."
2841,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29562,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.IRFFT'. See CVE-2021-29562."
2842,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29597,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SpaceToBatchNd'. See CVE-2021-29597."
2843,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29565,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'SparseFillEmptyRows'. See CVE-2021-29565."
2844,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29619,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'tf.raw_ops.SparseCountSparseOutput'. See CVE-2021-29619."
2845,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29602,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'DepthwiseConv'. See CVE-2021-29602."
2846,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29577,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'AvgPool3DGrad'. See CVE-2021-29577."
2847,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29566,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29566: An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to 'tf.raw_ops.Dilation2DBackpropInput'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array. The values for 'h_out' and 'w_out' are guaranteed to be in range for 'out_backprop' (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating 'h_in_max'/'w_in_max' and 'in_backprop'."
2848,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29576,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPool3DGradGrad'. See CVE-2021-29576."
2849,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29600,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'OneHot'. See CVE-2021-29600."
2850,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29599,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'Split'. See CVE-2021-29599."
2851,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29608,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29608: TensorFlow is an end-to-end open source platform for machine learning. Due to lack of validation in 'tf.raw_ops.RaggedTensorToTensor', an attacker can exploit an undefined behavior if input arguments are empty. The implementation (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones. There are multiple 'DCHECK' validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything."
2852,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29554,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'DenseCountSparseOutput'. See CVE-2021-29554."
2853,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29578,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'FractionalAvgPoolGrad'. See CVE-2021-29578."
2854,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29547,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29547: An attacker can cause a segfault and denial of service via accessing data outside of bounds in 'tf.raw_ops.QuantizedBatchNormWithGlobalNormalization'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, '.flat<T>()' is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds."
2855,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29603,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB write in TFLite. See CVE-2021-29603."
2856,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29604,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of hashtable lookup. See CVE-2021-29604."
2857,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29572,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer)."
2858,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29587,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29587: TensorFlow is an end-to-end open source platform for machine learning. The `Prepare` step of the `SpaceToDepth` TFLite operator does not check for 0 before division (https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67). An attacker can craft a model such that `params->block_size` would be zero."
2859,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29569,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'RequantizationRange'. See CVE-2021-29569."
2860,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-8285,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 updates its dependency ""curl"" to a secure version (7.76.0)."
2861,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29601,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite concatentation. See CVE-2021-29601."
2862,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29573,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'MaxPoolGradWithArgmax'. See CVE-2021-29573."
2863,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29586,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in optimized pooling implementations in TFLite. See CVE-2021-29586."
2864,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29590,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in TFLite's implementation of 'Minimum' or 'Maximum'. See CVE-2021-29590."
2865,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29598,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SVDF'. See CVE-2021-29598."
2866,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29528,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedMul'. See CVE-2021-29528."
2867,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29611,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseReshape'. See CVE-2021-29611."
2868,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29580,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior and a 'CHECK'-fail in 'FractionalMaxPoolGrad'. See CVE-2021-29580."
2869,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29618,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29618: Passing a complex argument to `tf.transpose` at the same time as passing 'conjugate=True' argument results in a crash."
2870,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29575,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an overflow and a denial of service in 'tf.raw_ops.ReverseSequence'. See CVE-2021-29575."
2871,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29616,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29616: The implementation of TrySimplify (https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs."
2872,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29591,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow due to looping TFLite subgraph. See CVE-2021-29591."
2873,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29606,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap OOB read in TFLite. See CVE-2021-29606."
2874,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29607,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseSparseMinimum'. See CVE-2021-29607."
2875,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29609,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseAdd'. See CVE-2021-29609."
2876,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29583,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29583: The implementation of 'tf.raw_ops.FusedBatchNorm' is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that 'scale', 'offset', 'mean' and 'variance' (the last two only when required) all have the same number of elements as the number of channels of 'x'. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior."
2877,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-8231,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency ""curl"" to v7.76.0 to include security fixes."
2878,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-8286,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 updates 'curl' to '7.76.0' to handle CVE-2020-8286: curl 7.41.0 through 7.73.0 is vulnerable to an improper check for certificate revocation due to insufficient verification of the OCSP response."
2879,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-8177,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update 'curl' to '7.76.0' to handle CVE-2020-8177."
2880,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29593,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'BatchToSpaceNd'. See CVE-2021-29593."
2881,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2020-8284,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 update its dependency ""curl"" to handle CVE-2020-8284."
2882,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29579,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPoolGrad'. See CVE-2021-29579."
2883,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29605,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite memory allocation. See CVE-2021-29605."
2884,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29564,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'EditDistance'. See CVE-2021-29564."
2885,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29553,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB in 'QuantizeAndDequantizeV3'. See CVE-2021-29553."
2886,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29563,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29563: An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`. Eigen code operating on an empty matrix can trigger on an assertion and will cause program termination."
2887,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29550,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29550: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values. The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger. Later, these computed values are used as arguments (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to `GeneratePoolingSequence`(https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation. Since `output_length` can be 0, this results in runtime crashing."
2888,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29546,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29546: TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero."
2889,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29610,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29610: The validation in 'tf.raw_ops.QuantizeAndDequantizeV2' allows invalid values for 'axis' argument:. The validation (https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses '||' to mix two different conditions. If 'axis_ < -1' the condition in 'OP_REQUIRES' will still be true, but this value of 'axis_' results in heap underflow. This allows attackers to read/write to other data on the heap."
2890,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29571,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices."
2891,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29560,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29560: An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel. Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when 'parent_output_index' is shorter than 'row_split'."
2892,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-29568,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in 'tf.raw_ops.ParameterizedTruncatedNormal'. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of 'shape'. If 'shape' argument is empty, then 'shape_tensor.flat<T>()' is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."
2893,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37645,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37645: In affected versions the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit 96f364a1ca3009f98980021c4b32be5fdcca33a1."
2894,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37691,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37691: In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). The Tensorflow team has patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9."
2895,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37688,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37688: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer. The Tensorflow team has patched the issue in GitHub commit 15691e456c7dc9bd6be203b09765b063bf4a380c."
2896,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37692,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow versions 2.5.1 and 2.6.0 include a fix for CVE-2021-37692:
In affected versions under certain conditions, Go code can trigger a segfault in string deallocation. For string tensors, ""C.TF_TString_Dealloc"" is called during garbage collection within a finalizer function. However, tensor structure isn't checked until encoding to avoid a performance penalty. The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions). To fix this, the call to set the finalizer function is deferred until ""NewTensor"" returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written. The Tensorflow team has patched the issue in GitHub commit:
https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22
https://github.com/tensorflow/tensorflow/pull/50508
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cmgw-8vpc-rc59"
2897,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37640,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.5.1 and 2.6.0 include a fix for CVE-2021-37640: In affected versions the implementation of 'tf.raw_ops.SparseReshape' can be made to trigger an integral division by 0 exception. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements. The reshape functor (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0. The Tensorflow team has patched the issue in GitHub commit 4923de56ec94fff7770df259ab7f2288a74feb41."
2898,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22898,">=2.6.0a1,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow versions 2.3.4, 2.4.3, 2.5.1, and 2.6.0 update its dependency ""curl"" to include a fix for CVE-2021-22898"
2899,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37685,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37685: In affected versions TFLite's 'expand_dims.cc' (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data. If 'axis' is a large negative value (e.g., '-100000'), then after the first 'if' it would still be negative. The check following the 'if' statement will pass and the 'for' loop would read one element before the start of 'input_dims.data' (when 'i = 0'). The Tensorflow team has patched the issue in GitHub commit d94ffe08a65400f898241c0374e9edc6fa8ed257."
2900,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37657,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37657: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. The Tensorflow team has checked that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit f2a673bd34f0d64b8e40a551ac78989d16daad09."
2901,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37663,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37663:
In affected versions, due to incomplete validation in ""tf.raw_ops.QuantizeV2"", an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that ""min_range"" and ""max_range"" both have the same non-zero number of elements. If ""axis"" is provided (i.e., not ""-1""), then validation should check that it is a value in range for the rank of ""input"" tensor and then the lengths of ""min_range"" and ""max_range"" inputs match the ""axis"" dimension of the ""input"" tensor. The Tensorflow team has patched the issue in GitHub commit 6da6620efad397c85493b8f8667b821403516708. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j
https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708"
2902,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37661,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37661: In affected versions an attacker can cause a denial of service in 'boosted_trees_create_quantile_stream_resource' by using negative arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that 'num_streams' only contains non-negative numbers. In turn, this results in using this value to allocate memory (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40). However, 'reserve' receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library. The Tensorflow team has patched the issue in GitHub commit 8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992."
2903,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37665,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37665:
In affected versions, due to incomplete validation in MKL implementation of requantization, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the ""input"" tensor. A similar issue occurs in ""MklRequantizePerChannelOp"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments. The Tensorflow team has patched the issue in GitHub commit 9e62869465573cb2d9b5053f1fa02a81fce21d69 and in the Github commit 203214568f5bc237603dbab6e1fd389f1572f5c9.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp
https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9
https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69"
2904,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37676,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37676: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.SparseFillEmptyRows'. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors. The Tensorflow team has patched the issue in GitHub commit 578e634b4f1c1c684d4b4294f9e5281b2133b3ed."
2905,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37675,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37675: In affected versions most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations. The Tensorflow team has patched the issue in GitHub commit 8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4."
2906,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37687,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37687: In affected versions TFLite's 'GatherNd' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in 'indices'. Similar issue exists in 'Gather' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). The Tensorflow team has patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d."
2907,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37668,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37668:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.UnravelIndex"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by ""dims"" is not empty. Hence, if one element of ""dims"" is 0, the implementation does a division by 0. The Tensorflow team has patched the issue in GitHub commit a776040a5e7ebf76eeb7eb923bf1ae417dd4d233.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5
https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233"
2908,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37653,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37653: In affected versions an attacker can trigger a crash via a floating point exception in 'tf.raw_ops.ResourceGather'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, 'batch_size', and then divides by it without checking that this value is not 0. The Tensorflow team has patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11."
2909,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37660,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37660: In affected versions an attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if 'x' and 'v' are empty but the code uses '||' instead of '&&'. The Tensorflow team has patched the issue in GitHub commit e86605c0a336c088b638da02135ea6f9f6753618."
2910,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37684,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37684: In affected versions the implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 (https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695)."
2911,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37643,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37643: If a user does not provide a valid padding value to 'tf.raw_ops.MatrixDiagPartOp', then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from. The Tensorflow team has patched the issue in GitHub commit 482da92095c4d48f8784b1f00dda4f81c28d2988."
2912,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37644,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37644: In affected versions providing a negative element to 'num_elements' list argument of 'tf.raw_ops.TensorListReserve' causes the runtime to abort the process due to reallocating a 'std::vector' to have a negative number of elements. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls 'std::vector.resize()' with the new size controlled by input given by the user, without checking that this input is valid. The Tensorflow team has patched the issue in GitHub commit 8a6e874437670045e6c7dc6154c7412b4a2135e2."
2913,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37646,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37646: In affected versions the implementation of 'tf.raw_ops.StringNGrams' is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls 'reserve' on a 'tstring' with a value that sometimes can be negative if user supplies negative 'ngram_widths'. The 'reserve' method calls 'TF_TString_Reserve' which has an 'unsigned long' argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit c283e542a3f422420cfdb332414543b62fc4e4a5."
2914,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37681,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37681: In affected versions the implementation of SVDF in TFLite is vulnerable to a null pointer error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313). The 'GetVariableInput' function (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but 'GetTensorData' assumes that the argument is always a valid tensor. Furthermore, because 'GetVariableInput' calls 'GetMutableInput' (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return 'nullptr', the 'tensor->is_variable' expression can also trigger a null pointer exception. The Tensorflow team has patched the issue in GitHub commit 5b048e87e4e55990dae6b547add4dae59f4e1c76."
2915,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37641,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37641: In affected versions if the arguments to 'tf.raw_ops.RaggedGather' don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by 'params_nested_splits' is not an empty list of tensors. The Tensorflow team has patched the issue in GitHub commit a2b743f6017d7b97af1fe49087ae15f0ac634373."
2916,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37666,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37666: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToVariant'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. The Tensorflow team has patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612."
2917,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37662,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37662: In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in 'BoostedTreesCalculateBestGainsPerFeature' and similar attack can occur in 'BoostedTreesCalculateBestFeatureSplitV2'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. The Tensorflow team has patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7."
2918,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37690,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37690:
In affected versions when running shape functions, some functions (such as 'MutableHashTableShape') produce extra output information in the form of a 'ShapeAndType' struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault. 'ShapeRefiner' is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but the Tensorflow team was not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types. The Tensorflow team has patched the issue in GitHub commit ee119d4a498979525046fba1c3dd3f13a039fbb1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3hxh-8cp2-g4hg
https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1"
2919,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37682,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37682:
In affected versions all TFLite operations that use quantization can be made to use unitialized values. (For example, https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200). The issue stems from the fact that ""quantization.params"" is only valid if ""quantization.type"" is different that ""kTfLiteNoQuantization"". However, these checks are missing in large parts of the code. The Tensorflow team has patched the issue in GitHub commits 537bc7c723439b9194a358f64d871dd326c18887, 4a91f2069f7145aab6ba2d8cfe41be8a110c18a5 and 8933b8a21280696ab119b63263babdb54c298538.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4c4g-crqm-xrxw
https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5
https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887
https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538"
2920,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37650,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37650: In affected versions the implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types. The Tensorflow team has patched the issue in GitHub commit e0b6e58c328059829c3eb968136f17aa72b6c876."
2921,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37669,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37669:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.NonMaxSuppressionV5"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a ""std::vector"". However, as ""std::vector::resize"" takes the size argument as a ""size_t"" and ""output_size"" is an ""int"", there is an implicit conversion to unsigned. If the attacker supplies a negative value, this conversion results in a crash. A similar issue occurs in ""CombinedNonMaxSuppression"". The Tensorflow team has patched the issue in GitHub commit 3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d and commit b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c
https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d
https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58"
2922,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37677,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for 'tf.raw_ops.Dequantize' has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses 'axis' to select between two different values for 'minmax_rank' which is then used to retrieve tensor dimensions. However, code assumes that 'axis' can be either '-1' or a value greater than '-1', with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
2923,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22901,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
2924,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37655,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37655: TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to 'tf.raw_ops.ResourceScatterUpdate'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of 'indices' and 'updates': instead of checking that the shape of 'indices' is a prefix of the shape of 'updates' (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship. The Tensorflow team has patched the issue in GitHub commit 01cff3f986259d661103412a20745928c727326f."
2925,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37672,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37672:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.SdcaOptimizerV2"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of ""example_labels"" is the same as the number of examples. The Tensorflow team has patched the issue in GitHub commit a4e138660270e7599793fa438cd7b2fc2ce215a6.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7
https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6"
2926,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37670,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37670:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.UpperBound"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of ""sorted_input"" argument. A similar issue occurs in ""tf.raw_ops.LowerBound"". The Tensorflow team has patched the issue in GitHub commit 42459e4273c2e47a3232cc16c4f4fff3b3a35c38.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7
https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38"
2927,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37679,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37679:
In affected versions it is possible to nest a ""tf.map_fn"" within another ""tf.map_fn"" call. However, if the input tensor is a ""RaggedTensor"" and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The ""t"" and ""z"" outputs should be identical, however this is not the case. The last row of ""t"" contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a ""Variant"" tensor to a ""RaggedTensor"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. The Tensorflow team has patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp
https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
2928,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22897,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
2929,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-22876,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
2930,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37673,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37673:
In affected versions, an attacker can trigger a denial of service via a ""CHECK""-fail in ""tf.raw_ops.MapStage"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the ""key"" input is a valid non-empty tensor. The Tensorflow team has patched the issue in GitHub commit d7de67733925de196ec8863a33445b73f9562d1d.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg
https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d"
2931,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37674,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in 'tf.raw_ops.MaxPoolGrad' caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the 'orig_input' and 'orig_output' tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
2932,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-37678,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.7.0rc0,<2.7.0","Tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:
In affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses ""yaml.unsafe_load"" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r
https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012"
2933,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41211,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41211: In affected versions, the shape inference code for 'QuantizeV2' can trigger a read outside of bounds of heap allocated array. This occurs whenever 'axis' is a negative value less than '-1'. In this case, we are accessing data before the start of a heap buffer. The code allows 'axis' to be an optional argument ('s' would contain an 'error::NOT_FOUND' error code). Otherwise, it assumes that 'axis' is a valid index into the dimensions of the 'input' tensor. If 'axis' is less than '-1' then this results in a heap OOB read. The fix is included in TensorFlow 2.7.0. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c
https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244"
2934,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2021-41220,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41220: In affected versions, the async implementation of 'CollectiveReduceV2' suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been 'std::move()'d are still accessed. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5
https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
2935,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23594,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered."
2936,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23590,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.7.1 and 2.8.0 include a fix for CVE-2022-23590: A 'GraphDef' from a TensorFlow 'SavedModel' can be maliciously altered to cause a TensorFlow process to crash due to encountering a 'StatusOr' value that is an error and forcibly extracting the value from it.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278"
2937,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23592,">=2.8.0a0,<2.8.0","Tensorflow version 2.8.0 includes a fix for CVE-2022-23592: TensorFlow's type inference can cause a heap out of bounds read as the bounds checking is done in a 'DCHECK' (which is a no-op during production). An attacker can control the 'input_idx' variable such that 'ix' would be larger than the number of values in 'node_t.args'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq36-27g6-p492"
2938,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-23593,">=2.8.0a0,<2.8.0","Tensorflow 2.8.0 includes a fix for CVE-2022-23593: The 'simplifyBroadcast' function in the MLIR-TFRT infrastructure in TensorFlow is vulnerable to a segfault (hence, denial of service), if called with scalar shapes. If all shapes are scalar, then 'maxRank' is 0, so we build an empty 'SmallVector'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gwcx-jrx4-92w2"
2939,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/cleverhans_v3.1.0/examples/robust_vision_benchmark/cleverhans_attack_example/requirements.txt,False,CVE-2022-29210,">=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","TensorFlow is an open source platform for machine learning. In version 2.8.0, the 'TensorKey' hash function used total estimated 'AllocatedBytes()', which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. 'int32_t'). It also tried to access individual tensor bytes through 'tensor.data()' of size 'AllocatedBytes()'. This led to ASAN failures because the 'AllocatedBytes()' is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the '.data()' buffer. The discoverers could not use this byte vector anyway because types such as 'tstring' include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."
2940,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,PVE-2021-36375,<1.10.0,tensorflow before 1.10.0 uses an insecure grpc dependency.
2941,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-9635,<1.12.2,NULL pointer dereference in Google TensorFlow before 1.12.2 could cause a denial of service via an invalid GIF file. See CVE-2019-9635.
2942,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-16778,<1.15,"Tensorflow 1.15 includes a fix for CVE-2019-16778: In TensorFlow before 1.15, a heap buffer overflow in UnsortedSegmentSum can be produced when the Index template argument is int32. In this case data_size and num_segments fields are truncated from int64 to int32 and can produce negative numbers, resulting in accessing out of bounds heap memory. This is unlikely to be exploitable and was detected and fixed internally in TensorFlow 1.15 and 2.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-844w-j86r-4x2j
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2019-002.md
https://github.com/tensorflow/tensorflow/commit/db4f9717c41bccc3ce10099ab61996b246099892"
2943,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,PVE-2021-37524,<1.15.0,"The original changelog reads: ""Tensorflow 2.0 fixes a potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access."" However, it was later confirmed that the fix was already included in 1.15 and later. See: <https://github.com/tensorflow/tensorflow/issues/37701>."
2944,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-19244,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite3"" to handle CVE-2019-19244."
2945,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-19880,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""SQLite3"" to handle CVE-2019-19880."
2946,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-10099,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2019-10099."
2947,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-19664,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-19664."
2948,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-13960,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2019-13960."
2949,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-11770,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 update its dependency ""Apache Spark"" to handle CVE-2018-11770."
2950,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-20330,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""libjpeg-turbo"" to handle CVE-2018-20330."
2951,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-19645,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""SQLite"" to handle CVE-2019-19645."
2952,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-17190,"<1.15.3,>=2.0.0a0,<2.0.2,>=2.1.0rc0,<2.1.1","Tensorflow versions 1.15.3, 2.0.2 and 2.1.1 updates its dependency ""Apache Spark"" to handle CVE-2018-17190."
2953,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15208,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15208: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, when determining the common dimension size of two tensors, TFLite uses a ""DCHECK"" which is no-op outside of debug compilation modes. Since the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors. The issue was patched in commit 8ee24e7949a203d234489f9da2c5bf45a7d5157d"
2954,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15202,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15202: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'Shard' API in TensorFlow expects the last argument to be a function taking two 'int64' (i.e., 'long long') arguments. However, there are several places in TensorFlow where a lambda taking 'int' or 'int32' arguments is being used. In these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6fg-mjxg-hqq4"
2955,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15190,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15190: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the ""tf.raw_ops.Switch"" operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor. However, the eager runtime traverses all tensors in the output. Since only one of the tensors is defined, the other one is ""nullptr"", hence we are binding a reference to ""nullptr"". This is undefined behavior and reported as an error if compiling with ""-fsanitize=null"". In this case, this results in a segmentation fault The issue was patched in commit da8558533d925694483d2c136a9220d6d49d843c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4g9f-63rx-5cw4"
2956,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15209,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15209: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a ""nullptr"" buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with ""nullptr"". However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue was patched in commit 0b5662bc."
2957,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15207,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15207: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, to mimic Python's indexing with negative values, TFLite uses 'ResolveAxis' to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds. If the 'DCHECK' does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q4qf-3fc6-8x34"
2958,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15205,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15205: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the 'data_splits' argument of 'tf.raw_ops.StringNGrams' lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory In the linked code snippet, all the binary strings after 'ee ff' are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g7p5-5759-qv46"
2959,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15195,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15195: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of 'SparseFillEmptyRowsGrad' uses a double indexing pattern. It is possible for 'reverse_index_map(i)' to be an index outside of bounds of 'grad_values', thus resulting in a heap buffer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr"
2960,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15204,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15204: In eager mode, TensorFlow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 does not set the session state. Hence, calling ""tf.raw_ops.GetSessionHandle"" or ""tf.raw_ops.GetSessionHandleV2"" results in a null pointer dereference In linked snippet, in eager mode, ""ctx->session_state()"" returns ""nullptr"". Since code immediately dereferences this, we get a segmentation fault. The issue was patched in commit 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1"
2961,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15203,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15203: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, by controlling the 'fill' argument of tf.strings.as_string, a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a 'printf' call is constructed. This may result in segmentation fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xmq7-7fxm-rr79"
2962,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15206,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15206: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, changing the TensorFlow's ""SavedModel"" protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using ""tensorflow-serving"" or other inference-as-a-service installments. Fixed were added in commits f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d. However, this was not enough, as #41097 reported a different failure mode. The issue was finally patched in commit df095206f25471e864a8e63a0f1caef53a0e3a6"
2963,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15211,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0a0,<2.1.2,>=2.2.0a0,<2.2.1,>=2.3.0a0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 include a fix for CVE-2020-15211: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative ""-1"" value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the ""-1"" index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue was patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). A potential workaround would be to add a custom ""Verifier"" to the model loading code to ensure that only operators which accept optional inputs use the ""-1"" special value and only for the tensors that they expect to be optional. Since this allow-list type approach is error-prone, it's advised upgrading to the patched code."
2964,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-13631,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13631."
2965,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-13435,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13435."
2966,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-13630,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13630."
2967,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-13871,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13871."
2968,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-13434,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 updates its dependency ""SQLite"" to handle CVE-2020-13434."
2969,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-9327,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-9327."
2970,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-11655,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11655."
2971,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-11656,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2 and 2.2.1 update its dependency ""SQLite"" to handle CVE-2020-11656."
2972,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15210,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1 include a fix for CVE-2020-15210: In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2"
2973,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15194,"<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow 2.4.0 includes a fix for CVE-2020-15194: In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments. Although `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1."""
2974,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-14155,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2 and 2.3.2 update its dependency ""PCRE"" to handle CVE-2020-14155."
2975,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15250,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency 'Junit4' to v4.13.1 to include a security fix."
2976,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-20838,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 update its dependency ""PCRE"" to fix CVE-2019-20838."
2977,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-13790,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2","Tensorflow versions 2.3.2, 2.2.2, 2.1.3, 2.0.4 and 1.15.5 updates its dependency ""Libjpeg-turbo"" to handle CVE-2020-13790."
2978,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-26270,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26270: In affected versions, running an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a CHECK failure when using the CUDA backend. This can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer."
2979,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-26266,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","TensorFlow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0 includes a fix for CVE-2020-26266: In affected versions and under certain cases a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers filled with the default value of the type but forgetting to default initialize the quantized floating point types in Eigen."
2980,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-26271,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26271: In affected versions, under certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The MakeEdge function creates an edge between one output tensor of the src node (given by output_index) and the input slot of the dst node (given by input_index). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding DataType values and comparing these for equality. However, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays. In most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library."
2981,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-26267,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26267: In affected versions, the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes."
2982,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-26268,"<1.15.5,>=2.0.0a0,<2.0.4,>=2.1.0rc0,<2.1.3,>=2.2.0rc0,<2.2.2,>=2.3.0rc0,<2.3.2,>=2.4.0rc0,<2.4.0","Tensorflow versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2 and 2.4.0 includes a fix for CVE-2020-26268: In affected versions, the tf.raw_ops.ImmutableConst operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area. If the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault. This is because the allocator used to return the buffer data is not marked as returning an opaque handle since the needed virtual method is not overridden."
2983,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-7576,<1.6.0a1,Google TensorFlow 1.6.x and earlier is affected by: Null Pointer Dereference. The type of exploitation is: context-dependent. See CVE-2018-7576.
2984,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-21233,<1.7.0,"TensorFlow before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in core/kernels/decode_bmp_op.cc. See CVE-2018-21233."
2985,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-7575,<1.7.0a1,Google TensorFlow 1.7.x and earlier is affected by a Buffer Overflow vulnerability. The type of exploitation is context-dependent. See CVE-2018-7575.
2986,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-7577,<1.7.1,"Memcpy parameter overlap in Google Snappy library 1.1.4, as used in Google TensorFlow before 1.7.1, could result in a crash or read from other parts of process memory. See CVE-2018-7577."
2987,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-10055,<1.7.1,Invalid memory access and/or a heap buffer overflow in the TensorFlow XLA compiler in Google TensorFlow before 1.7.1 could cause a crash or read from other parts of process memory via a crafted configuration file. See CVE-2018-10055.
2988,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25661,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25661: In versions prior to 2.11.1 a malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack. A proof of concept can be constructed with the 'Convolution3DTranspose' function. This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services. An attacker must have privilege to provide input to a 'Convolution3DTranspose' call.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq"
2989,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25665,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25665: Prior to versions 2.12.0 and 2.11.1, when 'SparseSparseMaximum' is given invalid sparse tensors as inputs, it can give a null pointer error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-558h-mq8x-7q9g"
2990,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25671,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25671: There is out-of-bounds access due to mismatched integer type sizes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j5w9-hmfh-4cr6"
2991,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25658,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25658: Prior to versions 2.12.0 and 2.11.1, an out of bounds read is in GRUBlockCellGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-68v3-g9cm-rmm6"
2992,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25801,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25801: Prior to versions 2.12.0 and 2.11.1, 'nn_ops.fractional_avg_pool_v2' and 'nn_ops.fractional_max_pool_v2' require the first and fourth elements of their parameter 'pooling_ratio' to be equal to 1.0, as pooling on batch and channel dimensions is not supported.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f49c-87jh-g47q"
2993,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-27579,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-27579: Constructing a tflite model with a paramater 'filter_input_channel' of less than 1 gives a FPE.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5w96-866f-6rm8"
2994,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25672,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25672: The function 'tf.raw_ops.LookupTableImportV2' cannot handle scalars in the 'values' parameter and gives an NPE. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
2995,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25676,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25676: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.ParallelConcat' segfaults with a nullptr dereference when given a parameter 'shape' with rank that is not greater than zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6wfh-89q8-44jq"
2996,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25666,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25666: Prior to versions 2.12.0 and 2.11.1, there is a floating point exception in AudioSpectrogram. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f637-vh3r-vfh2"
2997,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25667,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25667: Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when '2^31 <= num_frames * height * width * channels < 2^32', for example Full HD screencast of at least 346 frames.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68"
2998,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25673,"<2.11.1,>=2.12.0rc0,<2.12.0",Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25673: Versions prior to 2.12.0 and 2.11.1 have a Floating Point Exception in TensorListSplit with XLA. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.
2999,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25674,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25674: Versions prior to 2.12.0 and 2.11.1 have a null pointer error in RandomShuffle with XLA enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf97-q72m-7579"
3000,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25670,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25670: Versions prior to 2.12.0 and 2.11.1 have a null point error in QuantizedMatMulWithBiasAndDequantize with MKL enabled.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rq-hwc3-x77w"
3001,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25668,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25668: Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96"
3002,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25664,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25664: Prior to versions 2.12.0 and 2.11.1, there is a heap buffer overflow in TAvgPoolGrad.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hg6-5c2q-7rcr"
3003,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25663,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25663: Prior to versions 2.12.0 and 2.11.1, when 'ctx->step_containter()' is a null ptr, the Lookup function will be executed with a null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-64jg-wjww-7c5w"
3004,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25660,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25660: Prior to versions 2.12.0 and 2.11.1, when the parameter 'summarize' of 'tf.raw_ops.Print' is zero, the new method 'SummarizeArray<bool>' will reference to a nullptr, leading to a seg fault.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj"
3005,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25675,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25675: When running versions prior to 2.12.0 and 2.11.1 with XLA, 'tf.raw_ops.Bincount' segfaults when given a parameter 'weights' that is neither the same shape as parameter 'arr' nor a length-0 tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7x4v-9gxg-9hwj"
3006,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25669,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25669: Prior to versions 2.12.0 and 2.11.1, if the stride and window size are not positive for 'tf.raw_ops.AvgPoolGrad', it can give a floating point exception.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rcf8-g8jv-vg6p"
3007,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25662,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25662: Versions prior to 2.12.0 and 2.11.1 are vulnerable to integer overflow in EditDistance.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7jvm-xxmr-v5cw"
3008,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2023-25659,"<2.11.1,>=2.12.0rc0,<2.12.0","Tensorflow 2.11.1 and 2.12.0 include a fix for CVE-2023-25659: Prior to versions 2.12.0 and 2.11.1, if the parameter 'indices' for 'DynamicStitch' does not match the shape of the parameter 'data', it can trigger an stack OOB read.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p"
3009,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15266,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15266: In Tensorflow before version 2.4.0, when the 'boxes' argument of 'tf.image.crop_and_resize' has a very large value, the CPU kernel implementation receives it as a C++ 'nan' floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.
https://github.com/tensorflow/tensorflow/issues/42129
https://github.com/tensorflow/tensorflow/pull/42143/commits/3ade2efec2e90c6237de32a19680caaa3ebc2845
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xwhf-g6j5-j5gc"
3010,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15265,<2.4.0,"TensorFlow 2.4.0 includes a fix for CVE-2020-15265: In Tensorflow before version 2.4.0, an attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`. This results in accessing a dimension outside the rank of the input tensor in the C++ kernel implementation. However, dim_size only does a DCHECK to validate the argument and then uses it to access the corresponding element of an array. Since in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array. The issue is patched in eccb7ec454e6617738554a255d77f08e60ee0808 and TensorFlow 2.4.0 will be released containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved."
3011,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41210,"<2.4.4,>=2.5.0rc0,<2.5.2, >=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41210: In affected versions, the shape inference functions for 'SparseCountSparseOutput' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m342-ff57-4jcc
https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2"
3012,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41196,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41196: In affected versions, the Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative. This is due to the TensorFlow's implementation of pooling operations where the values in the sliding window are not checked to be strictly positive. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m539-j985-hcr8"
3013,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41195,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41195: In affected versions, the implementation of 'tf.math.segment_*' operations results in a 'CHECK'-fail related abort (and denial of service) if a segment id in 'segment_ids' is large. This is similar to CVE-2021-29584 (and similar to other reported vulnerabilities in TensorFlow localized to specific APIs): the implementation (both on CPU and GPU) computes the output shape using 'AddDim'. However, if the number of elements in the tensor overflows an 'int64_t' value, 'AddDim' results in a 'CHECK' failure which provokes a 'std::abort'. Instead, code should use 'AddDimWithStatus'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cq76-mxrc-vchh"
3014,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22925,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22925."
3015,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41217,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41217: In affected versions, the process of building the control flow graph for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not. This occurs because the code assumes that the first node in the pairing (e.g., an 'Enter' node) always exists when encountering the second node (e.g., an 'Exit' node). When this is not the case, 'parent' is 'nullptr' so dereferencing it causes a crash. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5crj-c72x-m7gq
https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff"
3016,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41228,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41228: In affected versions, TensorFlow's 'saved_model_cli' tool is vulnerable to a code injection as it calls 'eval' on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. The issue has been patched by adding a 'safe' flag which defaults to 'True' and an explicit warning for users.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v
https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7"
3017,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41215,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41215: In affected versions, the shape inference code for 'DeserializeSparse' can trigger a null pointer dereference. This is because the shape inference function assumes that the 'serialize_sparse' tensor is a tensor with positive rank (and having '3' as the last dimension). The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x3v8-c8qx-3j3r
https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850"
3018,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41216,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41216: In affected versions, the shape inference function for 'Transpose' is vulnerable to a heap buffer overflow. This occurs whenever 'perm' contains negative elements. The shape inference function does not validate that the indices in 'perm' are all valid. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3ff2-r28g-w7h9
https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14"
3019,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22924,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22924."
3020,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22923,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22923."
3021,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41226,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41226: In affected versions, the implementation of 'SparseBinCount' is vulnerable to a heap OOB access. This is because of missing validation between the elements of the 'values' argument and the shape of the sparse output. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-374m-jm66-3vj8
https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba"
3022,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41200,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41200: In affected versions, if 'tf.summary.create_file_writer' is called with non-scalar arguments, code crashes due to a 'CHECK'-fail. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gh8h-7j2j-qv4f"
3023,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41218,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41218: In affected versions, the shape inference code for 'AllToAll' can be made to execute a division by 0. This occurs whenever the 'split_count' argument is 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9crf-c6qr-r273
https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc"
3024,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41223,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41223: In affected versions, the implementation of 'FusedBatchNorm' kernels is vulnerable to a heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr
https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda"
3025,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41224,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41224: In affected versions, the implementation of 'SparseFillEmptyRows' can be made to trigger a heap OOB access. This occurs whenever the size of 'indices' does not match the size of 'values'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rg3m-hqc5-344v
https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b"
3026,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41219,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41219: In affected versions, the code for sparse matrix multiplication is vulnerable to undefined behavior via binding a reference to 'nullptr'. This occurs whenever the dimensions of 'a' or 'b' are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, it should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4f99-p9c2-3j8x
https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae"
3027,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41202,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41202: In affected versions, while calculating the size of the output within the 'tf.range' kernel, there is a conditional statement of type 'int64 = condition ? int64 : double'. Due to C++ implicit conversion rules, both branches of the condition will be cast to 'double' and the result would be truncated before the assignment. This result in overflows. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xrqm-fpgr-6hhx"
3028,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41221,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41221: In affected versions, the shape inference code for the 'Cudnn*' operations can be tricked into accessing invalid memory via a heap buffer overflow. This occurs because the ranks of the 'input', 'input_h' and 'input_c' parameters are not validated, but code assumes they have certain values. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqv6-3phm-hcwx
https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6"
3029,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41203,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41203: In affected versions, an attacker can trigger undefined behavior, integer overflows, segfaults and 'CHECK'-fail crashes if they can change saved checkpoints from outside of TensorFlow. This is because the checkpoints loading infrastructure is missing validation for invalid file formats.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7pxj-m4jf-r6h2"
3030,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41222,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41222: In affected versions, the implementation of 'SplitV' can trigger a segfault if an attacker supplies negative arguments. This occurs whenever 'size_splits' contains more than one value and at least one value is negative. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cpf4-wx82-gxp6
https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6"
3031,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22922,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22922."
3032,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41227,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41227: In affected versions, the 'ImmutableConst' operation in TensorFlow can be tricked into reading arbitrary memory contents. This is because the 'tstring' TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j8c8-67vp-6mx7
https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b
https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585"
3033,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41201,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41201: In affected versions, during execution, 'EinsumHelper::ParseEquation()' is supposed to set the flags in 'input_has_ellipsis' vector and '*output_has_ellipsis' boolean to indicate whether there is ellipsis in the corresponding inputs and output. However, the code only changes these flags to 'true' and never assigns 'false'. This results in unitialized variable access if callers assume that 'EinsumHelper::ParseEquation()' always sets these flags. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j86v-p27c-73fm
https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6"
3034,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22926,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 update its dependency 'curl' to v7.78.0 to handle CVE-2021-22926."
3035,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41205,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41205: In affected versions, the shape inference functions for the 'QuantizeAndDequantizeV*' operations can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-49rx-x2rw-pc6f
https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d"
3036,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41214,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41214: In affected versions, the shape inference code for 'tf.ragged.cross' has an undefined behavior due to binding a reference to 'nullptr'. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
3037,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41207,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41207: In affected versions, the implementation of 'ParallelConcat' misses some input validation and can produce a division by 0. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
3038,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41204,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41204: In affected versions, during TensorFlow's Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-786j-5qwq-r36x
https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659"
3039,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41213,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41213: In affected versions, the code behind 'tf.function' API can be made to deadlock when two 'tf.function' decorated Python functions are mutually recursive. This occurs due to using a non-reentrant 'Lock' Python object. Loading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive 'tf.function', although this is not a frequent scenario.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h67m-xg8f-fxcf
https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7"
3040,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41212,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41212: In affected versions, the shape inference code for 'tf.ragged.cross' can trigger a read outside of bounds of heap allocated array. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g
https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
3041,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41225,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","TensorFlow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41225: In affected versions, TensorFlow's Grappler optimizer has a use of unitialized variable. If the 'train_nodes' vector (obtained from the saved model that gets optimized) does not contain a 'Dequeue' node, then 'dequeue_node' is left unitialized. The fix is also included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw
https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"
3042,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41198,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41198: In affected versions, if 'tf.tile' is called with a large input argument, then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2p25-55c9-h58q"
3043,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41209,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41209: In affected versions, the implementations for convolution operators trigger a division by 0 if passed empty filter tensor arguments. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6hpv-v2rx-c5g6
https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235"
3044,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41199,"<2.4.4,>=2.5.0rc0,<2.5.2,>=2.6.0rc0,<2.6.1","Tensorflow versions 2.4.4, 2.5.2 and 2.6.1 include a fix for CVE-2021-41199: In affected versions, if 'tf.image.resize' is called with a large input argument then the TensorFlow process will crash due to a 'CHECK'-failure caused by an overflow. The number of elements in the output tensor is too much for the 'int64_t' type and the overflow is detected via a 'CHECK' statement. This aborts the process. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hx2-qx8j-qjqm"
3045,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-10531,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 update its dependency 'icu' to v69.1 to include a security fix."
3046,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23591,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The 'GraphDef' format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a 'GraphDef' containing a fragment such as the following can be consumed when loading a 'SavedModel'. This would result in a stack overflow during execution as resolving each 'NodeDef' means resolving the function itself and its nodes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3047,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23576,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateOutputSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements. We can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3048,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23585,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding PNG images TensorFlow can produce a memory leak if the image is invalid. After calling `png::CommonInitDecode(..., &decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(&decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3049,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23578,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. If a graph node is invalid, TensorFlow can leak memory in the implementation of `ImmutableExecutorState::Initialize`. Here, we set `item->kernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3050,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23583,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3051,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23567,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23567: The implementations of 'Sparse*Cwise*' ops are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or 'CHECK'-fails when building new 'TensorShape' objects (so, assert failures based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rrx2-r989-2c43"
3052,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23574,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. There is a typo in TensorFlow's `SpecializeType` which results in heap OOB read/write. Due to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
3053,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23571,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3054,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23589,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place). First, during constant folding, the `GraphDef` might not have the required nodes for the binary operation. If a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect. We have a similar issue during `IsIdentityConsumingSwitch`. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3055,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23586,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that assertions in `function.cc` would be falsified and crash the Python interpreter. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3056,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21733,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21733: The implementation of 'StringNGrams' can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. There is missing a validation on 'pad_witdh' and that result in computing a negative value for 'ngram_width' which is later used to allocate parts of the output.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g"
3057,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23587,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during cost estimation for crop and resize. Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3058,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21735,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21735: The implementation of 'FractionalMaxPool' can be made to crash a TensorFlow process via a division by 0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-87v6-crgm-2gfj"
3059,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23577,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `GetInitOp` is vulnerable to a crash caused by dereferencing a null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3060,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23566,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. TensorFlow is vulnerable to a heap OOB write in `Grappler`. The `set_output` function writes to an array at the specified index. Hence, this gives a malicious user a write primitive. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3061,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23562,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23562: The implementation of 'Range' suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr"
3062,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23572,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
3063,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23588,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that Grappler optimizer would attempt to build a tensor using a reference `dtype`. This would result in a crash due to a `CHECK`-fail in the `Tensor` constructor as reference types are not allowed. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3064,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23579,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23579: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'SafeToRemoveIdentity' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5f2r-qp73-37mr"
3065,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23569,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23569: Multiple operations in TensorFlow can be used to trigger a denial of service via 'CHECK'-fails (i.e., assertion failures). This is similar to CVE-2021-41197 and has a similar fix. It is possible that other similar instances exist.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qj5r-f9mv-rffh"
3066,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23575,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `OpLevelCostEstimator::CalculateTensorSize` is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3067,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23580,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23580: During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-627q-g293-49q7"
3068,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21732,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21732: The implementation of 'ThreadPoolHandle' can be used to trigger a denial of service attack by allocating too much memory. This is because the 'num_threads' argument is only checked to not be negative, but there is no upper bound on its value.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c582-c96p-r5cq"
3069,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21740,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21740: The implementation of 'SparseCountSparseOutput' is vulnerable to a heap overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-44qp-9wwf-734r"
3070,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23595,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23595: When building an XLA compilation cache, if default settings are used, TensorFlow triggers a null pointer dereference. In the default scenario, all devices are allowed, so 'flr->config_proto' is 'nullptr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fpcp-9h7m-ffpx"
3071,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23581,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23581: The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a 'SavedModel' such that 'IsSimplifiableReshape' would trigger 'CHECK' failures.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fq86-3f29-px2c"
3072,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21739,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21739: The implementation of 'QuantizedMaxPool' has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3mw4-6rj6-74g5"
3073,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23564,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23564: When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a 'CHECK' assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3"
3074,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23565,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23565: An attacker can trigger denial of service via assertion failure by altering a 'SavedModel' on disk such that 'AttrDef's of some operation are duplicated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4v5p-v5h9-6xjx"
3075,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21741,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21741: An attacker can craft a TFLite model that would trigger a division by zero in the implementation of depthwise convolutions. The parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is strictly positive.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-428x-9xc2-m8mj"
3076,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21726,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21726: The implementation of 'Dequantize' does not fully validate the value of 'axis' and can result in heap OOB accesses. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-23hm-7w47-xw72"
3077,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23557,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23557: An attacker can craft a TFLite model that would trigger a division by zero in 'BiasAndClamp' implementation. There is no check that the 'bias_size' is non zero.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gf2j-f278-xh4v"
3078,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21728,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21728: The implementation of shape inference for 'ReverseSequence' does not fully validate the value of 'batch_dim' and can result in a heap OOB read. There is a check to make sure the value of 'batch_dim' does not go over the rank of the input, but there is no check for negative values. Negative dimensions are allowed in some cases to mimic Python's negative indexing (i.e., indexing from the end of the array), however if the value is too negative then the implementation of 'Dim' would access elements before the start of an array.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
3079,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23568,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23568: The implementation of 'AddManySparseToTensorsMap' is vulnerable to an integer overflow which results in a 'CHECK'-fail when building new 'TensorShape' objects (so, an assert failure based denial of service). There are missing some validation on the shapes of the input tensors as well as directly constructing a large 'TensorShape' with user-provided dimensions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6445-fm66-fvq2"
3080,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23563,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23563: In multiple places, TensorFlow uses 'tempfile.mktemp' to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in 'mktemp' and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the 'mktemp' function usage. It was replaced 'mktemp' with the safer 'mkstemp'/'mkdtemp' functions, according to the usage pattern.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wc4g-r73w-x8mm"
3081,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21730,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21730: The implementation of 'FractionalAvgPoolGrad' does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vjg4-v33c-ggc4"
3082,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21736,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21736: The implementation of 'SparseTensorSliceDataset' has an undefined behavior: under certain conditions, it can be made to dereference a 'nullptr' value. The 3 input arguments to 'SparseTensorSliceDataset' represent a sparse tensor. However, there are some preconditions that these arguments must satisfy, but these are not validated in the implementation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9"
3083,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23570,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. When decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is guarded by a `DCHECK`. However, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."
3084,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23558,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23558: An attacker can craft a TFLite model that would cause an integer overflow in 'TfLiteIntArrayCreate'. The 'TfLiteIntArrayGetSizeInBytes' returns an 'int' instead of a 'size_t'. An attacker can control model inputs such that 'computed_size' overflows the size of 'int' datatype.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9gwq-6cwj-47h3"
3085,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23559,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23559: An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both 'embedding_size' and 'lookup_size' are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98p5-x8x4-c9m5"
3086,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21727,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21727: The implementation of shape inference for 'Dequantize' is vulnerable to an integer overflow weakness. The 'axis' argument can be '-1' (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes 'axis + 1', an attacker can trigger an integer overflow.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-c6fh-56w7-fvjw"
3087,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21725,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21725: The estimator for the cost of some convolution operations can be made to execute a division by 0. The function fails to check that the stride argument is strictly positive. Hence, the fix is to add a check for the stride argument to ensure it is valid.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v3f7-j968-4h5f"
3088,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21738,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21738: The implementation of 'SparseCountSparseOutput' can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6"
3089,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23584,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a use after free behavior when decoding PNG images. After `png::CommonFreeDecode(&decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3090,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23582,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23582: A malicious user can cause a denial of service by altering a 'SavedModel' such that 'TensorByteSize' would trigger 'CHECK' failures. 'TensorShape' constructor throws a 'CHECK'-fail if shape is partial or has a number of elements that would overflow the size of an 'int'. The 'PartialTensorShape' constructor instead does not cause a 'CHECK'-abort if the shape is partial, which is exactly what this function needs to be able to return '-1'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4j82-5ccr-4r8v"
3091,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23561,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23561: An attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9c78-vcq7-7vxq"
3092,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21731,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21731: The implementation of shape inference for 'ConcatV2' can be used to trigger a denial of service attack via a segfault caused by a type confusion. The 'axis' argument is translated into 'concat_dim' in the 'ConcatShapeHelper' helper function. Then, a value for 'min_rank' is computed based on 'concat_dim'. This is then used to validate that the 'values' tensor has at least the required rank. However, 'WithRankAtLeast' receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented. Due to the fact that 'min_rank' is a 32-bits value and the value of 'axis', the 'rank' argument is a negative value, so the error check is bypassed.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
3093,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21734,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21734: The implementation of 'MapStage' is vulnerable to a 'CHECK'-fail if the key tensor is not a scalar.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm"
3094,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23573,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The implementation of `AssignOp` can result in copying uninitialized data to a new tensor. This later results in undefined behavior. The implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."
3095,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21737,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21737: The implementation of '*Bincount' operations allows malicious users to cause denial of service by passing in arguments which would trigger a 'CHECK'-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in 'CHECK' failures later when the output tensors get allocated.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2vv-v9cg-qhh7"
3096,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-21729,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-21729: The implementation of 'UnravelIndex' is vulnerable to a division by zero caused by an integer overflow bug.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-34f9-hjfq-rr8j"
3097,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23560,"<2.5.3,>=2.6.0a0,<2.6.3,>=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.5.3, 2.6.3, 2.7.1 and 2.8.0 include a fix for CVE-2022-23560: An attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in the conversion from sparse tensors to dense tensors.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4hvf-hxvg-f67v"
3098,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41208,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41208: In affected versions, the code for boosted trees in TensorFlow is still missing validation. As a result, attackers can trigger denial of service (via dereferencing 'nullptr's or via 'CHECK'-failures) as well as abuse undefined behavior (binding references to 'nullptr's). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call. Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs. TensorFlow's boosted trees APIs will be deprecated in subsequent releases.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-57wx-m983-2f88
https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6gw-r52c-724r"
3099,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41206,"<2.5.3,>=2.6.0rc0,<2.6.3,>=2.7.0rc0,<2.7.1","Tensorflow versions 2.5.3, 2.6.3 and 2.7.1 include a fix for CVE-2021-41206: In affected versions, several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or 'CHECK'-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. These issues were discovered internally via tooling while working on improving/testing GPU op determinism. As such, there aren't reproducers and there will be multiple fixes for these issues.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pgcq-h79j-2f69
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-43q8-3fv7-pr5x"
3100,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27775,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27775."
3101,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29193,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29193: missing validation which causes 'TensorSummaryV2' to crash."
3102,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27776,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27776."
3103,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29196,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29196: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
3104,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29197: Missing validation which causes denial of service via 'UnsortedSegmentJoin'."
3105,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27779,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27779."
3106,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29202,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29202: Denial of service in 'tf.ragged.constant' due to lack of validation."
3107,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29201,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29201: Missing validation which results in undefined behavior in 'QuantizedConv2D'."
3108,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29206,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29206: Missing validation which results in undefined behavior in 'SparseTensorDenseAdd'."
3109,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27778,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27778."
3110,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29204,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29204: Missing validation which causes denial of service via 'Conv3DBackpropFilterV2'."
3111,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29199,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29199: Missing validation which causes denial of service via 'LoadAndRemapMatrix'."
3112,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29213,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29213: Crashes stemming from incomplete validation in signal ops."
3113,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29211,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29211: Segfault when 'tf.histogram_fixed_width' is called with NaN values."
3114,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27780,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27780."
3115,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29205,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29205: Segfault due to missing support for quantized types."
3116,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-22576,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-22576."
3117,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29209,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29209: Type confusion leading to 'CHECK'-failure based denial of service."
3118,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27782,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27782."
3119,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29195,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29195: Missing validation which causes denial of service via 'StagePeek'."
3120,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29216,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29216: Code injection in 'saved_model_cli'."
3121,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29200,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29200: Missing validation which causes denial of service via 'LSTMBlockCell'."
3122,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29198,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29198:  Missing validation which causes denial of service via 'SparseTensorToCSRSparseMatrix'."
3123,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29207,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29207: Issues arising from undefined behavior stemming from users supplying invalid resource handles."
3124,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29208,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29208: Segfault and OOB write due to incomplete validation in 'EditDistance'."
3125,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29194,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29194: Missing validation which causes denial of service via 'DeleteSessionTensor'."
3126,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27781,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27781."
3127,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-30115,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-30115."
3128,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41197,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2021-41197: Affected versions allow tensors to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an 'int64_t'. If an overflow occurs, 'MultiplyWithoutOverflow' would return a negative result. In the majority of TensorFlow codebase this then results in a 'CHECK'-failure. Newer constructs exist which return a 'Status' instead of crashing the binary. This is similar to CVE-2021-29584.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-prcg-wp5q-rv7p
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wcv5-vrvr-3rx2
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mw6j-hh29-h379"
3129,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-25032,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'zlib' to v1.2.12 to handle CVE-2018-25032."
3130,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-27774,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 update 'curl' to v7.83.1 to handle CVE-2022-27774."
3131,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29192,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29192: missing validation which crashes 'QuantizeAndDequantizeV4Grad'."
3132,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29191,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29191: Missing validation which causes denial of service via 'GetSessionTensor'."
3133,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29212,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29212: Core dump when loading TFLite models with quantization."
3134,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29203,"<2.6.4,>=2.7.0rc0,<2.7.2,>=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","Tensorflow versions 2.6.4, 2.7.2, 2.8.1 and 2.9.0 include a fix for CVE-2022-29203: Integer overflow in 'SpaceToBatchND'."
3135,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35985,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35985: 'CHECK' fail in 'LRNGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9942-r22v-78cp"
3136,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35971,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35971: 'CHECK' fail in 'FakeQuantWithMinMaxVars'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9fpg-838v-wpv7"
3137,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35952,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35952: 'CHECK' failures in 'UnbatchGradOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h5vq-gw2c-pq47"
3138,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35979,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35979: Segfault in 'QuantizedRelu' and 'QuantizedRelu6'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v7vw-577f-vp8x"
3139,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36002,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36002: 'CHECK' fail in 'Unbatch'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg"
3140,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35996,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35996: Floating point exception in 'Conv2D'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q5jv-m6qw-5g37"
3141,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35959,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35959: 'CHECK' failures in 'AvgPool3DGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wxjj-cgcx-r3vq"
3142,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35990,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35990: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannelGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h7ff-cfc9-wmmh"
3143,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35983,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35983: 'CHECK' fail in 'Save' and 'SaveSlices'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6vp-8q9j-whx4"
3144,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35974,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35974: Segfault in 'QuantizeDownAndShrinkRange'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vgvh-2pf4-jr2x"
3145,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36019,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36019: 'CHECK' fail in 'FakeQuantWithMinMaxVarsPerChannel'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9j4v-pp28-mxv7"
3146,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35994,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35994: 'CHECK' fail in 'CollectiveGather'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fhfc-2q7x-929f"
3147,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36014,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36014: Null-dereference in 'mlir::tfg::TFOp::nameAttr'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7j3m-8g3c-9qqq"
3148,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35964,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35964: Segfault in 'BlockLSTMGradV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f7r5-q7cx-h668"
3149,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35987,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35987: 'CHECK' fail in 'DenseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w62h-8xjm-fv49"
3150,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36011,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36011: Null dereference on MLIR on empty function attributes.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fv43-93gv-vm8f"
3151,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36027,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36027: Segfault TFLite converter on per-channel quantized transposed convolutions.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr"
3152,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35972,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35972: Segfault in 'QuantizedBiasAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4pc4-m9mj-v2r9"
3153,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35968,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35968: 'CHECK' fail in 'AvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2475-53vw-vp25"
3154,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35941,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35941: 'CHECK' failure in 'AvgPoolOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mgmh-g2v6-mqw5"
3155,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35940,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35940: Int overflow in 'RaggedRangeOp'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x989-q2pq-4q5x"
3156,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35939,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35939: OOB write in 'scatter_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf"
3157,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35997,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35997: 'CHECK' fail in 'tf.sparse.cross'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p7hr-f446-x6qf"
3158,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36016,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36016: 'CHECK'-fail in 'tensorflow::full_type::SubstituteFromAttrs'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g468-qj8g-vcjc"
3159,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35937,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35937: OOB read in 'Gather_nd' op in TF Lite.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h"
3160,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35963,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35963: 'CHECK' failures in 'FractionalAvgPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-84jm-4cf3-9jfm"
3161,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36015,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36015: Integer overflow in math ops. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rh87-q4vg-m45j"
3162,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35984,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35984: 'CHECK' fail in 'ParameterizedTruncatedNormal'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2xf-8hgm-hpw5"
3163,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36013,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36013: Null-dereference in 'mlir::tfg::GraphDefImporter::ConvertNodeDef'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-828c-5j5q-vrjq"
3164,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35981,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35981: 'CHECK' fail in 'FractionalMaxPoolGrad'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vxv8-r8q2-63xw"
3165,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35960,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35960: 'CHECK' failure in 'TensorListReserve' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v5xg-3q2c-c2r4"
3166,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36017,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36017: Segfault in 'Requantize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wqmc-pm8c-2jhc"
3167,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35969,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35969: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx"
3168,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36012,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36012: Assertion fail on MLIR empty edge names.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jvhc-5hhr-w3v5"
3169,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36000,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36000: 'CHECK' fail in 'Eig'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqxc-pvf8-2w9v"
3170,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35986,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35986: Segfault in 'RaggedBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wr9v-g9vf-c74v"
3171,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35973,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35973: Segfault in 'QuantizedMatMul'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-689c-r7h2-fv9v"
3172,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36026,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36026: 'CHECK' fail in 'QuantizeAndDequantizeV3'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9cr2-8pwr-fhfq"
3173,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35966,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35966: Segfault in 'QuantizedAvgPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4w68-4x85-mjj9"
3174,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35993,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35993: 'CHECK' fail in 'SetSize'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wq6q-6m32-9rv9"
3175,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35988,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35988: 'CHECK' fail in 'tf.linalg.matrix_rank'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9vqj-64pv-w55c"
3176,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35965,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35965: Segfault in 'LowerBound' and 'UpperBound'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qxpx-j395-pw36"
3177,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35967,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35967: Segfault in 'QuantizedAdd'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v6h3-348g-6h5x"
3178,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35970,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35970: Segfault in 'QuantizedInstanceNorm'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g35r-369w-3fqp"
3179,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35995,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35995: 'CHECK' fail in 'AudioSummaryV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9h5-vr8m-x2h4"
3180,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36004,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36004: 'CHECK' fail in 'tf.random.gamma'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv8m-8x97-937q"
3181,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36018,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36018: 'CHECK' fail in 'RaggedTensorToVariant'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m6cv-4fmf-66xf"
3182,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36003,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36003: 'CHECK' fail in 'RandomPoissonV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cv2p-32v3-vhwq"
3183,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35934,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35934: 'CHECK' failure in tf.reshape via overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4w6-h4f5-wx45"
3184,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35998,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35998: 'CHECK' fail in 'EmptyTensorList'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qhw4-wwr7-gjc5"
3185,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35992,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35992: 'CHECK' fail in 'TensorListFromTensor'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9v8w-xmr4-wgxp"
3186,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35982,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35982: Segfault in 'SparseBincount'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv"
3187,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36001,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36001: 'CHECK' fail in 'DrawBoundingBoxes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jqm7-m5q7-3hm5"
3188,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35999,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35999: 'CHECK' fail in 'Conv2DBackpropInput'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-37jf-mjv6-xfqw"
3189,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35989,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-35989: 'CHECK' fail in 'MaxPool'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq"
3190,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-36005,"<2.7.4,>=2.8.0rc0,<2.8.3,>=2.9.0rc0,<2.9.2","TensorFlow 2.7.4, 2.8.3 and 2.9.2 include a fix for CVE-2022-36005: 'CHECK' fail in 'FakeQuantWithMinMaxVarsGradient'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r26c-679w-mrjm"
3191,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41893,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41893: If 'tf.raw_ops.TensorListResize' is given a nonscalar value for input 'size', it results 'CHECK' fail which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-67pf-62xr-q35m"
3192,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41894,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41894: The reference kernel of the 'CONV_3D_TRANSPOSE' TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result. Instead of 'data_ptr += num_channels;' it should be 'data_ptr += output_num_channels;' as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels > output_num_channels. An attacker can craft a model with a specific number of input channels. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h6q3-vv32-2cq5"
3193,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41880,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41880: When the 'BaseCandidateSamplerOp' function receives a value in 'true_classes' larger than 'range_max', a heap oob read occurs.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j"
3194,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41897,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41897: If 'FractionMaxPoolGrad' is given outsize inputs 'row_pooling_sequence' and 'col_pooling_sequence', TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f2w8-jw48-fr7j"
3195,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41898,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41898: If 'SparseFillEmptyRowsGrad' is given empty inputs, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hq7g-wwwp-q46h"
3196,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41884,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41884: If a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jq6x-99hj-q636"
3197,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41888,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41888: When running on GPU, 'tf.image.generate_bounding_box_proposals' receives a 'scores' input that must be of rank 4 but is not checked.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6x99-gv2v-q76v"
3198,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41910,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41910: The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-frqp-wp83-qggv"
3199,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41901,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41901: An input 'sparse_matrix' that is not a matrix with a shape with rank 0 will trigger a 'CHECK' fail in 'tf.raw_ops.SparseMatrixNNZ'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g9fm-r5mm-rf9f"
3200,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41900,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41900: The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472"
3201,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41911,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41911: When printing a tensor, we get it's data as a 'const char*' array (since that's the underlying storage) and then we typecast it to the element type. However, conversions from 'char' to 'bool' are undefined if the 'char' is not '0' or '1', so sanitizers/fuzzers will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pf36-r9c6-h97j"
3202,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41896,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41896: If 'ThreadUnsafeUnigramCandidateSampler' is given input 'filterbank_channel_count' greater than the allowed max size, TensorFlow will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35"
3203,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41902,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."
3204,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41895,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41895: If 'MirrorPadGrad' is given outsize input 'paddings', TensorFlow will give a heap OOB error.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gq2j-cr96-gvqx"
3205,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41891,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41891: If 'tf.raw_ops.TensorListConcat' is given 'element_shape=[]', it results segmentation fault which can be used to trigger a denial of service attack.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-66vq-54fq-6jvv"
3206,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41889,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41889: If a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a 'nullptr', which is not caught. An example can be seen in 'tf.compat.v1.extract_volume_patches' by passing in quantized tensors as input 'ksizes'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xxcj-rhqg-m46g"
3207,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41885,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41885: When 'tf.raw_ops.FusedResizeAndPadConv2D' is given a large tensor shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-762h-vpvw-3rcx"
3208,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41908,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41908: TensorFlow is an open source platform for machine learning. An input 'token' that is not a UTF-8 bytestring will trigger a 'CHECK' fail in 'tf.raw_ops.PyFunc'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv77-9g28-cwg3"
3209,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41890,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41890: If 'BCast::ToShape' is given input larger than an 'int32', it will crash, despite being supposed to handle up to an 'int64'. An example can be seen in 'tf.experimental.numpy.outer' by passing in large input to the input 'b'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-h246-cgh4-7475"
3210,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41907,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41907: When 'tf.raw_ops.ResizeNearestNeighborGrad' is given a large 'size' input, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-368v-7v32-52fx"
3211,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41886,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41886: When 'tf.raw_ops.ImageProjectiveTransformV2' is given a large output shape, it overflows.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-54pp-c6pp-7fpx"
3212,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41899,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41899: TensorFlow is an open source platform for machine learning. Inputs 'dense_features' or 'example_state_data' not of rank 2 will trigger a 'CHECK' fail in 'SdcaOptimizer'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27rc-728f-x5w2"
3213,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41909,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.8.4, 2.9.3 and 2.10.1 include a fix for CVE-2022-41909: An input 'encoded' that is not a valid 'CompositeTensorVariant' tensor will trigger a segfault in 'tf.raw_ops.CompositeTensorVariantToComponents'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjx6-v474-2ch9"
3214,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35935,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35935: 'CHECK' failure in 'SobolSample' via missing validation.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-97p7-w86h-vcf9
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cqvq-fvhr-v6hc"
3215,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-35991,"<2.8.4,>=2.9.0rc0,<2.9.3,>=2.10.0rc0,<2.10.1,>=2.11.0rc0,<2.11.0","TensorFlow 2.8.4, 2.9.3, 2.10.1 and 2.11.0 include a fix for CVE-2022-35991: 'CHECK' fail in 'TensorListScatter' and 'TensorListScatterV2'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vm7x-4qhj-rrcq
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xf83-q765-xm6m"
3216,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41887,"<2.9.3,>=2.10.0rc0,<2.10.1","Tensorflow 2.9.3 and 2.10.1 include a fix for CVE-2022-41887: 'tf.keras.losses.poisson' receives a 'y_pred' and 'y_true' that are passed through 'functor::mul' in 'BinaryOp'. If the resulting dimensions overflow an 'int32', TensorFlow will crash due to a size mismatch during broadcast assignment.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fvv-46hw-vpg3"
3217,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2018-8825,<=1.7,Google TensorFlow 1.7 and below is affected by: Buffer Overflow. The impact is: execute arbitrary code (local). See CVE-2018-8825.
3218,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15358,">=1.15.0rc0,<1.15.4,>=2.0.0a0,<2.0.3,>=2.1.0rc0,<2.1.2,>=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, and 2.3.1 updates its dependency ""SQLite"" to handle CVE-2020-15358."
3219,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-16168,">=2.0.0a0,<2.0.1,<1.15.2",Tensorflow versions 1.15.2 and 2.0.1 updates 'sqlite3' to handle CVE-2019-16168.
3220,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-5482,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5482."
3221,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-19646,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 update its dependency ""SQLite"" to handle CVE-2019-19646."
3222,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-5215,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2 and 2.0.1 includes a fix for CVE-2020-5215: In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(""hello"", tf.float16), if eager execution is enabled."
3223,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2019-5481,">=2.0.0a0,<2.0.1,<1.15.2","Tensorflow versions 1.15.2  and 2.0.1 updates its dependency ""curl"" to handle CVE-2019-5481."
3224,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29567,">=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.5.0rc0,<2.5.0","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29567: Due to lack of validation in 'tf.raw_ops.SparseDenseCwiseMul', an attacker can trigger denial of service via 'CHECK'-fails or accesses to outside the bounds of heap allocated data. Since the implementation (https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80), it only validates the rank of the input arguments but no constraints between dimensions (https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul) and an attacker can abuse them to trigger internal 'CHECK' assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers."
3225,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-41883,">=2.10.0rc0,<2.10.1","Tensorflow 2.10.1 includes a fix for CVE-2022-41883: When ops that have specified input sizes receive a differing number of inputs, the executor will crash.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w58w-79xv-6vcj"
3226,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15212,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15212: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor. Users having access to ""segment_ids_data"" can alter ""output_index"" and then write to outside of ""output_data"" buffer. This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
3227,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15214,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15214: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a write out bounds / segmentation fault if the segment ids are not sorted. Code assumes that the segment ids are in increasing order, using the last element of the tensor holding them to determine the dimension of output tensor. This results in allocating insufficient memory for the output tensor and in a write outside the bounds of the output array. This usually results in a segmentation fault, but depending on runtime conditions it can provide for a write gadget to be used in future memory corruption-based exploits. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to the model loading code to ensure that the segment ids are sorted, although this only handles the case when the segment ids are stored statically in the model. A similar validation could be done if the segment ids are generated at runtime between inference steps. If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code."
3228,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15192,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15192: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes a list of strings to 'dlpack.to_dlpack' there is a memory leak following an expected validation failure. The issue occurs because the 'status' argument during validation failures is not properly checked. Since each of the above methods can return an error status, the 'status' value must be checked before continuing.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8fxw-76px-3rxv"
3229,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15193,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15193: In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of ""dlpack.to_dlpack"" can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a ""reinterpret_cast"". Since the ""PyObject"" is a Python object, not a Tensorflow tensor, the cast to ""EagerTensor"" fails. The issue was patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v"
3230,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15191,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","Tensorflow versions 2.2.1 and 2.3.1 include a fix for CVE-2020-15191: In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to 'dlpack.to_dlpack' the expected validations will cause variables to bind to 'nullptr' while setting a 'status' variable to the error condition. However, this 'status' argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with '-fsanitize=null'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q8qj-fc9q-cphr"
3231,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15213,">=2.2.0rc0,<2.2.1,>=2.3.0rc0,<2.3.1","TensorFlow versions 2.2.1 and 2.3.1 includes a fix for CVE-2020-15213: In TensorFlow Lite before versions 2.2.1 and 2.3.1, models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimension of the output tensor, attackers can use a very large value to trigger a large allocation. The issue was patched in commit 204945b19e44b57906c9344c0d00120eeeae178a. A potential workaround is to add a custom ""Verifier"" to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps. However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87"
3232,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15197,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15197: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has rank 2. This tensor must be a matrix because code assumes its elements are accessed as elements of a matrix. However, malicious users can pass in tensors of different rank, resulting in a ""CHECK"" assertion failure and a crash. This can be used to cause denial of service in serving installations, if users are allowed to control the components of the input sparse tensor. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02."
3233,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15200,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15200: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A ""BatchedMap"" is equivalent to a vector where each element is a hashmap. However, if the first element of ""splits_values"" is not 0, ""batch_idx"" will never be 1, hence there will be no hashmap at index 0 in ""per_batch_counts"". Trying to access that in the user code results in a segmentation fault. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3"
3234,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15199,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15199: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the ""splits"" tensor has the minimum required number of elements. Code uses this quantity to initialize a different data structure. Since ""BatchedMap"" is equivalent to a vector, it needs to have at least one element to not be ""nullptr"". If user passes a ""splits"" tensor that is empty or has exactly one element, we get a ""SIGABRT"" signal raised by the operating system. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x5cp-9pcf-pp3h"
3235,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15201,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15201: In Tensorflow before version 2.3.1, the ""RaggedCountSparseOutput"" implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the ""splits"" tensor generate a valid partitioning of the ""values"" tensor. Hence, the code is prone to heap buffer overflow. If ""split_values"" does not end with a value at least ""num_values"" then the ""while"" loop condition will trigger a read outside of the bounds of ""split_values"" once ""batch_idx"" grows too large. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4"
3236,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15198,">=2.3.0rc0,<2.3.1","TensorFlow 2.3.1 includes a fix for CVE-2020-15198: In Tensorflow before version 2.3.1, the ""SparseCountSparseOutput"" implementation does not validate that the input arguments form a valid sparse tensor. In particular, there is no validation that the ""indices"" tensor has the same shape as the ""values"" one. The values in these tensors are always accessed in parallel. Thus, a shape mismatch can result in accesses outside the bounds of heap allocated buffers. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jc87-6vpp-7ff3"
3237,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-15196,">=2.3.0rc0,<2.3.1","TensorFlow version 2.3.1 includes a fix for CVE-2020-15196: In Tensorflow version 2.3.0, the ""SparseCountSparseOutput"" and ""RaggedCountSparseOutput"" implementations don't validate that the ""weights"" tensor has the same shape as the data. The check exists for ""DenseCountSparseOutput"", where both tensors are fully specified. In the sparse and ragged count weights are still accessed in parallel with the data. But, since there is no validation, a user passing fewer weights than the values for the tensors can generate a read from outside the bounds of the heap buffer allocated for the weights. The issue was patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pg59-2f92-5cph"
3238,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37635,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37635: In affected versions the implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data. The [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor. The Tensorflow team has patched the issue in GitHub commit 87158f43f05f2720a374f3e6d22a7aaa3a33f750."
3239,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37637,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37637: It is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`. The [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid. The Tensorflow team has patched the issue in GitHub commit 5dc7f6981fdaf74c8c5be41f393df705841fb7c5."
3240,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37683,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37683: In affected versions the implementation of division in TFLite is vulnerable to a division by 0 error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc). There is no check that the divisor tensor does not contain zero elements. The Tensorflow team has patched the issue in GitHub commit 1e206baedf8bef0334cca3eb92bab134ef525a28."
3241,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37667,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37667: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.UnicodeEncode'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the 'input_splits' tensor before validating that this tensor is not empty. The Tensorflow team has patched the issue in GitHub commit 2e0ee46f1a47675152d3d865797a18358881d7a6."
3242,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37671,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37671: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.Map*' and 'tf.raw_ops.OrderedMap*' operations. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that 'indices' is in ascending order, but does not check that 'indices' is not empty. The Tensorflow team has patched the issue in GitHub commit 532f5c5a547126c634fefd43bbad1dc6417678ac."
3243,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37689,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37689: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. This is caused by the MLIR optimization of 'L2NormalizeReduceAxis' operator. The implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements. The Tensorflow team has patched the issue in GitHub commit d6b57f461b39fd1aa8c1b870f1b974aac3554955."
3244,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37648,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37648: In affected versions the code for 'tf.raw_ops.SaveV2' does not properly validate the inputs and an attacker can trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses 'ValidateInputs' to check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer above. However, the validation uses 'OP_REQUIRES' which translates to setting the 'Status' object of the current 'OpKernelContext' to an error status, followed by an empty 'return' statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the nQext line in 'Compute' that follows the call to 'ValidateInputs'. This is equivalent to lacking the validation. The Tensorflow team has patched the issue in GitHub commit 9728c60e136912a12d99ca56e106b7cce7af5986."
3245,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37680,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37680: In affected versions the implementation of fully connected layers in TFLite is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226). The Tensorflow team has patched the issue in GitHub commit 718721986aa137691ee23f03638867151f74935f."
3246,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37636,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37636: In affected versions the implementation of 'tf.raw_ops.SparseDenseCwiseDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit d9204be9f49520cdaaeb2541d1dc5187b23f31d9."
3247,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37642,">=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37642: In affected versions the implementation of 'tf.raw_ops.ResourceScatterDiv' is vulnerable to a division by 0 error. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately. The Tensorflow team has patched the issue in GitHub commit 4aacb30888638da75023e6601149415b39763d76."
3248,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37652,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37652: In affected versions the implementation for 'tf.raw_ops.BoostedTreesCreateEnsemble' can result in a use after free error if an attacker supplies specially crafted arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent 'free'-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed. The Tensorflow team has patched the issue in GitHub commit 5ecec9c6fbdbc6be03295685190a45e7eee726ab."
3249,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37649,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37649: The code for 'tf.raw_ops.UncompressElement' can be made to trigger a null pointer dereference. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a 'CompressedElement' from a 'Variant' tensor and then proceeds to dereference it for decompressing. There is no check that the 'Variant' tensor contained a 'CompressedElement', so the pointer is actually 'nullptr'. The Tensorflow team has patched the issue in GitHub commit 7bdf50bb4f5c54a4997c379092888546c97c3ebd."
3250,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37659,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37659: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don't require broadcasting (e.g., gradients of binary cwise operations). The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr. We have patched the issue in GitHub commit 93f428fd1768df147171ed674fee1fc5ab8309ec."
3251,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37647,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37647: When a user does not supply arguments that determine a valid sparse tensor, 'tf.raw_ops.SparseTensorSliceDataset' implementation can be made to dereference a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either 'indices' or 'values' are provided for an empty sparse tensor when the other is not. If 'indices' is empty, then code that performs validation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference. If 'indices' as provided by the user is empty, then 'indices' in the C++ code above is backed by an empty 'std::vector', hence calling 'indices->dim_size(0)' results in null pointer dereferencing (same as calling 'std::vector::at()' on an empty vector). The Tensorflow team has patched the issue in GitHub commit 02cc160e29d20631de3859c6653184e3f876b9d7."
3252,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37658,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37658: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixSetDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit ff8894044dfae5568ecbf2ed514c1a37dc394f1b."
3253,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37656,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37656: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToSparse'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order. The Tensorflow team has patched the issue in GitHub commit 1071f554dbd09f7e101324d366eec5f4fe5a3ece."
3254,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37638,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37638: Sending invalid argument for 'row_partition_types' of 'tf.raw_ops.RaggedTensorToTensor' API results in a null pointer dereference and undefined behavior. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty. The Tensorflow team has patched the issue in GitHub commit 301ae88b331d37a2a16159b65b255f4f9eb39314."
3255,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37654,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37654: In affected versions an attacker can trigger a crash via a 'CHECK'-fail in debug builds of TensorFlow using 'tf.raw_ops.ResourceGather' or a read from outside the bounds of heap allocated data in the same API in a release build. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the 'batch_dims' value that the user supplies is less than the rank of the input tensor. Since the implementation uses several for loops over the dimensions of 'tensor', this results in reading data from outside the bounds of heap allocated buffer backing the tensor. The Tensorflow team has patched the issue in GitHub commit bc9c546ce7015c57c2f15c168b3d9201de679a1d."
3256,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37651,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37651: In affected versions the implementation for 'tf.raw_ops.FractionalAvgPoolGrad' can be tricked into accessing data outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty 'EigenDoubleMatrixMap' and then accesses this buffer with indices that are outside of the empty area. The Tensorflow team has patched the issue in GitHub commit 0f931751fb20f565c4e94aa6df58d54a003cdb30."
3257,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37639,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37639: When restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer. Alternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration. The implementation (https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the 'tensor_name' user controlled input and immediately retrieves the tensor at the restoration index (controlled via 'preferred_shard' argument). This occurs without validating that the provided list has enough values. If the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements and if the restoration index is outside the bounds, this results in heap OOB read. The Tensorflow team has patched the issue in GitHub commit 9e82dce6e6bd1f36a57e08fa85af213e2b2f2622."
3258,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37664,">=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37664: In affected versions an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`. The [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range. The Tensorflow team has patched the issue in GitHub commit e84c975313e8e8e38bb2ea118196369c45c51378."
3259,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37686,">=2.3.0rc0,<2.3.4rc0,>=2.4.0rc0,<2.4.3rc0,>=2.5.0rc0,<=2.5.0,>=2.6.0rc0,<2.6.0","Several versions of TensorFlow are affected by CVE-2021-37686: In affected versions, the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for ellipsis in axis definition (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that 'ellipsis_end_idx' is smaller than 'i' (e.g., always negative). In this case, the inner loop does not increase 'i' and the 'continue' statement causes execution to skip over the preincrement at the end of the outer loop. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695."
3260,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-26269,">=2.4.0rc0,<2.4.0","TensorFlow 2.4.0 includes a fix for CVE-2020-26269: In TensorFlow release candidate versions 2.4.0rc*, the general implementation for matching filesystem paths to globbing pattern is vulnerable to an access out of bounds of the array holding the directories. There are multiple invariants and preconditions that are assumed by the parallel implementation of GetMatchingPaths but are not verified by the PRs introducing it (#40861 and #44310). Thus, we are completely rewriting the implementation to fully specify and validate these. This is patched in version 2.4.0. This issue only impacts master branch and the release candidates for TF version 2.4. The final release of the 2.4 release will be patched."
3261,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29614,">=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.5.0rc0,<2.5.0","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29614: The implementation of 'tf.io.decode_raw' produces incorrect results and crashes the Python interpreter when combining 'fixed_length' and wider datatypes. The implementation of the padded version (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules. First, the code computes (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the 'fixed_length' value to the size of the type argument. The 'fixed_length' argument is also used to determine the size needed for the output tensor (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79). This is followed by reencoding code (https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94). The erroneous code is the last line above: it is moving the 'out_data' pointer by 'fixed_length * sizeof (T)' bytes whereas it only copied at most 'fixed_length' bytes from the input. This results in parts of the input not being decoded into the output. Furthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory."
3262,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29530,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by invalid validation in 'SparseMatrixSparseCholesky'. See CVE-2021-29530."
3263,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29519,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'SparseCross' caused by type confusion. See CVE-2021-29519."
3264,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29522,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv3DBackprop*'. See CVE-2021-29522."
3265,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29529,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap buffer overflow caused by rounding. See CVE-2021-29529."
3266,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29518,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix vulnerabilities where session operations in eager mode lead to null pointer dereferences. See CVE-2021-29518."
3267,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29538,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29538: An attacker can cause a division by zero to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments). If all shapes are empty then 'work_unit_size' is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service."
3268,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29533,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 includes a fix for CVE-2021-29533: An attacker can trigger a denial of service via a 'CHECK' failure by passing an empty image to 'tf.raw_ops.DrawBoundingBoxes'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses 'CHECK_*' assertions instead of 'OP_REQUIRES' to validate user controlled inputs. Whereas 'OP_REQUIRES' allows returning an error condition back to the user, the 'CHECK_*' macros result in a crash if the condition is false, similar to 'assert'. In this case, 'height' is 0 from the 'images' input. This results in 'max_box_row_clamp' being negative and the assertion being falsified, followed by aborting program execution."
3269,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29520,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a heap buffer overflow in 'Conv3DBackprop*'. See CVE-2021-29520."
3270,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29531,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.EncodePng'. See CVE-2021-29531."
3271,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29521,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a segfault in 'SparseCountSparseOutput'. See CVE-2021-29521."
3272,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29549,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29549: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero. Since `vector_num_elements` is determined based on input shapes (https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0."
3273,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29537,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29537: An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly."
3274,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29532,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29532: An attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments. Each of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads."
3275,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29615,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow in 'ParseAttrValue' with nested tensors. See CVE-2021-29615."
3276,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29548,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 include a fix for CVE-2021-29548: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the op's contract (https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization)."
3277,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29534,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29534: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.SparseConcat'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in 'shapes[0]' as dimensions for the output shape. The 'TensorShape' constructor (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a 'CHECK' operation which triggers when 'InitDims' (https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status. This is a legacy implementation of the constructor and operations should use 'BuildTensorShapeBase' or 'AddDimWithStatus' to prevent 'CHECK'-failures in the presence of overflows."
3278,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29513,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29513: Calling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences. The conversion from Python array to C++ array (https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion."
3279,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29525,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropInput'. See CVE-2021-29525."
3280,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29524,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a division by 0 in 'Conv2DBackpropFilter'. See CVE-2021-29524."
3281,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29523,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a 'CHECK'-fail in 'AddManySparseToTensorsMap'. See CVE-2021-29523."
3282,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29552,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29552: An attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar. Since the tensor is empty the `CHECK` involved in `.scalar<T>()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination."
3283,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29539,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29539: TensorFlow is an end-to-end open source platform for machine learning. Calling `tf.raw_ops.ImmutableConst`(https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars. We have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved. If using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument."
3284,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29541,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'StringNGrams'. See CVE-2021-29541."
3285,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29535,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29535: An attacker can cause a heap buffer overflow in 'QuantizedMul' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
3286,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29542,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'StringNGrams'. See CVE-2021-29542."
3287,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29536,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29536: An attacker can cause a heap buffer overflow in 'QuantizedReshape' by passing in invalid thresholds for the quantization. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. However, if any of these tensors is empty, then '.flat<T>()' is an empty buffer and accessing the element at position 0 results in overflow."
3288,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29544,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29544: An attacker can trigger a denial of service via a 'CHECK'-fail in 'tf.raw_ops.QuantizeAndDequantizeV4Grad'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L162-L163) does not validate the rank of the 'input_*' tensors. In turn, this results in the tensors being passes as they are to 'QuantizeAndDequantizePerChannelGradientImpl' (https://github.com/tensorflow/tensorflow/blob/95078c145b5a7a43ee046144005f733092756ab5/tensorflow/core/kernels/quantize_and_dequantize_op.h#L295-L306). However, the 'vec<T>' method, requires the rank to 1 and triggers a 'CHECK' failure otherwise."
3289,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29543,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29543: An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks."
3290,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29540,">=2.5.0rc0,<2.5.0,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29540: TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow to occur in 'Conv2DBackpropFilter'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in 'filter_sizes'. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor."
3291,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-8169,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency 'curl' to version 7.76.0 to handle CVE-2020-8169."
3292,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29516,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix fixes a null pointer dereference via invalid Ragged Tensors. See CVE-2021-29516."
3293,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29517,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in 'Conv3D'. See CVE-2021-29517."
3294,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29515,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 fix a reference binding to null pointer in 'MatrixDiag*' ops. See CVE-2021-29515."
3295,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29594,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's convolution code. See CVE-2021-29594."
3296,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29596,">=2.5.0rc0,<2.5.0,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'EmbeddingLookup'. See CVE-2021-29596."
3297,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29558,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.4.0rc0,<2.4.2","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29558: An attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset."
3298,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29545,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29545: An attacker can trigger a denial of service via a 'CHECK'-fail in converting sparse tensors to CSR Sparse matrices. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap. If the value at 'indices(i, 0)' is such that 'indices(i, 0) + 1' is outside the bounds of 'csr_row_ptr', this results in writing outside of bounds of heap allocated data."
3299,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29551,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29551: The implementation of 'MatrixTriangularSolve' (https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails."
3300,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29592,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in TFLite's 'Reshape' operator. See CVE-2021-29592."
3301,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29581,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'CTCBeamSearchDecoder'. See CVE-2021-29581."
3302,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29617,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29617: An attacker can cause a denial of service via `CHECK`-fail in `tf.strings.substr` with invalid arguments."
3303,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29574,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior in 'MaxPool3DGradGrad'. See CVE-2021-29574."
3304,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29512,">=2.5.0rc0,<2.5.0,>=2.3.0rc0,<2.3.3,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 include a fix for CVE-2021-29512: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the 'for' loop, 'batch_idx' is set to 0. The user controls the 'splits' array, making it contain only one element, 0. Thus, the code in the 'while' loop would increment 'batch_idx' and then try to read 'splits(1)', which is outside of bounds."
3305,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29556,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29556: An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument."
3306,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29613,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'tf.raw_ops.CTCLoss'. See CVE-2021-29613."
3307,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29526,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'Conv2D'. See CVE-2021-29526."
3308,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29527,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedConv2D'. See CVE-2021-29527."
3309,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29595,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29595: The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0."
3310,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29561,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4,>=2.3.0rc0,<2.3.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'LoadAndRemapMatrix'. See CVE-2021-29561."
3311,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29585,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.2.0rc0,<2.2.3,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29585: The TFLite computation for size of output after padding, `ComputeOutSize`(https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division. Users can craft special models such that `ComputeOutSize` is called with `stride` set to 0."
3312,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29589,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29589: The reference implementation of the `GatherNd` TFLite operator is vulnerable to a division by zero error (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966). An attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension."
3313,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29570,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'MaxPoolGradWithArgmax'. See CVE-2021-29570."
3314,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29559,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB access in unicode ops. See CVE-2021-29559."
3315,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29555,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'FusedBatchNorm'. See CVE-2021-29555."
3316,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29588,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'TransposeConv'. See CVE-2021-29588."
3317,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29557,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'SparseMatMul'. See CVE-2021-29557."
3318,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29612,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'BandedTriangularSolve'. See CVE-2021-29612."
3319,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29514,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.1.0rc0,<2.1.4,>=2.2.0rc0,<2.2.3","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29514: If the 'splits' argument of 'RaggedBincount' does not specify a valid 'SparseTensor' (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the 'splits' tensor buffer in the implementation of the 'RaggedBincount' op (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L446). Before the 'for' loop, 'batch_idx' is set to 0. The attacker sets 'splits(0)' to be 7, hence the 'while' loop does not execute and 'batch_idx' remains 0. This then results in writing to 'out(-1, bin)', which is before the heap allocated buffer for the output tensor."
3320,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29584,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail due to integer overflow. See CVE-2021-29584."
3321,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29582,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in 'tf.raw_ops.Dequantize'. See CVE-2021-29582."
3322,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29562,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a 'CHECK'-fail in 'tf.raw_ops.IRFFT'. See CVE-2021-29562."
3323,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29597,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SpaceToBatchNd'. See CVE-2021-29597."
3324,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29565,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'SparseFillEmptyRows'. See CVE-2021-29565."
3325,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29619,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a segfault in 'tf.raw_ops.SparseCountSparseOutput'. See CVE-2021-29619."
3326,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29602,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'DepthwiseConv'. See CVE-2021-29602."
3327,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29577,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'AvgPool3DGrad'. See CVE-2021-29577."
3328,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29566,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29566: An attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to 'tf.raw_ops.Dilation2DBackpropInput'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array. The values for 'h_out' and 'w_out' are guaranteed to be in range for 'out_backprop' (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating 'h_in_max'/'w_in_max' and 'in_backprop'."
3329,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29576,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPool3DGradGrad'. See CVE-2021-29576."
3330,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29600,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'OneHot'. See CVE-2021-29600."
3331,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29599,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'Split'. See CVE-2021-29599."
3332,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29608,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29608: TensorFlow is an end-to-end open source platform for machine learning. Due to lack of validation in 'tf.raw_ops.RaggedTensorToTensor', an attacker can exploit an undefined behavior if input arguments are empty. The implementation (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones. There are multiple 'DCHECK' validations to prevent heap OOB, but these are no-op in release builds, hence they don't prevent anything."
3333,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29554,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'DenseCountSparseOutput'. See CVE-2021-29554."
3334,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29578,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'FractionalAvgPoolGrad'. See CVE-2021-29578."
3335,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29547,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29547: An attacker can cause a segfault and denial of service via accessing data outside of bounds in 'tf.raw_ops.QuantizedBatchNormWithGlobalNormalization'. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, '.flat<T>()' is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds."
3336,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29603,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB write in TFLite. See CVE-2021-29603."
3337,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29604,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of hashtable lookup. See CVE-2021-29604."
3338,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29572,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.5.0, 2.4.2, 2.3.3, 2.2.3, and 2.1.4 include a fix for CVE-2021-29572: The implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer. The implementation (https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all constraints expected by the op(https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer)."
3339,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29587,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29587: TensorFlow is an end-to-end open source platform for machine learning. The `Prepare` step of the `SpaceToDepth` TFLite operator does not check for 0 before division (https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67). An attacker can craft a model such that `params->block_size` would be zero."
3340,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29569,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap out of bounds read in 'RequantizationRange'. See CVE-2021-29569."
3341,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-8285,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.5.0, 2.4.2, 2.3.3, 2.2.3 and 2.1.4 updates its dependency ""curl"" to a secure version (7.76.0)."
3342,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29601,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite concatentation. See CVE-2021-29601."
3343,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29573,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'MaxPoolGradWithArgmax'. See CVE-2021-29573."
3344,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29586,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in optimized pooling implementations in TFLite. See CVE-2021-29586."
3345,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29590,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB read in TFLite's implementation of 'Minimum' or 'Maximum'. See CVE-2021-29590."
3346,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29598,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'SVDF'. See CVE-2021-29598."
3347,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29528,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by 0 in 'QuantizedMul'. See CVE-2021-29528."
3348,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29611,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseReshape'. See CVE-2021-29611."
3349,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29580,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an undefined behavior and a 'CHECK'-fail in 'FractionalMaxPoolGrad'. See CVE-2021-29580."
3350,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29618,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29618: Passing a complex argument to `tf.transpose` at the same time as passing 'conjugate=True' argument results in a crash."
3351,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29575,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix an overflow and a denial of service in 'tf.raw_ops.ReverseSequence'. See CVE-2021-29575."
3352,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29616,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29616: The implementation of TrySimplify (https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that result in optimizing a node with no inputs."
3353,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29591,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a stack overflow due to looping TFLite subgraph. See CVE-2021-29591."
3354,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29606,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix fixes a heap OOB read in TFLite. See CVE-2021-29606."
3355,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29607,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseSparseMinimum'. See CVE-2021-29607."
3356,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29609,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix vulnerabilities caused by incomplete validation in 'SparseAdd'. See CVE-2021-29609."
3357,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29583,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29583: The implementation of 'tf.raw_ops.FusedBatchNorm' is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that 'scale', 'offset', 'mean' and 'variance' (the last two only when required) all have the same number of elements as the number of channels of 'x'. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior."
3358,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-8231,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update its dependency ""curl"" to v7.76.0 to include security fixes."
3359,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-8286,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 updates 'curl' to '7.76.0' to handle CVE-2020-8286: curl 7.41.0 through 7.73.0 is vulnerable to an improper check for certificate revocation due to insufficient verification of the OCSP response."
3360,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-8177,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 update 'curl' to '7.76.0' to handle CVE-2020-8177."
3361,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29593,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a division by zero in TFLite's implementation of 'BatchToSpaceNd'. See CVE-2021-29593."
3362,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2020-8284,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow versions 2.1.4, 2.2.3, 2.3.3, 2.4.2 and 2.5.0 update its dependency ""curl"" to handle CVE-2020-8284."
3363,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29579,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap buffer overflow in 'MaxPoolGrad'. See CVE-2021-29579."
3364,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29605,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a integer overflow in TFLite memory allocation. See CVE-2021-29605."
3365,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29564,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a null pointer dereference in 'EditDistance'. See CVE-2021-29564."
3366,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29553,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 fix a heap OOB in 'QuantizeAndDequantizeV3'. See CVE-2021-29553."
3367,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29563,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29563: An attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`. Eigen code operating on an empty matrix can trigger on an assertion and will cause program termination."
3368,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29550,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29550: An attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values. The user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger. Later, these computed values are used as arguments (https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to `GeneratePoolingSequence`(https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation. Since `output_length` can be 0, this results in runtime crashing."
3369,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29546,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29546: TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`. This is because the implementation of the Eigen kernel (https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero."
3370,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29610,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29610: The validation in 'tf.raw_ops.QuantizeAndDequantizeV2' allows invalid values for 'axis' argument:. The validation (https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses '||' to mix two different conditions. If 'axis_ < -1' the condition in 'OP_REQUIRES' will still be true, but this value of 'axis_' results in heap underflow. This allows attackers to read/write to other data on the heap."
3371,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29571,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29571: The implementation of 'tf.raw_ops.MaxPoolGradWithArgmax' can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs. The implementation (https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of 'boxes' input is 4, as required by the op (https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption. If the last dimension in 'boxes' is less than 4, accesses similar to 'tboxes(b, bb, 3)' will access data outside of bounds. Further during code execution there are also writes to these indices."
3372,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29560,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","Tensorflow 2.1.4, 2.2.3, 2.3.3, 2.4.2, and 2.5.0 include a fix for CVE-2021-29560: An attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`. This is because the implementation (https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel. Since the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when 'parent_output_index' is shorter than 'row_split'."
3373,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-29568,">=2.5.0rc0,<2.5.0,>=2.4.0rc0,<2.4.2,>=2.3.0rc0,<2.3.3,>=2.2.0rc0,<2.2.3,>=2.1.0rc0,<2.1.4","TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in 'tf.raw_ops.ParameterizedTruncatedNormal'. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of 'shape'. If 'shape' argument is empty, then 'shape_tensor.flat<T>()' is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."
3374,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37645,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37645: In affected versions the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit 96f364a1ca3009f98980021c4b32be5fdcca33a1."
3375,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37691,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37691: In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). The Tensorflow team has patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9."
3376,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37688,">=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.6.0rc0,<2.6.0","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37688: In affected versions an attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer. The Tensorflow team has patched the issue in GitHub commit 15691e456c7dc9bd6be203b09765b063bf4a380c."
3377,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37692,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","Tensorflow versions 2.5.1 and 2.6.0 include a fix for CVE-2021-37692:
In affected versions under certain conditions, Go code can trigger a segfault in string deallocation. For string tensors, ""C.TF_TString_Dealloc"" is called during garbage collection within a finalizer function. However, tensor structure isn't checked until encoding to avoid a performance penalty. The current method for dealloc assumes that encoding succeeded, but segfaults when a string tensor is garbage collected whose encoding failed (e.g., due to mismatched dimensions). To fix this, the call to set the finalizer function is deferred until ""NewTensor"" returns and, if encoding failed for a string tensor, deallocs are determined based on bytes written. The Tensorflow team has patched the issue in GitHub commit:
https://github.com/tensorflow/tensorflow/commit/8721ba96e5760c229217b594f6d2ba332beedf22
https://github.com/tensorflow/tensorflow/pull/50508
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cmgw-8vpc-rc59"
3378,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37640,">=2.5.0rc0,<2.5.1,>=2.6.0rc0,<2.6.0","TensorFlow 2.5.1 and 2.6.0 include a fix for CVE-2021-37640: In affected versions the implementation of 'tf.raw_ops.SparseReshape' can be made to trigger an integral division by 0 exception. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements. The reshape functor (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0. The Tensorflow team has patched the issue in GitHub commit 4923de56ec94fff7770df259ab7f2288a74feb41."
3379,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22898,">=2.6.0a1,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow versions 2.3.4, 2.4.3, 2.5.1, and 2.6.0 update its dependency ""curl"" to include a fix for CVE-2021-22898"
3380,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37685,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37685: In affected versions TFLite's 'expand_dims.cc' (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data. If 'axis' is a large negative value (e.g., '-100000'), then after the first 'if' it would still be negative. The check following the 'if' statement will pass and the 'for' loop would read one element before the start of 'input_dims.data' (when 'i = 0'). The Tensorflow team has patched the issue in GitHub commit d94ffe08a65400f898241c0374e9edc6fa8ed257."
3381,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37657,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37657: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in all operations of type 'tf.raw_ops.MatrixDiagV*'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of 'k' is a valid tensor. The Tensorflow team has checked that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong. The Tensorflow team has patched the issue in GitHub commit f2a673bd34f0d64b8e40a551ac78989d16daad09."
3382,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37663,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37663:
In affected versions, due to incomplete validation in ""tf.raw_ops.QuantizeV2"", an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that ""min_range"" and ""max_range"" both have the same non-zero number of elements. If ""axis"" is provided (i.e., not ""-1""), then validation should check that it is a value in range for the rank of ""input"" tensor and then the lengths of ""min_range"" and ""max_range"" inputs match the ""axis"" dimension of the ""input"" tensor. The Tensorflow team has patched the issue in GitHub commit 6da6620efad397c85493b8f8667b821403516708. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g25h-jr74-qp5j
https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708"
3383,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37661,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37661: In affected versions an attacker can cause a denial of service in 'boosted_trees_create_quantile_stream_resource' by using negative arguments. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that 'num_streams' only contains non-negative numbers. In turn, this results in using this value to allocate memory (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40). However, 'reserve' receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library. The Tensorflow team has patched the issue in GitHub commit 8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992."
3384,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37665,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37665:
In affected versions, due to incomplete validation in MKL implementation of requantization, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the ""input"" tensor. A similar issue occurs in ""MklRequantizePerChannelOp"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments. The Tensorflow team has patched the issue in GitHub commit 9e62869465573cb2d9b5053f1fa02a81fce21d69 and in the Github commit 203214568f5bc237603dbab6e1fd389f1572f5c9.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-v82p-hv3v-p6qp
https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9
https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69"
3385,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37676,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37676: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.SparseFillEmptyRows'. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors. The Tensorflow team has patched the issue in GitHub commit 578e634b4f1c1c684d4b4294f9e5281b2133b3ed."
3386,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37675,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37675: In affected versions most implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash. The shape inference implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations. The Tensorflow team has patched the issue in GitHub commit 8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4."
3387,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37687,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37687: In affected versions TFLite's 'GatherNd' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation. Hence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in 'indices'. Similar issue exists in 'Gather' implementation (https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc). The Tensorflow team has patched the issue in GitHub commits bb6a0383ed553c286f87ca88c207f6774d5c4a8f and eb921122119a6b6e470ee98b89e65d721663179d."
3388,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37668,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37668:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.UnravelIndex"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by ""dims"" is not empty. Hence, if one element of ""dims"" is 0, the implementation does a division by 0. The Tensorflow team has patched the issue in GitHub commit a776040a5e7ebf76eeb7eb923bf1ae417dd4d233.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-2wmv-37vq-52g5
https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233"
3389,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37653,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37653: In affected versions an attacker can trigger a crash via a floating point exception in 'tf.raw_ops.ResourceGather'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, 'batch_size', and then divides by it without checking that this value is not 0. The Tensorflow team has patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11."
3390,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37660,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.4.0rc0,<2.4.3,>=2.5.0rc0,<2.5.1","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37660: In affected versions an attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if 'x' and 'v' are empty but the code uses '||' instead of '&&'. The Tensorflow team has patched the issue in GitHub commit e86605c0a336c088b638da02135ea6f9f6753618."
3391,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37684,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37684: In affected versions the implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0. The Tensorflow team has patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695 (https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695)."
3392,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37643,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37643: If a user does not provide a valid padding value to 'tf.raw_ops.MatrixDiagPartOp', then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from. The Tensorflow team has patched the issue in GitHub commit 482da92095c4d48f8784b1f00dda4f81c28d2988."
3393,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37644,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37644: In affected versions providing a negative element to 'num_elements' list argument of 'tf.raw_ops.TensorListReserve' causes the runtime to abort the process due to reallocating a 'std::vector' to have a negative number of elements. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls 'std::vector.resize()' with the new size controlled by input given by the user, without checking that this input is valid. The Tensorflow team has patched the issue in GitHub commit 8a6e874437670045e6c7dc6154c7412b4a2135e2."
3394,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37646,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37646: In affected versions the implementation of 'tf.raw_ops.StringNGrams' is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls 'reserve' on a 'tstring' with a value that sometimes can be negative if user supplies negative 'ngram_widths'. The 'reserve' method calls 'TF_TString_Reserve' which has an 'unsigned long' argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer. The Tensorflow team has patched the issue in GitHub commit c283e542a3f422420cfdb332414543b62fc4e4a5."
3395,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37681,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37681: In affected versions the implementation of SVDF in TFLite is vulnerable to a null pointer error (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313). The 'GetVariableInput' function (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but 'GetTensorData' assumes that the argument is always a valid tensor. Furthermore, because 'GetVariableInput' calls 'GetMutableInput' (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return 'nullptr', the 'tensor->is_variable' expression can also trigger a null pointer exception. The Tensorflow team has patched the issue in GitHub commit 5b048e87e4e55990dae6b547add4dae59f4e1c76."
3396,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37641,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37641: In affected versions if the arguments to 'tf.raw_ops.RaggedGather' don't determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers. The implementation (https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by 'params_nested_splits' is not an empty list of tensors. The Tensorflow team has patched the issue in GitHub commit a2b743f6017d7b97af1fe49087ae15f0ac634373."
3397,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37666,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37666: In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in 'tf.raw_ops.RaggedTensorToVariant'. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. The Tensorflow team has patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612."
3398,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37662,">=2.6.0rc0,<2.6.0,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37662: In affected versions an attacker can generate undefined behavior via a reference binding to nullptr in 'BoostedTreesCalculateBestGainsPerFeature' and similar attack can occur in 'BoostedTreesCalculateBestFeatureSplitV2'. The implementation (https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values. The Tensorflow team has patched the issue in GitHub commit 9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad and in commit 429f009d2b2c09028647dd4bb7b3f6f414bbaad7."
3399,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37690,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37690:
In affected versions when running shape functions, some functions (such as 'MutableHashTableShape') produce extra output information in the form of a 'ShapeAndType' struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault. 'ShapeRefiner' is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but the Tensorflow team was not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types. The Tensorflow team has patched the issue in GitHub commit ee119d4a498979525046fba1c3dd3f13a039fbb1.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3hxh-8cp2-g4hg
https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1"
3400,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37682,">=2.6.0rc0,<2.6.0,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.5.0rc0,<2.5.1","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37682:
In affected versions all TFLite operations that use quantization can be made to use unitialized values. (For example, https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200). The issue stems from the fact that ""quantization.params"" is only valid if ""quantization.type"" is different that ""kTfLiteNoQuantization"". However, these checks are missing in large parts of the code. The Tensorflow team has patched the issue in GitHub commits 537bc7c723439b9194a358f64d871dd326c18887, 4a91f2069f7145aab6ba2d8cfe41be8a110c18a5 and 8933b8a21280696ab119b63263babdb54c298538.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4c4g-crqm-xrxw
https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5
https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887
https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538"
3401,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37650,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37650: In affected versions the implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types. The Tensorflow team has patched the issue in GitHub commit e0b6e58c328059829c3eb968136f17aa72b6c876."
3402,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37669,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37669:
In affected versions, an attacker can cause denial of service in applications serving models using ""tf.raw_ops.NonMaxSuppressionV5"" by triggering a division by 0. The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a ""std::vector"". However, as ""std::vector::resize"" takes the size argument as a ""size_t"" and ""output_size"" is an ""int"", there is an implicit conversion to unsigned. If the attacker supplies a negative value, this conversion results in a crash. A similar issue occurs in ""CombinedNonMaxSuppression"". The Tensorflow team has patched the issue in GitHub commit 3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d and commit b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vmjw-c2vp-p33c
https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d
https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58"
3403,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37677,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for 'tf.raw_ops.Dequantize' has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses 'axis' to select between two different values for 'minmax_rank' which is then used to retrieve tensor dimensions. However, code assumes that 'axis' can be either '-1' or a value greater than '-1', with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
3404,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22901,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
3405,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37655,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37655: TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to 'tf.raw_ops.ResourceScatterUpdate'. The implementation (https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of 'indices' and 'updates': instead of checking that the shape of 'indices' is a prefix of the shape of 'updates' (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship. The Tensorflow team has patched the issue in GitHub commit 01cff3f986259d661103412a20745928c727326f."
3406,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37672,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37672:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.SdcaOptimizerV2"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of ""example_labels"" is the same as the number of examples. The Tensorflow team has patched the issue in GitHub commit a4e138660270e7599793fa438cd7b2fc2ce215a6.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-5hj3-vjjf-f5m7
https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6"
3407,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37670,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37670:
In affected versions, an attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to ""tf.raw_ops.UpperBound"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of ""sorted_input"" argument. A similar issue occurs in ""tf.raw_ops.LowerBound"". The Tensorflow team has patched the issue in GitHub commit 42459e4273c2e47a3232cc16c4f4fff3b3a35c38.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-9697-98pf-4rw7
https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38"
3408,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37679,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37679:
In affected versions it is possible to nest a ""tf.map_fn"" within another ""tf.map_fn"" call. However, if the input tensor is a ""RaggedTensor"" and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap. The ""t"" and ""z"" outputs should be identical, however this is not the case. The last row of ""t"" contains data from the heap which can be used to leak other memory information. The bug lies in the conversion from a ""Variant"" tensor to a ""RaggedTensor"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions. The same implementation can result in data loss, if input tensor is tweaked. The Tensorflow team has patched the issue in GitHub commit 4e2565483d0ffcadc719bd44893fb7f609bb5f12.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-g8wg-cjwc-xhhp
https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12"
3409,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22897,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
3410,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-22876,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow 2.3.4, 2.4.3, 2.5.1, and 2.6.0 updates its dependency 'curl' to v7.77.0 to include security fixes."
3411,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37673,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","Tensorflow version 2.3.4, 2.4.3, 2.5.1 and 2.6.0 include a fix for CVE-2021-37673:
In affected versions, an attacker can trigger a denial of service via a ""CHECK""-fail in ""tf.raw_ops.MapStage"". The implementation (https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the ""key"" input is a valid non-empty tensor. The Tensorflow team has patched the issue in GitHub commit d7de67733925de196ec8863a33445b73f9562d1d.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-278g-rq84-9hmg
https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d"
3412,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37674,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4","TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in 'tf.raw_ops.MaxPoolGrad' caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the 'orig_input' and 'orig_output' tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."
3413,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-37678,">=2.6.0rc0,<2.6.0,>=2.5.0rc0,<2.5.1,>=2.4.0rc0,<2.4.3,>=2.3.0rc0,<2.3.4,>=2.7.0rc0,<2.7.0","Tensorflow version 2.3.4, 2.4.3, 2.5.1, 2.6.0 and 2.7.0 include a fix for CVE-2021-37678:
In affected versions, TensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format. The implementation(https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses ""yaml.unsafe_load"" which can perform arbitrary code execution on the input. Given that YAML format support requires a significant amount of work, the Tensorflow team has removed it for now. The Tensorflow team has patched the issue in GitHub commit 23d6383eb6c14084a8fc3bdf164043b974818012.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-r6jx-9g48-2r5r
https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012"
3414,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41211,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41211: In affected versions, the shape inference code for 'QuantizeV2' can trigger a read outside of bounds of heap allocated array. This occurs whenever 'axis' is a negative value less than '-1'. In this case, we are accessing data before the start of a heap buffer. The code allows 'axis' to be an optional argument ('s' would contain an 'error::NOT_FOUND' error code). Otherwise, it assumes that 'axis' is a valid index into the dimensions of the 'input' tensor. If 'axis' is less than '-1' then this results in a heap OOB read. The fix is included in TensorFlow 2.7.0. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvgx-3v3q-m36c
https://github.com/tensorflow/tensorflow/commit/a0d64445116c43cf46a5666bd4eee28e7a82f244"
3415,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2021-41220,">=2.6.0rc0,<2.6.1","Tensorflow version 2.6.1 includes a fix for CVE-2021-41220: In affected versions, the async implementation of 'CollectiveReduceV2' suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been 'std::move()'d are still accessed. The fix is included in TensorFlow 2.7.0.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5
https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
3416,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23594,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow is an Open Source Machine Learning Framework. The TFG dialect of TensorFlow (MLIR) makes several assumptions about the incoming `GraphDef` before converting it to the MLIR-based dialect. If an attacker changes the `SavedModel` format on disk to invalidate these assumptions and the `GraphDef` is then converted to MLIR-based IR then they can cause a crash in the Python interpreter. Under certain scenarios, heap OOB read/writes are possible. These issues have been discovered via fuzzing and it is possible that more weaknesses exist. We will patch them as they are discovered."
3417,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23590,">=2.7.0a0,<2.7.1,>=2.8.0a0,<2.8.0","Tensorflow versions 2.7.1 and 2.8.0 include a fix for CVE-2022-23590: A 'GraphDef' from a TensorFlow 'SavedModel' can be maliciously altered to cause a TensorFlow process to crash due to encountering a 'StatusOr' value that is an error and forcibly extracting the value from it.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqrv-8r2f-7278"
3418,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23592,">=2.8.0a0,<2.8.0","Tensorflow version 2.8.0 includes a fix for CVE-2022-23592: TensorFlow's type inference can cause a heap out of bounds read as the bounds checking is done in a 'DCHECK' (which is a no-op during production). An attacker can control the 'input_idx' variable such that 'ix' would be larger than the number of values in 'node_t.args'.
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vq36-27g6-p492"
3419,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-23593,">=2.8.0a0,<2.8.0","Tensorflow 2.8.0 includes a fix for CVE-2022-23593: The 'simplifyBroadcast' function in the MLIR-TFRT infrastructure in TensorFlow is vulnerable to a segfault (hence, denial of service), if called with scalar shapes. If all shapes are scalar, then 'maxRank' is 0, so we build an empty 'SmallVector'. 
https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gwcx-jrx4-92w2"
3420,tensorflow,==*,/home/daniele/git/NICHE_projects/Repo/Cloneables/cleverhans/docsource/docs_requirements.txt,False,CVE-2022-29210,">=2.8.0rc0,<2.8.1,>=2.9.0rc0,<2.9.0","TensorFlow is an open source platform for machine learning. In version 2.8.0, the 'TensorKey' hash function used total estimated 'AllocatedBytes()', which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. 'int32_t'). It also tried to access individual tensor bytes through 'tensor.data()' of size 'AllocatedBytes()'. This led to ASAN failures because the 'AllocatedBytes()' is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the '.data()' buffer. The discoverers could not use this byte vector anyway because types such as 'tstring' include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."
