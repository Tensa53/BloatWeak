,dep,version,filepath,bloated,cve,affected versions,advisory
0,cursor,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,no one,no one,no one
1,scruffington,>=0.3.6,/home/daniele/git/Validation/Repo/voltron/setup.py,False,no one,no one,no one
2,flask,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2019-1010083,<0.12.3,"Flask 0.12.3 includes a fix for CVE-2019-1010083: Unexpected memory usage. The impact is denial of service. The attack vector is crafted encoded JSON data. NOTE: this may overlap CVE-2018-1000656.
https://github.com/pallets/flask/pull/2695/commits/0e1e9a04aaf29ab78f721cfc79ac2a691f6e3929"
3,flask,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2018-1000656,<0.12.3,flask version Before 0.12.3 contains a CWE-20: Improper Input Validation vulnerability in flask that can result in Large amount of memory usage possibly leading to denial of service. This attack appear to be exploitable via Attacker provides JSON data in incorrect encoding. This vulnerability appears to have been fixed in 0.12.3.
4,flask,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,PVE-2021-25820,<0.6.1,flask 0.6.1 fixes a security problem that allowed clients to download arbitrary files  if the host server was a windows based operating system and the client  uses backslashes to escape the directory the files where exposed from.
5,flask,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2023-30861,"<2.2.5,>=2.3.0,<2.3.2","Flask is a lightweight WSGI web application framework. When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by the proxy to other clients. If the proxy also caches 'Set-Cookie' headers, it may send one client's 'session' cookie to other clients. The severity depends on the application's use of the session and the proxy's behavior regarding cookies. The risk depends on all these conditions being met.

1. The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.
2. The application sets 'session.permanent = True'
3. The application does not access or modify the session at any point during a request.
4. 'SESSION_REFRESH_EACH_REQUEST' enabled (the default).
5. The application does not set a 'Cache-Control' header to indicate that a page is private or should not be cached.

This happens because vulnerable versions of Flask only set the 'Vary: Cookie' header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified. This issue has been fixed in versions 2.3.2 and 2.2.5."
6,flask_restful,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,True,no one,no one,no one
7,blessed,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,no one,no one,no one
8,pygments,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2022-40896,<2.15.0,"Pygments 2.15.0 includes a fix for CVE-2022-40896: In Pygments before 2.15.0 the lexers processing Smithy, SQL/SQL+Jinja or Java properties files from untrusted source are vulnerable to ReDoS."
9,pygments,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2021-27291,">=1.1,<2.7.4","Pygments 2.7.4 includes a fix for CVE-2021-27291: In pygments 1.1+, fixed in 2.7.4, the lexers used to parse programming languages rely heavily on regular expressions. Some of the regular expressions have exponential or cubic worst-case complexity and are vulnerable to ReDoS. By crafting malicious input, an attacker can cause a denial of service."
10,pygments,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2015-8557,">=1.2.2,<2.1",Pygments 2.1 includes a fix for CVE-2015-8557: The FontManager._get_nix_font_path function in formatters/img.py in pygments 1.2.2 through 2.0.2 allows remote attackers to execute arbitrary commands via shell metacharacters in a font name.
11,pygments,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2021-20270,">=1.5,<2.7.4","Pygments 2.7.4 includes a fix for CVE-2021-20270: An infinite loop in SMLLexer in Pygments versions 1.5 to 2.7.3 may lead to denial of service when performing syntax highlighting of a Standard ML (SML) source file, as demonstrated by input that only contains the ""exception"" keyword."
12,requests,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2014-1830,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. This fixes CVE-2014-1830.
13,requests,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2014-1829,<2.3.0,Requests before 2.3.0 exposes Authorization or Proxy-Authorization headers on redirect. See: CVE-2014-1829.
14,requests,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2018-18074,<=2.19.1,"Requests before 2.20.0 sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network."
15,requests,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2015-2296,">=2.1,<=2.5.3",The resolve_redirects function in sessions.py in requests 2.1.0 through 2.5.3 allows remote attackers to conduct session fixation attacks via a cookie without a host value in a redirect.
16,requests,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,CVE-2023-32681,">=2.3.0,<2.31.0","Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.

"
17,requests_unixsocket,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,no one,no one,no one
18,six,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,False,no one,no one,no one
19,pysigset,==*,/home/daniele/git/Validation/Repo/voltron/setup.py,True,no one,no one,no one
